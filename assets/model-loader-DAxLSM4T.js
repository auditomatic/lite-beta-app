var e=Object.defineProperty,o=(o,s,t)=>((o,s,t)=>s in o?e(o,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[s]=t)(o,"symbol"!=typeof s?s+"":s,t);class s{constructor(){o(this,"modelConfigs",new Map),o(this,"modelRules",[]),o(this,"loadPromise",null)}async loadModels(){if(this.loadPromise)return this.loadPromise;this.loadPromise=this.performLoad(),await this.loadPromise}async performLoad(){const e=Object.assign({});for(const s in e)try{const o=(await e[s]()).default;if(o&&o.modelId){this.modelConfigs.set(o.modelId,o);const e={pattern:`^${o.modelId}$`,name:o.displayName,params:o.parameters||{}};this.modelRules.push(e)}}catch(o){console.error(`Failed to load deterministic model from ${s}:`,o)}}getModelRules(){return this.modelRules}getModelConfig(e){return this.modelConfigs.get(e)}getAllConfigs(){return Array.from(this.modelConfigs.values())}}let t=null;function l(){return t||(t=new s),t}export{l as getDeterministicModelLoader};
