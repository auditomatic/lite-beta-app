const e="openrouter",t="OpenRouter",r={baseUrl:"https://openrouter.ai",endpoints:{chat:"/api/v1/chat/completions"}},s={type:"bearer",header:"Authorization",envVar:"OPENROUTER_API_KEY"},o={defaultConcurrency:6,maxConcurrency:64,description:"OpenRouter API - varies by model, medium default"},i={"Content-Type":"application/json"},a=[{pattern:".*",name:"All OpenRouter Models",params:{temperature:{type:"number",description:"Sampling temperature",min:0,default:0,max:2,basic:!0},max_tokens:{type:"integer",description:"Maximum tokens to generate",min:1,default:128,basic:!0,is_output_length:!0},top_p:{type:"number",description:"Nucleus sampling threshold",min:0,max:1,basic:!1},top_k:{type:"integer",description:"Top-k sampling",min:1,basic:!1},frequency_penalty:{type:"number",description:"Frequency penalty",min:-2,max:2,basic:!1},presence_penalty:{type:"number",description:"Presence penalty",min:-2,max:2,basic:!1},repetition_penalty:{type:"number",description:"Repetition penalty",min:0,max:2,basic:!1},seed:{type:"integer",description:"Random seed",basic:!1},stop:{type:"array",description:"Stop sequences",basic:!1},logit_bias:{type:"string",description:"Token ID to bias mapping",basic:!1},logprobs:{type:"boolean",description:"Include log probabilities in response",basic:!1,enables_features:{logprobs:{boolean_value:!0}}},top_logprobs:{type:"integer",description:"Number of top log probabilities",min:0,max:20,basic:!1},min_p:{type:"number",description:"Minimum probability threshold",min:0,max:1,basic:!1},top_a:{type:"number",description:"Alternate top sampling",min:0,max:1,basic:!1},user:{type:"string",description:"User identifier",basic:!1},provider:{type:"object",description:"Provider routing preferences",basic:!1,properties:{require_parameters:{type:"boolean",description:"Only use providers that support all parameters"},order:{type:"array",description:"Preferred provider order"},allow_fallbacks:{type:"boolean",description:"Allow fallback providers if preferred unavailable"}}},models:{type:"array",description:"Alternate models for routing",basic:!1},transforms:{type:"array",description:"Prompt transforms",basic:!1}}}],n={text:{id:"text",label:"Text",description:"Standard text response",parameters:{},responseTransform:{contentPath:"choices[0].message.content",fallbackPaths:["choices[0].text","message.content"],errorPath:"error.message"}},json_schema:{id:"json_schema",label:"JSON Schema",description:"Structured JSON output following a specific schema",parameters:{response_format:{type:"json_schema",json_schema:{name:"structured_response",strict:!0,schema:{type:"object",properties:{answer:{type:"string",description:"The answer to the question"}},required:["answer"],additionalProperties:!1}}},provider:{require_parameters:!0}},responseTransform:{contentPath:"choices[0].message.content",fallbackPaths:["choices[0].text","message.content"],errorPath:"error.message",isJSON:!0}}},p={promptKey:"messages",wrapPrompt:!0,messageRole:"user"},c={logprobsPath:"choices[0].logprobs.content"},m={id:e,name:t,api:r,auth:s,execution:o,headers:i,modelRules:a,responseModes:n,requestTransform:p,responseExtraction:c};export{r as api,s as auth,m as default,o as execution,i as headers,e as id,a as modelRules,t as name,p as requestTransform,c as responseExtraction,n as responseModes};
