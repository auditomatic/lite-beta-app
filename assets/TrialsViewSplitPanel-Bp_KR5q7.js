var e=Object.defineProperty,t=(t,a,n)=>((t,a,n)=>a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n)(t,"symbol"!=typeof a?a+"":a,n);import{k as a,S as n,f as l,c as r,W as s,V as i,d as o,w as c,o as u,b as d,aa as p,a0 as m,$ as f,X as v,u as g,Y as y,_ as h,F as b,ab as _,Z as w,G as k,a3 as x,a2 as S,H as C,ah as I,ad as O,ag as T,ai as P,aj as E,B as A,g as M,s as R,h as N,a6 as $,q as F,af as j,ak as D,A as L,al as U,am as q,ae as z,an as V,l as B,a1 as H}from"./vendor-BKA9Ybw0.js";import{I as K,b as G,l as W,J as Y,G as J,R as Q,K as X,_ as Z,L as ee,i as te,N as ae,O as ne,B as le,T as re,F as se,V as ie,s as oe,W as ce,p as ue,f as de,d as pe,D as me,C as fe,r as ve,X as ge,E as ye,h as he,j as be,Y as _e,k as we,Z as ke,A as xe,$ as Se,a0 as Ce,a1 as Ie}from"./index-BTLG4nFQ.js";import{F as Oe}from"./FilterOutlined-CZTLDBpt.js";import{r as Te,C as Pe}from"./api-key-redactor-BtHbi4n4.js";import{l as Ee}from"./db-CL8uhZCz.js";import{F as Ae,T as Me}from"./TrialCreationModalNew-Du9cWW2W.js";import{_ as Re}from"./BaseModal.vue_vue_type_style_index_0_lang-RDmgKwPS.js";import"./useEnvironmentalCost-CT3V4Ddp.js";import"./cost-formatting-Bv_drrqY.js";import"./GenericModelSelectorModal-Dq0pxL0X.js";var Ne={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M516 673c0 4.4 3.4 8 7.5 8h185c4.1 0 7.5-3.6 7.5-8v-48c0-4.4-3.4-8-7.5-8h-185c-4.1 0-7.5 3.6-7.5 8v48zm-194.9 6.1l192-161c3.8-3.2 3.8-9.1 0-12.3l-192-160.9A7.95 7.95 0 00308 351v62.7c0 2.4 1 4.6 2.9 6.1L420.7 512l-109.8 92.2a8.1 8.1 0 00-2.9 6.1V673c0 6.8 7.9 10.5 13.1 6.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z"}}]},name:"code",theme:"outlined"};function $e(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Fe(e,t,a[t])})}return e}function Fe(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var je=function(e,t){var n=$e({},e,t.attrs);return a(K,$e({},n,{icon:Ne}),null)};je.displayName="CodeOutlined",je.inheritAttrs=!1;var De={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm47.7-395.2l-25.4-5.9V348.6c38 5.2 61.5 29 65.5 58.2.5 4 3.9 6.9 7.9 6.9h44.9c4.7 0 8.4-4.1 8-8.8-6.1-62.3-57.4-102.3-125.9-109.2V263c0-4.4-3.6-8-8-8h-28.1c-4.4 0-8 3.6-8 8v33c-70.8 6.9-126.2 46-126.2 119 0 67.6 49.8 100.2 102.1 112.7l24.7 6.3v142.7c-44.2-5.9-69-29.5-74.1-61.3-.6-3.8-4-6.6-7.9-6.6H363c-4.7 0-8.4 4-8 8.7 4.5 55 46.2 105.6 135.2 112.1V761c0 4.4 3.6 8 8 8h28.4c4.4 0 8-3.6 8-8.1l-.2-31.7c78.3-6.9 134.3-48.8 134.3-124-.1-69.4-44.2-100.4-109-116.4zm-68.6-16.2c-5.6-1.6-10.3-3.1-15-5-33.8-12.2-49.5-31.9-49.5-57.3 0-36.3 27.5-57 64.5-61.7v124zM534.3 677V543.3c3.1.9 5.9 1.6 8.8 2.2 47.3 14.4 63.2 34.4 63.2 65.1 0 39.1-29.4 62.6-72 66.4z"}}]},name:"dollar",theme:"outlined"};function Le(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Ue(e,t,a[t])})}return e}function Ue(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var qe=function(e,t){var n=Le({},e,t.attrs);return a(K,Le({},n,{icon:De}),null)};qe.displayName="DollarOutlined",qe.inheritAttrs=!1;var ze={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M880 912H144c-17.7 0-32-14.3-32-32V144c0-17.7 14.3-32 32-32h360c4.4 0 8 3.6 8 8v56c0 4.4-3.6 8-8 8H184v656h656V520c0-4.4 3.6-8 8-8h56c4.4 0 8 3.6 8 8v360c0 17.7-14.3 32-32 32zM770.87 199.13l-52.2-52.2a8.01 8.01 0 014.7-13.6l179.4-21c5.1-.6 9.5 3.7 8.9 8.9l-21 179.4c-.8 6.6-8.9 9.4-13.6 4.7l-52.4-52.4-256.2 256.2a8.03 8.03 0 01-11.3 0l-42.4-42.4a8.03 8.03 0 010-11.3l256.1-256.3z"}}]},name:"export",theme:"outlined"};function Ve(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Be(e,t,a[t])})}return e}function Be(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var He=function(e,t){var n=Ve({},e,t.attrs);return a(K,Ve({},n,{icon:ze}),null)};He.displayName="ExportOutlined",He.inheritAttrs=!1;var Ke={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M945 412H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h256c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM811 548H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h122c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM477.3 322.5H434c-6.2 0-11.2 5-11.2 11.2v248c0 3.6 1.7 6.9 4.6 9l148.9 108.6c5 3.6 12 2.6 15.6-2.4l25.7-35.1v-.1c3.6-5 2.5-12-2.5-15.6l-126.7-91.6V333.7c.1-6.2-5-11.2-11.1-11.2z"}},{tag:"path",attrs:{d:"M804.8 673.9H747c-5.6 0-10.9 2.9-13.9 7.7a321 321 0 01-44.5 55.7 317.17 317.17 0 01-101.3 68.3c-39.3 16.6-81 25-124 25-43.1 0-84.8-8.4-124-25-37.9-16-72-39-101.3-68.3s-52.3-63.4-68.3-101.3c-16.6-39.2-25-80.9-25-124 0-43.1 8.4-84.7 25-124 16-37.9 39-72 68.3-101.3 29.3-29.3 63.4-52.3 101.3-68.3 39.2-16.6 81-25 124-25 43.1 0 84.8 8.4 124 25 37.9 16 72 39 101.3 68.3a321 321 0 0144.5 55.7c3 4.8 8.3 7.7 13.9 7.7h57.8c6.9 0 11.3-7.2 8.2-13.3-65.2-129.7-197.4-214-345-215.7-216.1-2.7-395.6 174.2-396 390.1C71.6 727.5 246.9 903 463.2 903c149.5 0 283.9-84.6 349.8-215.8a9.18 9.18 0 00-8.2-13.3z"}}]},name:"field-time",theme:"outlined"};function Ge(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){We(e,t,a[t])})}return e}function We(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ye=function(e,t){var n=Ge({},e,t.attrs);return a(K,Ge({},n,{icon:Ke}),null)};Ye.displayName="FieldTimeOutlined",Ye.inheritAttrs=!1;var Je={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M885.2 446.3l-.2-.8-112.2-285.1c-5-16.1-19.9-27.2-36.8-27.2H281.2c-17 0-32.1 11.3-36.9 27.6L139.4 443l-.3.7-.2.8c-1.3 4.9-1.7 9.9-1 14.8-.1 1.6-.2 3.2-.2 4.8V830a60.9 60.9 0 0060.8 60.8h627.2c33.5 0 60.8-27.3 60.9-60.8V464.1c0-1.3 0-2.6-.1-3.7.4-4.9 0-9.6-1.3-14.1zm-295.8-43l-.3 15.7c-.8 44.9-31.8 75.1-77.1 75.1-22.1 0-41.1-7.1-54.8-20.6S436 441.2 435.6 419l-.3-15.7H229.5L309 210h399.2l81.7 193.3H589.4zm-375 76.8h157.3c24.3 57.1 76 90.8 140.4 90.8 33.7 0 65-9.4 90.3-27.2 22.2-15.6 39.5-37.4 50.7-63.6h156.5V814H214.4V480.1z"}}]},name:"inbox",theme:"outlined"};function Qe(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Xe(e,t,a[t])})}return e}function Xe(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ze=function(e,t){var n=Qe({},e,t.attrs);return a(K,Qe({},n,{icon:Je}),null)};Ze.displayName="InboxOutlined",Ze.inheritAttrs=!1;var et={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm-88-532h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8zm224 0h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8z"}}]},name:"pause-circle",theme:"outlined"};function tt(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){at(e,t,a[t])})}return e}function at(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var nt=function(e,t){var n=tt({},e,t.attrs);return a(K,tt({},n,{icon:et}),null)};nt.displayName="PauseCircleOutlined",nt.inheritAttrs=!1;var lt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"}}]},name:"robot",theme:"outlined"};function rt(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){st(e,t,a[t])})}return e}function st(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var it=function(e,t){var n=rt({},e,t.attrs);return a(K,rt({},n,{icon:lt}),null)};it.displayName="RobotOutlined",it.inheritAttrs=!1;var ot={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372 0-89 31.3-170.8 83.5-234.8l523.3 523.3C682.8 852.7 601 884 512 884zm288.5-137.2L277.2 223.5C341.2 171.3 423 140 512 140c205.4 0 372 166.6 372 372 0 89-31.3 170.8-83.5 234.8z"}}]},name:"stop",theme:"outlined"};function ct(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){ut(e,t,a[t])})}return e}function ut(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var dt=function(e,t){var n=ct({},e,t.attrs);return a(K,ct({},n,{icon:ot}),null)};dt.displayName="StopOutlined",dt.inheritAttrs=!1;var pt={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M848 359.3H627.7L825.8 109c4.1-5.3.4-13-6.3-13H436c-2.8 0-5.5 1.5-6.9 4L170 547.5c-3.1 5.3.7 12 6.9 12h174.4l-89.4 357.6c-1.9 7.8 7.5 13.3 13.3 7.7L853.5 373c5.2-4.9 1.7-13.7-5.5-13.7zM378.2 732.5l60.3-241H281.1l189.6-327.4h224.6L487 427.4h211L378.2 732.5z"}}]},name:"thunderbolt",theme:"outlined"};function mt(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){ft(e,t,a[t])})}return e}function ft(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var vt=function(e,t){var n=mt({},e,t.attrs);return a(K,mt({},n,{icon:pt}),null)};vt.displayName="ThunderboltOutlined",vt.inheritAttrs=!1;const gt="auditomatic.trial-split-view",yt=n("trial-split-view",()=>{const e=s(),t=i(),a=G(),n=l(null),o=l("medium"),c=l(""),u=l("all"),d=l(-1),p=r(()=>n.value&&a.trials.find(e=>e.id===n.value)||null),m=r(()=>{switch(o.value){case"wide":return 400;case"medium":return 250;case"collapsed":return 100}}),f=r(()=>"collapsed"===o.value),v=r(()=>{let e=a.trials;if("all"!==u.value&&(e=e.filter(e=>e.status===u.value)),c.value){const t=c.value.toLowerCase();e=e.filter(e=>e.name.toLowerCase().includes(t)||e.designSnapshot?.originalName?.toLowerCase().includes(t)||!1)}return[...e].sort((e,t)=>{const a=e.completed||e.started||e.created;return(t.completed||t.started||t.created).getTime()-a.getTime()})}),g=r(()=>({running:v.value.filter(e=>"running"===e.status),recent:v.value.filter(e=>"running"!==e.status)})),y=r(()=>v.value.length),h=r(()=>{const e={all:a.trials.length,running:0,completed:0,failed:0,draft:0,paused:0};return a.trials.forEach(t=>{const a=t.status;a in e&&e[a]++}),e});function b(t){n.value=t,d.value=-1,t?e.push({name:"trials",params:{trialId:t}}):e.push({name:"trials"}),W.debug("Trial selected",{trialId:t})}function _(){try{const e={panelMode:o.value,statusFilter:u.value,searchQuery:c.value};localStorage.setItem(`${gt}.preferences`,JSON.stringify(e))}catch(e){W.warn("Failed to save split view preferences",{error:e})}}return function(){try{const e=localStorage.getItem(`${gt}.preferences`);if(e){const t=JSON.parse(e);t.panelMode&&(o.value=t.panelMode),t.statusFilter&&(u.value=t.statusFilter),t.searchQuery&&(c.value=t.searchQuery)}}catch(e){W.warn("Failed to load split view preferences",{error:e})}}(),{selectedTrialId:r(()=>n.value),selectedTrial:r(()=>p.value),panelMode:r(()=>o.value),effectiveWidth:r(()=>m.value),isCollapsed:r(()=>f.value),searchQuery:r(()=>c.value),statusFilter:r(()=>u.value),keyboardFocusIndex:r(()=>d.value),filteredTrials:r(()=>v.value),groupedTrials:r(()=>g.value),totalFilteredCount:r(()=>y.value),statusCounts:r(()=>h.value),selectTrial:b,setSearchQuery:function(e){c.value=e,_()},setStatusFilter:function(e){u.value=e,_()},navigateByKeyboard:function(e){const t=[...g.value.running,...g.value.recent];0!==t.length&&(d.value="down"===e?Math.min(d.value+1,t.length-1):Math.max(d.value-1,0),d.value>=0&&d.value<t.length&&b(t[d.value].id))},togglePanelMode:function(){switch(o.value){case"wide":o.value="medium";break;case"medium":o.value="collapsed";break;case"collapsed":o.value="wide"}_()},setPanelMode:function(e){o.value=e,_()},savePreferences:_,clearPreferences:function(){try{localStorage.removeItem(`${gt}.preferences`),o.value="medium",u.value="all",c.value=""}catch(e){W.warn("Failed to clear split view preferences",{error:e})}},syncWithRoute:function(){const e=t.params.trialId;e&&e!==n.value?n.value=e:e||(n.value=null)}}}),ht=["data-collapsed"],bt={class:"list-toolbar"},_t={class:"list-title"},wt={key:1},kt={key:0,class:"list-actions"},xt={key:0,class:"list-search"},St={key:1,class:"status-tabs"},Ct=["onClick"],It={class:"tab-icon"},Ot={class:"tab-label"},Tt={class:"tab-count"},Pt={key:0,class:"list-section"},Et=["onClick","data-index"],At={key:0,class:"collapsed-content"},Mt={class:"collapsed-info"},Rt={class:"collapsed-count"},Nt={key:1,class:"item-content"},$t={class:"item-header"},Ft={class:"item-name"},jt={class:"item-meta"},Dt={class:"meta-text"},Lt={class:"meta-text"},Ut={class:"meta-text"},qt={key:1,class:"list-section"},zt=["onClick","data-index"],Vt={key:0,class:"collapsed-content"},Bt={class:"collapsed-info"},Ht={class:"collapsed-count"},Kt={key:1,class:"item-content"},Gt={class:"item-header"},Wt={class:"item-name"},Yt={class:"item-meta"},Jt={class:"meta-text"},Qt={class:"meta-text"},Xt={class:"meta-text"},Zt={key:2,class:"empty-list"},ea=Z(o({__name:"TrialListPanel",props:{collapsed:{type:Boolean,default:!1}},emits:["create-trial"],setup(e){const t=yt(),n=G(),s=l(),i=l(),o=l(t.searchQuery),C=r(()=>t.selectedTrialId),I=r(()=>t.statusFilter),O=r(()=>t.groupedTrials),T=r(()=>t.totalFilteredCount),P=r(()=>t.keyboardFocusIndex),E=r(()=>t.statusCounts),A=r(()=>[{key:"all",label:"All",icon:"📊",count:E.value.all},{key:"running",label:"Active",icon:"🟢",count:E.value.running+E.value.paused},{key:"completed",label:"Done",icon:"✅",count:E.value.completed}]);function M(e){t.selectTrial(e)}function R(e){return 0===e.progress.total?0:Math.round(e.progress.completed/e.progress.total*100)}function N(e){const t=(new Date).getTime()-e.getTime(),a=Math.floor(t/6e4),n=Math.floor(a/60),l=Math.floor(n/24);return a<1?"now":a<60?`${a}m`:n<24?`${n}h`:l<7?`${l}d`:e.toLocaleDateString()}function $(e){"ArrowDown"===e.key||"j"===e.key?(e.preventDefault(),t.navigateByKeyboard("down"),F()):"ArrowUp"!==e.key&&"k"!==e.key||(e.preventDefault(),t.navigateByKeyboard("up"),F())}function F(){const e=i.value?.querySelectorAll(".list-item"),t=P.value;e&&t>=0&&e[t]&&e[t].scrollIntoView({behavior:"smooth",block:"nearest"})}function j({key:e}){t.setStatusFilter(e)}async function D(){await n.initialize()}c(o,e=>{t.setSearchQuery(e)});const L=e=>{(e.metaKey||e.ctrlKey)&&"k"===e.key&&(e.preventDefault(),s.value?.focus())};return u(()=>{document.addEventListener("keydown",L)}),d(()=>{document.removeEventListener("keydown",L)}),(e,n)=>{const l=y("a-badge"),r=y("a-button"),c=y("a-tooltip"),u=y("a-menu-item"),d=y("a-menu-divider"),E=y("a-menu"),F=y("a-dropdown"),L=y("a-input"),U=y("a-progress"),q=y("a-tag");return w(),p("div",{class:"trial-list-panel","data-collapsed":e.collapsed},[m("div",bt,[m("div",_t,[e.collapsed?f("",!0):(w(),v(g(Y),{key:0})),e.collapsed?f("",!0):(w(),p("span",wt,"Trials")),a(l,{count:T.value,showZero:!0,style:{"margin-left":"8px"}},null,8,["count"])]),e.collapsed?f("",!0):(w(),p("div",kt,[a(r,{type:"primary",size:"small",onClick:n[0]||(n[0]=t=>e.$emit("create-trial"))},{icon:h(()=>[a(g(J))]),default:h(()=>[n[3]||(n[3]=k(" New Trial "))]),_:1,__:[3]}),a(c,{title:"Refresh"},{default:h(()=>[a(r,{type:"text",size:"small",onClick:D},{icon:h(()=>[a(g(Q))]),_:1})]),_:1}),a(F,null,{overlay:h(()=>[a(E,{onClick:j},{default:h(()=>[a(u,{key:"all"},{default:h(()=>n[4]||(n[4]=[k("All Trials")])),_:1,__:[4]}),a(d),a(u,{key:"running"},{default:h(()=>n[5]||(n[5]=[m("span",{class:"status-dot running"},null,-1),k(" Running Only ")])),_:1,__:[5]}),a(u,{key:"completed"},{default:h(()=>n[6]||(n[6]=[m("span",{class:"status-dot completed"},null,-1),k(" Completed Only ")])),_:1,__:[6]}),a(u,{key:"failed"},{default:h(()=>n[7]||(n[7]=[m("span",{class:"status-dot failed"},null,-1),k(" Failed Only ")])),_:1,__:[7]}),a(u,{key:"paused"},{default:h(()=>n[8]||(n[8]=[m("span",{class:"status-dot paused"},null,-1),k(" Paused Only ")])),_:1,__:[8]}),a(u,{key:"draft"},{default:h(()=>n[9]||(n[9]=[m("span",{class:"status-dot draft"},null,-1),k(" Draft Only ")])),_:1,__:[9]})]),_:1})]),default:h(()=>[a(r,{type:"text",size:"small"},{icon:h(()=>[a(g(Oe))]),_:1})]),_:1})]))]),e.collapsed?f("",!0):(w(),p("div",xt,[a(L,{placeholder:"Filter trials...",size:"small",value:o.value,"onUpdate:value":n[1]||(n[1]=e=>o.value=e),onKeydown:$,ref_key:"searchInputRef",ref:s},{prefix:h(()=>[a(g(X))]),_:1},8,["value"])])),e.collapsed?f("",!0):(w(),p("div",St,[(w(!0),p(b,null,_(A.value,e=>(w(),p("div",{key:e.key,class:x(["status-tab",{active:I.value===e.key}]),onClick:a=>{return n=e.key,void t.setStatusFilter(n);var n}},[m("span",It,S(e.icon),1),m("span",Ot,S(e.label),1),m("span",Tt,S(e.count),1)],10,Ct))),128))])),m("div",{class:"trial-list",ref_key:"trialListRef",ref:i},[O.value.running.length>0?(w(),p("div",Pt,[n[14]||(n[14]=m("div",{class:"section-header"},"RUNNING",-1)),(w(!0),p(b,null,_(O.value.running,(t,l)=>(w(),p("div",{key:t.id,class:x(["list-item running-item",{active:C.value===t.id,"keyboard-focus":P.value===l}]),onClick:e=>M(t.id),"data-index":l},[n[13]||(n[13]=m("div",{class:"item-indicator running"},null,-1)),e.collapsed?(w(),p("div",At,[a(c,{title:`${t.name} - ${t.progress.completed}/${t.progress.total} tasks`},{default:h(()=>[m("div",Mt,[m("span",Rt,S(t.progress.completed),1),a(U,{type:"circle",percent:R(t),width:20,showInfo:!1,strokeWidth:3},null,8,["percent"])])]),_:2},1032,["title"])])):(w(),p("div",Nt,[m("div",$t,[m("span",Ft,S(t.name),1),a(q,{color:"blue",size:"small"},{default:h(()=>n[10]||(n[10]=[k("RUNNING")])),_:1,__:[10]}),a(U,{percent:R(t),showInfo:!1,strokeWidth:3,style:{width:"80px"}},null,8,["percent"])]),m("div",jt,[m("span",Dt,S(t.progress.completed)+"/"+S(t.progress.total)+" tasks",1),n[11]||(n[11]=m("span",{class:"meta-separator"},"•",-1)),m("span",Lt,S(N(t.completed||t.started||t.created)),1),n[12]||(n[12]=m("span",{class:"meta-separator"},"•",-1)),m("span",Ut,"$"+S((t.estimatedCost||0).toFixed(2)),1)])]))],10,Et))),128))])):f("",!0),O.value.recent.length>0?(w(),p("div",qt,[n[17]||(n[17]=m("div",{class:"section-header"},"RECENT",-1)),(w(!0),p(b,null,_(O.value.recent,(t,l)=>{return w(),p("div",{key:t.id,class:x(["list-item",{active:C.value===t.id,"keyboard-focus":P.value===O.value.running.length+l}]),onClick:e=>M(t.id),"data-index":O.value.running.length+l},[m("div",{class:x(["item-indicator",t.status])},null,2),e.collapsed?(w(),p("div",Vt,[a(c,{title:`${t.name} - ${t.status} - ${t.progress.completed} tasks`},{default:h(()=>[m("div",Bt,[m("span",Ht,S(t.progress.completed),1)])]),_:2},1032,["title"])])):(w(),p("div",Kt,[m("div",Gt,[m("span",Wt,S(t.name),1),a(q,{color:(r=t.status,{running:"blue",completed:"green",failed:"red",paused:"orange",draft:"default"}[r]||"default"),size:"small"},{default:h(()=>[k(S(t.status),1)]),_:2},1032,["color"])]),m("div",Yt,[m("span",Jt,S(t.progress.completed)+" tasks",1),n[15]||(n[15]=m("span",{class:"meta-separator"},"•",-1)),m("span",Qt,S(N(t.completed||t.started||t.created)),1),n[16]||(n[16]=m("span",{class:"meta-separator"},"•",-1)),m("span",Xt,"$"+S((t.estimatedCost||0).toFixed(2)),1)])]))],10,zt);var r}),128))])):f("",!0),0===T.value?(w(),p("div",Zt,[a(g(Ze),{style:{"font-size":"32px",color:"#ccc"}}),n[19]||(n[19]=m("p",null,"No trials found",-1)),a(r,{type:"primary",onClick:n[2]||(n[2]=t=>e.$emit("create-trial"))},{default:h(()=>n[18]||(n[18]=[k(" Create New Trial ")])),_:1,__:[18]})])):f("",!0)],512)],8,ht)}}}),[["__scopeId","data-v-cba73fd3"]]);"undefined"!=typeof WorkerGlobalScope&&(globalThis,WorkerGlobalScope);const ta=()=>{};function aa(e,t=200,a=!1,n=!0,l=!1){return function(e,t){return function(...a){return new Promise((n,l)=>{Promise.resolve(e(()=>t.apply(this,a),{fn:t,thisArg:this,args:a})).then(n).catch(l)})}}(function(...e){let t,a,n,l,r,s,i=0,o=!0,c=ta;C(e[0])||"object"!=typeof e[0]?[n,l=!0,r=!0,s=!1]=e:({delay:n,trailing:l=!0,leading:r=!0,rejectOnCancel:s=!1}=e[0]);const u=()=>{t&&(clearTimeout(t),t=void 0,c(),c=ta)};return e=>{const d=I(n),p=Date.now()-i,m=()=>a=e();return u(),d<=0?(i=Date.now(),m()):(p>d&&(r||!o)?(i=Date.now(),m()):l&&(a=new Promise((e,a)=>{c=s?a:e,t=setTimeout(()=>{i=Date.now(),o=!0,e(m()),u()},Math.max(0,d-p))})),r||t||(t=setTimeout(()=>o=!0,d)),o=!1,a)}}(t,a,n,l),e)}const na={class:"virtual-table"},la={class:"virtual-table"},ra=["data-row-index","data-row-id","onClick"],sa=Z(o({__name:"VirtualTable",props:{columns:{},dataSource:{},rowHeight:{default:48},rowKey:{type:[String,Function],default:"id"},overscan:{default:5},showHeader:{type:Boolean,default:!0},getRowClass:{},minHeight:{default:"300px"},maxHeight:{default:"calc(100vh - 250px)"}},emits:["row-click"],setup(e,{expose:t,emit:a}){P(e=>({"78c5e07f":e.minHeight,"4abaca11":e.maxHeight}));const n=e,s=a,i=l(),o=l(),v=l(0),y=l(0),h=l(0);let C=null;const I=r(()=>n.dataSource.length*n.rowHeight),E=r(()=>{const e=Math.floor(v.value/n.rowHeight),t=Math.ceil((v.value+y.value)/n.rowHeight);return{start:Math.max(0,e-n.overscan),end:Math.min(n.dataSource.length,t+n.overscan)}}),A=r(()=>E.value.start),M=r(()=>n.dataSource.slice(E.value.start,E.value.end)),R=r(()=>A.value*n.rowHeight);function N(e){return"function"==typeof n.rowKey?n.rowKey(e):e[n.rowKey]}function $(e,t){const a=t.key.split(".");let n=e;for(const l of a){if(!n||"object"!=typeof n)return;n=n[l]}return n}function F(e){const t={};return e.width&&(t.width="number"==typeof e.width?`${e.width}px`:e.width),e.align&&(t.textAlign=e.align),t}const j=aa(e=>{null!==C&&cancelAnimationFrame(C),C=requestAnimationFrame(()=>{const t=e.target;v.value=t.scrollTop,C=null})},16);let D=null;function L(){if(i.value){const e=i.value.querySelector(".virtual-content");y.value=e?e.clientHeight:i.value.clientHeight}o.value&&(h.value=o.value.offsetHeight)}function U(){if(i.value){const e=i.value.querySelector(".virtual-content");e&&(e.scrollTop=0)}}return u(()=>{L(),i.value&&(D=new ResizeObserver(()=>{L()}),D.observe(i.value))}),d(()=>{D&&D.disconnect(),null!==C&&cancelAnimationFrame(C)}),c(()=>n.dataSource.length,()=>{v.value>I.value&&U()}),t({scrollToRow:function(e){if(i.value){const t=i.value.querySelector(".virtual-content");if(t){const a=e*n.rowHeight;t.scrollTop=a}}},scrollToTop:U}),(e,t)=>(w(),p("div",{class:"virtual-table-container",ref_key:"containerRef",ref:i,"data-testid":"virtual-table",role:"table","aria-label":"Data table with virtual scrolling"},[e.showHeader?(w(),p("div",{key:0,class:"virtual-header",ref_key:"headerRef",ref:o},[m("table",na,[m("thead",null,[m("tr",null,[(w(!0),p(b,null,_(e.columns,e=>(w(),p("th",{key:e.key,style:O(F(e)),class:x(e.className)},S(e.title),7))),128))])])])],512)):f("",!0),m("div",{class:"virtual-content",style:O({height:`calc(100% - ${h.value}px)`}),onScrollPassive:t[0]||(t[0]=(...e)=>g(j)&&g(j)(...e))},[m("div",{class:"virtual-spacer",style:O({height:I.value+"px"})},[m("div",{class:"virtual-viewport",style:O({transform:`translateY(${R.value}px)`})},[m("table",la,[m("tbody",null,[(w(!0),p(b,null,_(M.value,(t,a)=>(w(),p("tr",{key:N(t),"data-row-index":A.value+a,"data-row-id":N(t),class:x(e.getRowClass?e.getRowClass(t):""),"data-testid":"table-row",role:"row",onClick:e=>function(e){s("row-click",e)}(t)},[(w(!0),p(b,null,_(e.columns,a=>(w(),p("td",{key:a.key,style:O(F(a)),class:x(a.className)},[T(e.$slots,"cell",{column:a,record:t,value:$(t,a)},()=>[k(S($(t,a)),1)],!0)],6))),128))],10,ra))),128))])])],4)],4)],36)],512))}}),[["__scopeId","data-v-abacd51a"]]);const ia=new class{constructor(){t(this,"metrics",[]),t(this,"recording",!1),t(this,"recordingStartTime",null),t(this,"overlayElement",null),t(this,"rafId",null),t(this,"lastFrameTime",0),t(this,"fpsHistory",[]),t(this,"componentRenderCounts",{}),t(this,"measurementMap",new Map)}calculateFPS(){const e=performance.now();if(0===this.lastFrameTime)return this.lastFrameTime=e,60;const t=1e3/(e-this.lastFrameTime);return this.lastFrameTime=e,this.fpsHistory.push(t),this.fpsHistory.length>60&&this.fpsHistory.shift(),this.fpsHistory.reduce((e,t)=>e+t,0)/this.fpsHistory.length}getMemoryUsage(){if("memory"in performance&&performance.memory){return performance.memory.usedJSHeapSize/1048576}return 0}getDOMNodeCount(){return document.querySelectorAll("*").length}start(e){this.measurementMap.set(e,performance.now())}end(e){const t=this.measurementMap.get(e);if(!t)return console.warn(`No start time found for label: ${e}`),0;const a=performance.now()-t;return this.measurementMap.delete(e),a}measure(e,t){const a=performance.now(),n=t(),l=performance.now()-a;if(this.recording){this.getCurrentMetrics().renderTime=l}return n}trackComponentRender(e){this.componentRenderCounts[e]=(this.componentRenderCounts[e]||0)+1}getCurrentMetrics(){return{fps:this.calculateFPS(),renderTime:0,updateTime:0,memoryUsage:this.getMemoryUsage(),domNodes:this.getDOMNodeCount(),componentRenders:{...this.componentRenderCounts}}}showOverlay(e){e&&!this.overlayElement?(this.createOverlay(),this.startOverlayUpdate()):!e&&this.overlayElement&&this.destroyOverlay()}createOverlay(){this.overlayElement=document.createElement("div"),this.overlayElement.id="performance-overlay",this.overlayElement.style.cssText="\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(0, 0, 0, 0.8);\n      color: #0f0;\n      font-family: monospace;\n      font-size: 12px;\n      padding: 10px;\n      border-radius: 5px;\n      z-index: 999999;\n      pointer-events: none;\n      min-width: 200px;\n    ",document.body.appendChild(this.overlayElement)}destroyOverlay(){this.overlayElement&&(document.body.removeChild(this.overlayElement),this.overlayElement=null),null!==this.rafId&&(cancelAnimationFrame(this.rafId),this.rafId=null)}updateOverlay(){if(!this.overlayElement)return;const e=this.getCurrentMetrics(),t=e.memoryUsage>100?"#f00":e.memoryUsage>50?"#ff0":"#0f0",a=e.fps<30?"#f00":e.fps<55?"#ff0":"#0f0",n=e.domNodes>5e3?"#f00":e.domNodes>2e3?"#ff0":"#0f0";this.overlayElement.innerHTML=`\n      <div style="margin-bottom: 5px; font-weight: bold;">Performance Monitor</div>\n      <div>FPS: <span style="color: ${a}">${e.fps.toFixed(1)}</span></div>\n      <div>Memory: <span style="color: ${t}">${e.memoryUsage.toFixed(1)} MB</span></div>\n      <div>DOM Nodes: <span style="color: ${n}">${e.domNodes}</span></div>\n      ${e.renderTime>0?`<div>Render: ${e.renderTime.toFixed(1)}ms</div>`:""}\n      ${e.updateTime>0?`<div>Update: ${e.updateTime.toFixed(1)}ms</div>`:""}\n    `}startOverlayUpdate(){const e=()=>{this.updateOverlay(),this.rafId=requestAnimationFrame(e)};e()}startRecording(){this.recording=!0,this.recordingStartTime=new Date,this.metrics=[],this.componentRenderCounts={};const e=setInterval(()=>{this.recording?this.metrics.push(this.getCurrentMetrics()):clearInterval(e)},100)}stopRecording(){if(!this.recording||!this.recordingStartTime)throw new Error("No recording in progress");this.recording=!1;const e=new Date,t={avgFps:this.metrics.reduce((e,t)=>e+t.fps,0)/this.metrics.length||0,avgRenderTime:this.metrics.reduce((e,t)=>e+t.renderTime,0)/this.metrics.length||0,avgUpdateTime:this.metrics.reduce((e,t)=>e+t.updateTime,0)/this.metrics.length||0,peakMemoryUsage:Math.max(...this.metrics.map(e=>e.memoryUsage)),totalRenders:Object.values(this.componentRenderCounts).reduce((e,t)=>e+t,0)},a={startTime:this.recordingStartTime,endTime:e,duration:e.getTime()-this.recordingStartTime.getTime(),metrics:this.metrics,summary:t};return this.recordingStartTime=null,this.metrics=[],a}exportReport(e){const t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download=`performance-report-${e.startTime.toISOString()}.json`,n.click(),URL.revokeObjectURL(a)}logWarning(e,t){console.warn(`[Performance Warning] ${e}`,t)}checkPerformance(){const e=this.getCurrentMetrics();e.fps<30&&this.logWarning(`Low FPS detected: ${e.fps.toFixed(1)}`,{fps:e.fps}),e.memoryUsage>100&&this.logWarning(`High memory usage: ${e.memoryUsage.toFixed(1)} MB`,{memoryUsage:e.memoryUsage}),e.domNodes>5e3&&this.logWarning(`Excessive DOM nodes: ${e.domNodes}`,{domNodes:e.domNodes})}},oa=Z(o({__name:"VirtualDataTable",props:{columns:{},dataSource:{},loading:{type:Boolean,default:!1},rowKey:{},rowHeight:{type:[Number,Function],default:60},overscan:{default:10},pagination:{type:[Boolean,Object],default:!1},scroll:{},size:{default:"small"},customRow:{},onRow:{},rowClassName:{},className:{},style:{},forceVirtual:{type:Boolean,default:!1}},emits:["row-click","cell-click"],setup(e,{emit:t}){const a=e,n=t,l=r(()=>!!a.forceVirtual||a.dataSource.length>100&&(ia.trackComponentRender("VirtualDataTable"),!0)),s=r(()=>a.columns.map(e=>({key:e.key||("string"==typeof e.dataIndex?e.dataIndex:e.dataIndex?.[0])||"",title:e.title,width:e.width,align:e.align,className:e.className}))),i=r(()=>{if("function"==typeof a.rowHeight)return a.rowHeight;return{small:48,middle:60,large:72}[a.size||"small"]||a.rowHeight});function o(e){if(n("row-click",e),a.customRow){const t=a.customRow(e);t&&"object"==typeof t&&"onClick"in t&&t.onClick()}}function c(e){if("function"==typeof a.rowClassName){const t=a.dataSource.indexOf(e);return a.rowClassName(e,t)}return a.rowClassName||""}const u=r(()=>{const e={};return a.customRow&&(e.customRow=a.customRow),a.onRow&&(e.onRow=a.onRow),a.rowClassName&&(e.rowClassName=a.rowClassName),e});return(e,t)=>(w(),p("div",{class:x(["virtual-data-table",{"virtual-enabled":l.value}])},[l.value?(w(),v(sa,{key:0,columns:s.value,"data-source":e.dataSource,"row-height":"function"==typeof i.value?void 0:i.value,"row-key":e.rowKey,overscan:e.overscan,"show-header":!0,"get-row-class":c,"min-height":e.scroll?.y?`${e.scroll.y}px`:"400px","max-height":e.scroll?.y?`${e.scroll.y}px`:"calc(100vh - 300px)",onRowClick:o},{cell:h(({column:t,record:a,value:n})=>[T(e.$slots,"bodyCell",{column:e.columns.find(e=>e.key===t.key||e.dataIndex===t.key),record:a,text:n,value:n,index:e.dataSource.indexOf(a)},()=>[k(S(n),1)],!0)]),_:3},8,["columns","data-source","row-height","row-key","overscan","min-height","max-height"])):(w(),v(g(ee),E({key:1},u.value,{columns:e.columns,"data-source":e.dataSource,loading:e.loading,pagination:e.pagination,scroll:e.scroll,size:e.size,"row-key":e.rowKey,"custom-row":e.customRow,"row-class-name":e.rowClassName,class:e.className,style:e.style}),{bodyCell:h(({column:t,record:a,text:n,value:l,index:r})=>[T(e.$slots,"bodyCell",{column:t,record:a,text:n,value:l,index:r},void 0,!0)]),_:3},16,["columns","data-source","loading","pagination","scroll","size","row-key","custom-row","row-class-name","class","style"]))],2))}}),[["__scopeId","data-v-2264c400"]]),ca={class:"api-call-modal"},ua={class:"modal-header"},da={class:"modal-content"},pa={class:"section"},ma={class:"info-grid"},fa={class:"info-item"},va={class:"call-id"},ga={class:"info-item"},ya={class:"info-item"},ha={class:"info-item"},ba={key:0,class:"info-item"},_a={key:1,class:"info-item"},wa={key:2,class:"info-item"},ka={class:"section"},xa={class:"variables-detail"},Sa={class:"variable-value"},Ca={key:0,class:"attributes-section"},Ia={class:"attribute-items"},Oa={class:"section"},Ta={class:"prompt-display"},Pa={key:0,class:"section"},Ea={key:0,class:"response-info"},Aa={class:"info-grid"},Ma={class:"info-item"},Ra={class:"info-item"},Na={key:1,class:"result-content"},$a={key:0,class:"error-result"},Fa={class:"error-message"},ja={key:0,class:"error-raw"},Da={class:"error-response"},La={key:1,class:"content-result"},Ua={class:"content-display"},qa={class:"section"},za={class:"raw-data"},Va={key:1,class:"section"},Ba={class:"raw-data"},Ha={class:"modal-footer"},Ka=Z(o({__name:"APICallDetailModal",props:{apiCall:{},trial:{}},emits:["close"],setup(e){const t=e,n=r(()=>{if(!t.apiCall.request)return"No request data";let e;t.trial&&t.trial.configurationSnapshots[t.apiCall.configurationIndex]&&(e=t.trial.configurationSnapshots[t.apiCall.configurationIndex].provider);const a=Te(t.apiCall.request,e);return JSON.stringify(a,null,2)});function l(){return t.trial&&t.trial.configurationSnapshots[t.apiCall.configurationIndex]&&t.trial.configurationSnapshots[t.apiCall.configurationIndex].name||`Configuration ${t.apiCall.configurationIndex+1}`}function s(e){const t="string"==typeof e?new Date(e):e;return isNaN(t.getTime())?"Invalid date":t.toLocaleString()}async function i(){const e={id:t.apiCall.id,status:t.apiCall.status,configuration:l(),variables:t.apiCall.variables,variableAttributes:t.apiCall.variableAttributes,prompt:t.apiCall.prompt,request:JSON.parse(n.value),response:t.apiCall.response,result:t.apiCall.result,created:t.apiCall.created,completed:t.apiCall.completed},a=JSON.stringify(e,null,2);try{if(navigator.clipboard&&navigator.clipboard.writeText)return await navigator.clipboard.writeText(a),void te.success("Details copied to clipboard!");const e=document.createElement("textarea");e.value=a,e.style.position="fixed",e.style.left="-999999px",e.style.top="-999999px",document.body.appendChild(e),e.focus(),e.select();const t=document.execCommand("copy");if(document.body.removeChild(e),!t)throw new Error("execCommand failed");te.success("Details copied to clipboard!")}catch(r){W.error("Failed to copy to clipboard",r),prompt("Copy this text manually:",a)}}return(e,t)=>{const r=y("a-button");return w(),p("div",{class:"modal-overlay",onClick:t[2]||(t[2]=A(t=>e.$emit("close"),["self"]))},[m("div",ca,[m("div",ua,[t[3]||(t[3]=m("h2",null,"API Call Details",-1)),m("button",{class:"close-btn",onClick:t[0]||(t[0]=t=>e.$emit("close")),"data-testid":"btn-close-api-call-modal","aria-label":"Close API call details"},"×")]),m("div",da,[m("div",pa,[t[11]||(t[11]=m("h3",null,"Overview",-1)),m("div",ma,[m("div",fa,[t[4]||(t[4]=m("label",null,"Call ID:",-1)),m("span",va,S(e.apiCall.id),1)]),m("div",ga,[t[5]||(t[5]=m("label",null,"Status:",-1)),m("span",{class:x(["status-badge",e.apiCall.status])},S(e.apiCall.status),3)]),m("div",ya,[t[6]||(t[6]=m("label",null,"Configuration:",-1)),m("span",null,S(l()),1)]),m("div",ha,[t[7]||(t[7]=m("label",null,"Created:",-1)),m("span",null,S(s(e.apiCall.created)),1)]),e.apiCall.completed?(w(),p("div",ba,[t[8]||(t[8]=m("label",null,"Completed:",-1)),m("span",null,S(s(e.apiCall.completed)),1)])):f("",!0),e.apiCall.completed?(w(),p("div",_a,[t[9]||(t[9]=m("label",null,"Duration:",-1)),m("span",null,S((o=e.apiCall.completed.getTime()-e.apiCall.created.getTime(),o<1e3?`${o}ms`:`${(o/1e3).toFixed(1)}s`)),1)])):f("",!0),e.apiCall.response?.latencyMs?(w(),p("div",wa,[t[10]||(t[10]=m("label",null,"API Latency:",-1)),m("span",null,S(e.apiCall.response.latencyMs)+"ms",1)])):f("",!0)])]),m("div",ka,[t[13]||(t[13]=m("h3",null,"Variables",-1)),m("div",xa,[(w(!0),p(b,null,_(Object.entries(e.apiCall.variables),([e,t])=>(w(),p("div",{key:e,class:"variable-item"},[m("label",null,S(e)+":",1),m("span",Sa,S(t),1)]))),128))]),e.apiCall.variableAttributes&&Object.keys(e.apiCall.variableAttributes).length>0?(w(),p("div",Ca,[t[12]||(t[12]=m("h4",null,"Variable Attributes",-1)),(w(!0),p(b,null,_(Object.entries(e.apiCall.variableAttributes),([e,t])=>(w(),p("div",{key:e,class:"attribute-group"},[m("h5",null,S(e),1),m("div",Ia,[(w(!0),p(b,null,_(Object.entries(t),([e,t])=>(w(),p("div",{key:e,class:"attribute-item"},[m("label",null,S(e)+":",1),m("span",null,S(t),1)]))),128))])]))),128))])):f("",!0)]),m("div",Oa,[t[14]||(t[14]=m("h3",null,"Resolved Prompt",-1)),m("div",Ta,S(e.apiCall.prompt),1)]),e.apiCall.response||e.apiCall.result?(w(),p("div",Pa,[t[20]||(t[20]=m("h3",null,"Response",-1)),e.apiCall.response?(w(),p("div",Ea,[m("div",Aa,[m("div",Ma,[t[15]||(t[15]=m("label",null,"HTTP Status:",-1)),m("span",null,S(e.apiCall.response.status),1)]),m("div",Ra,[t[16]||(t[16]=m("label",null,"Latency:",-1)),m("span",null,S(e.apiCall.response.latencyMs)+"ms",1)])])])):f("",!0),e.apiCall.result?(w(),p("div",Na,[!1===e.apiCall.result.success?(w(),p("div",$a,[t[18]||(t[18]=m("h4",null,"Error",-1)),m("div",Fa,S(e.apiCall.result.error),1),e.apiCall.response?(w(),p("div",ja,[t[17]||(t[17]=m("h5",null,"Raw Response:",-1)),m("pre",Da,S(JSON.stringify(e.apiCall.response,null,2)),1)])):f("",!0)])):f("",!0),e.apiCall.result.content?(w(),p("div",La,[t[19]||(t[19]=m("h4",null,"Content",-1)),m("div",Ua,S(e.apiCall.result.content),1)])):f("",!0)])):f("",!0)])):f("",!0),m("div",qa,[t[21]||(t[21]=m("h3",null,"Raw Request",-1)),m("pre",za,S(n.value),1)]),e.apiCall.response?(w(),p("div",Va,[t[22]||(t[22]=m("h3",null,"Raw Response",-1)),m("pre",Ba,S(JSON.stringify(e.apiCall.response,null,2)),1)])):f("",!0)]),m("div",Ha,[a(r,{onClick:t[1]||(t[1]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-close-modal-footer","aria-label":"Close modal"},{default:h(()=>t[23]||(t[23]=[k(" Close ")])),_:1,__:[23]}),a(r,{type:"primary",onClick:i,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-copy-api-call-details","aria-label":"Copy API call details to clipboard"},{default:h(()=>t[24]||(t[24]=[k(" Copy Details ")])),_:1,__:[24]})])])]);var o}}}),[["__scopeId","data-v-d0b393dd"]]),Ga={VIRTUAL_SCROLLING:{key:"VIRTUAL_SCROLLING",name:"Virtual Scrolling",description:"Enable virtual scrolling for large data tables",defaultValue:!1,experimental:!0},WEB_WORKERS:{key:"WEB_WORKERS",name:"Web Workers",description:"Offload expensive calculations to web workers",defaultValue:!1,experimental:!0},OPTIMIZED_SORTING:{key:"OPTIMIZED_SORTING",name:"Optimized Sorting",description:"Use optimized sorting algorithms with memoization",defaultValue:!1},SHALLOW_REACTIVITY:{key:"SHALLOW_REACTIVITY",name:"Shallow Reactivity",description:"Use shallowRef for large arrays to reduce reactivity overhead",defaultValue:!1},DEBOUNCED_UPDATES:{key:"DEBOUNCED_UPDATES",name:"Debounced Updates",description:"Batch and debounce rapid data updates",defaultValue:!1},DIFFERENTIAL_UPDATES:{key:"DIFFERENTIAL_UPDATES",name:"Differential Updates",description:"Only update changed data instead of full replacement",defaultValue:!1,experimental:!0,dependencies:["DEBOUNCED_UPDATES"]},DATA_WINDOWING:{key:"DATA_WINDOWING",name:"Data Windowing",description:"Keep only visible data in memory with progressive loading",defaultValue:!1,experimental:!0,dependencies:["VIRTUAL_SCROLLING"]},PERFORMANCE_MONITORING:{key:"PERFORMANCE_MONITORING",name:"Performance Monitoring",description:"Enable performance monitoring overlay and metrics",defaultValue:!1}};const Wa=new class{constructor(){t(this,"flags"),t(this,"overrides",{});const e={};Object.values(Ga).forEach(t=>{e[t.key]=t.defaultValue}),this.flags=l(e),this.loadOverrides(),this.applyURLParams()}isEnabled(e){if(e in this.overrides)return this.overrides[e];if(!(e in Ga))return W.warn(`Unknown feature flag: ${e}`),!1;const t=Ga[e];if(t.dependencies)for(const a of t.dependencies)if(!this.isEnabled(a))return!1;return this.flags.value[e]??!1}useFlag(e){return r(()=>this.isEnabled(e))}enable(e,t=!0){e in Ga?(this.flags.value[e]=!0,this.overrides[e]=!0,t&&this.saveOverrides(),W.info(`Feature enabled: ${e}`)):W.warn(`Unknown feature flag: ${e}`)}disable(e,t=!0){e in Ga?(this.flags.value[e]=!1,this.overrides[e]=!1,t&&this.saveOverrides(),W.info(`Feature disabled: ${e}`)):W.warn(`Unknown feature flag: ${e}`)}toggle(e,t=!0){this.isEnabled(e)?this.disable(e,t):this.enable(e,t)}resetToDefaults(){Object.values(Ga).forEach(e=>{this.flags.value[e.key]=e.defaultValue}),this.overrides={},this.saveOverrides(),W.info("Feature flags reset to defaults")}enableExperimental(){Object.values(Ga).forEach(e=>{e.experimental&&this.enable(e.key,!1)}),this.saveOverrides(),W.info("All experimental features enabled")}getState(){const e={};return Object.keys(Ga).forEach(t=>{e[t]=this.isEnabled(t)}),e}getFlagInfo(e){return Ga[e]}getAllFlags(){return Object.values(Ga)}loadOverrides(){try{const e=localStorage.getItem("auditomatic_feature_flags");e&&(this.overrides=JSON.parse(e),Object.entries(this.overrides).forEach(([e,t])=>{e in this.flags.value&&(this.flags.value[e]=t)}),W.info("Loaded feature flag overrides",this.overrides))}catch(e){W.error("Failed to load feature flag overrides",e)}}saveOverrides(){try{localStorage.setItem("auditomatic_feature_flags",JSON.stringify(this.overrides))}catch(e){W.error("Failed to save feature flag overrides",e)}}applyURLParams(){new URLSearchParams(window.location.search).forEach((e,t)=>{if(t.startsWith("feature_")){const a=t.substring(8).toUpperCase(),n="true"===e||"1"===e;a in Ga&&(this.overrides[a]=n,this.flags.value[a]=n,W.info(`Feature flag set from URL: ${a} = ${n}`))}})}enablePerformanceOptimizations(e="basic"){const t=["VIRTUAL_SCROLLING","WEB_WORKERS","DIFFERENTIAL_UPDATES"],a=["DATA_WINDOWING"];"basic"!==e&&"advanced"!==e&&"all"!==e||["OPTIMIZED_SORTING","SHALLOW_REACTIVITY","DEBOUNCED_UPDATES","PERFORMANCE_MONITORING"].forEach(e=>this.enable(e,!1)),"advanced"!==e&&"all"!==e||t.forEach(e=>this.enable(e,!1)),"all"===e&&a.forEach(e=>this.enable(e,!1)),this.saveOverrides(),W.info(`Performance optimizations enabled: ${e}`)}},Ya=new Map;function Ja(e,t={}){const a=l(0),n=Wa.isEnabled("OPTIMIZED_SORTING"),s=r(()=>{a.value;const l=e.value;if(!l||0===l.length)return[];const r=t.compareFunction||((e,t)=>e<t?-1:e>t?1:0);t.trackPerformance&&ia.start("optimizedSort");try{const e=t.cacheKey||(n?function(e,t){const a=e[0],n=e[e.length-1],l=e[Math.floor(e.length/2)];return`${e.length}-${JSON.stringify(a)?.slice(0,20)}-${JSON.stringify(l)?.slice(0,20)}-${JSON.stringify(n)?.slice(0,20)}-${t?.toString().slice(0,50)}`}(l,r):null);if(n&&e&&Ya.has(e)){if(t.trackPerformance){ia.end("optimizedSort")}return Ya.get(e)}const a=n?function(e,t,a){return e.length<32?function(e,t,a){const n=a?e:[...e];for(let l=1;l<n.length;l++){const e=n[l];let a=l-1;for(;a>=0&&t(n[a],e)>0;)n[a+1]=n[a],a--;n[a+1]=e}return n}(e,t,a):function(e,t){for(let a=1;a<e.length;a++)if(t(e[a-1],e[a])>0)return!1;return!0}(e,t)?a?e:[...e]:(a?e:[...e]).sort(t)}(l,r,!1):[...l].sort(r);if(n&&e&&(Ya.set(e,a),function(){if(Ya.size>100){const e=Math.floor(Ya.size/2),t=Array.from(Ya.keys());for(let a=0;a<e;a++)Ya.delete(t[a])}}()),t.trackPerformance){const e=ia.end("optimizedSort");e>16&&ia.logWarning(`Slow sort: ${e}ms for ${l.length} items`)}return a}catch(s){return t.trackPerformance&&ia.end("optimizedSort"),console.error("Sort error:",s),[...l]}});return{sorted:s,resort:function(){a.value++},clearCache:function(){if(t.cacheKey)Ya.delete(t.cacheKey);else if(e.value){const t=`${e.value.length}-`;Array.from(Ya.keys()).filter(e=>e.startsWith(t)).forEach(e=>Ya.delete(e))}a.value++}}}const Qa={class:"results-table-container"},Xa={class:"filters-bar"},Za={key:0,class:"queue-position"},en={key:1},tn={key:0,class:"repeat-index"},an={key:1,class:"text-secondary"},nn={key:3,class:"variables-compact"},ln={key:0,class:"text-secondary"},rn={key:1,class:"text-secondary"},sn={key:2,class:"text-error"},on={key:3,class:"response-content"},cn={key:4,class:"text-secondary"},un={key:0,class:"length-value"},dn={key:1,class:"text-secondary"},pn={key:0},mn={key:1,class:"text-secondary"},fn=Z(o({__name:"TrialResultsTable",props:{trial:{},apiCalls:{},loading:{type:Boolean}},setup(e){const t=e,n=l(""),s=l(""),i=l(""),o=function(e,t=300){const a=l(e.value);let n;const r=c(e,e=>{clearTimeout(n),n=window.setTimeout(()=>{a.value=e},t)});return M()&&d(()=>{clearTimeout(n),r()}),a}(i,300),u=l(!1),x=l(null),C=r(()=>{const e=t.trial.repeatConfig?.callsPerPrompt?96:80;return Wa.isEnabled("SHALLOW_REACTIVITY")?e:e+16}),I=r(()=>{const e=[{title:"Status",key:"status",dataIndex:"status",width:120,fixed:"left"},{title:"Configuration",key:"config",dataIndex:"configurationIndex",width:200}];return ae(t.trial)&&e.push({title:"Repeat",key:"repeat",dataIndex:"repeatIndex",width:100}),[...e,{title:"Variables",key:"variables",dataIndex:"variables",width:500},{title:"Response",key:"response",dataIndex:"result",ellipsis:!0,minWidth:400},{title:"Length",key:"length",dataIndex:"result",width:120,align:"right"},{title:"Latency",key:"latency",dataIndex:"response",width:120,align:"right"}]}),O=R([]),T=R([]);N(()=>{T.value=t.apiCalls||[]});const{sorted:P}=function(e,t={}){const a=e=>{switch(e){case"pending":return 1;case"running":return 2;case"completed":case"failed":return 3;default:return 4}};return Ja(e,{...t,compareFunction:(e,t)=>{const n=a(e.status),l=a(t.status);if(n!==l)return n-l;const r=e.created instanceof Date?e.created.getTime():new Date(e.created).getTime(),s=t.created instanceof Date?t.created.getTime():new Date(t.created).getTime();return"pending"===e.status?r-s:s-r},cacheKey:`apiCall-${e.value.length}`})}(T,{trackPerformance:Wa.isEnabled("PERFORMANCE_MONITORING")}),E=r(()=>Wa.isEnabled("OPTIMIZED_SORTING")?P.value:T.value);N(()=>{Wa.isEnabled("PERFORMANCE_MONITORING")&&ia.start("filterApiCalls");let e=E.value;if(n.value&&(e=e.filter(e=>e.status===n.value)),""!==s.value&&(e=e.filter(e=>e.configurationIndex===Number(s.value))),o.value){const t=o.value.toLowerCase();e=e.filter(e=>{if(JSON.stringify(e.variables).toLowerCase().includes(t))return!0;if(e.result?.content){if(String(e.result.content).toLowerCase().includes(t))return!0}return!1})}if(O.value=e,Wa.isEnabled("PERFORMANCE_MONITORING")){const e=ia.end("filterApiCalls");e>16&&ia.logWarning(`Slow filter operation: ${e}ms for ${t.apiCalls.length} items`)}});const A=r(()=>O.value);function F(e){const a=t.trial.configurationSnapshots[e];return a?.name||`Config ${e+1}`}return(e,t)=>{const l=y("a-select-option"),r=y("a-select"),o=y("a-input-search"),c=y("a-space"),d=y("a-button"),O=y("a-tag"),T=y("a-tooltip");return w(),p("div",Qa,[m("div",Xa,[a(c,{size:"large",style:{flex:"1"}},{default:h(()=>[a(r,{value:n.value,"onUpdate:value":t[0]||(t[0]=e=>n.value=e),placeholder:"All Statuses",style:{width:"200px"},size:"large","allow-clear":"","data-testid":"select-status-filter","aria-label":"Filter results by status"},{default:h(()=>[a(l,{value:""},{default:h(()=>t[6]||(t[6]=[k("All Statuses")])),_:1,__:[6]}),a(l,{value:"completed"},{default:h(()=>t[7]||(t[7]=[k("Completed")])),_:1,__:[7]}),a(l,{value:"failed"},{default:h(()=>t[8]||(t[8]=[k("Failed")])),_:1,__:[8]}),a(l,{value:"running"},{default:h(()=>t[9]||(t[9]=[k("Running")])),_:1,__:[9]}),a(l,{value:"pending"},{default:h(()=>t[10]||(t[10]=[k("Pending")])),_:1,__:[10]})]),_:1},8,["value"]),a(r,{value:s.value,"onUpdate:value":t[1]||(t[1]=e=>s.value=e),placeholder:"All Configurations",style:{width:"250px"},size:"large","allow-clear":"","data-testid":"select-config-filter","aria-label":"Filter results by configuration"},{default:h(()=>[a(l,{value:""},{default:h(()=>t[11]||(t[11]=[k("All Configurations")])),_:1,__:[11]}),(w(!0),p(b,null,_(e.trial.configurationSnapshots,(e,t)=>(w(),v(l,{key:`config-${e.name||t}`,value:t},{default:h(()=>[k(S(e.name||`Config ${t+1}`),1)]),_:2},1032,["value"]))),128))]),_:1},8,["value"]),a(o,{value:i.value,"onUpdate:value":t[2]||(t[2]=e=>i.value=e),placeholder:"Search variables or response...",style:{width:"400px",flex:"1"},size:"large","allow-clear":"","data-testid":"input-search-results","aria-label":"Search in variables or response content"},null,8,["value"])]),_:1}),a(d,{size:"large",type:"primary",onClick:t[3]||(t[3]=e=>u.value=!0),"data-testid":"btn-export-results-data","aria-label":"Export trial results data"},{icon:h(()=>[a(g(He))]),default:h(()=>[t[12]||(t[12]=k(" Export Data "))]),_:1,__:[12]})]),a(oa,{columns:I.value,"data-source":A.value,loading:e.loading,pagination:!1,scroll:{x:1600,y:800},size:"middle","row-key":"id",class:"results-table","custom-row":e=>({onClick:()=>{return t=e,void(x.value=t);var t},class:"clickable-row"}),"row-height":C.value,overscan:10,"force-virtual":!0},{bodyCell:h(({column:e,record:n})=>{return["status"===e.key?(w(),p(b,{key:0},[a(O,{color:(l=n.status,{completed:"success",failed:"error",running:"processing",pending:"default"}[l]||"default")},{default:h(()=>[k(S(n.status.toUpperCase()),1)]),_:2},1032,["color"]),"pending"===n.status&&n.queuePosition?(w(),p("span",Za," #"+S(n.queuePosition)+" in queue ",1)):f("",!0)],64)):f("",!0),"config"===e.key?(w(),p("code",en,S(F(n.configurationIndex)),1)):f("",!0),"repeat"===e.key?(w(),p(b,{key:2},[void 0!==n.repeatIndex?(w(),p("span",tn," #"+S(n.repeatIndex+1),1)):(w(),p("span",an,"-"))],64)):f("",!0),"variables"===e.key?(w(),p("div",nn,[(w(!0),p(b,null,_(n.variables,(e,t)=>(w(),v(T,{key:t},{title:h(()=>[k(S(t)+": "+S(e),1)]),default:h(()=>[a(O,null,{default:h(()=>{return[k(S(t)+": "+S((a=String(e),n=20,a.length<=n?a:a.substring(0,n)+"...")),1)];var a,n}),_:2},1024)]),_:2},1024))),128))])):f("",!0),"response"===e.key?(w(),p(b,{key:4},["pending"===n.status?(w(),p("div",ln," Waiting... ")):"running"===n.status?(w(),p("div",rn,[a(g(ne)),t[13]||(t[13]=k(" Processing... "))])):"failed"===n.status?(w(),p("div",sn,S(n.result?.error||"API call failed"),1)):n.result?.content?(w(),p("div",on,[m("span",null,S(String(n.result.content)),1)])):(w(),p("div",cn," No content "))],64)):f("",!0),"length"===e.key?(w(),p(b,{key:5},[n.result?.content?(w(),p("span",un,S(String(n.result.content).length),1)):(w(),p("span",dn,"-"))],64)):f("",!0),"latency"===e.key?(w(),p(b,{key:6},[n.response?.latencyMs?(w(),p("span",pn,S(n.response.latencyMs)+"ms ",1)):(w(),p("span",mn,"-"))],64)):f("",!0)];var l}),_:1},8,["columns","data-source","loading","custom-row","row-height"]),u.value?(w(),v($(()=>le(()=>Promise.resolve().then(()=>dl),void 0,import.meta.url)),{key:0,trial:e.trial,"api-calls":A.value,onClose:t[4]||(t[4]=e=>u.value=!1)},null,40,["trial","api-calls"])):f("",!0),x.value?(w(),v(Ka,{key:1,"api-call":x.value,trial:e.trial,onClose:t[5]||(t[5]=e=>x.value=null)},null,8,["api-call","trial"])):f("",!0)])}}}),[["__scopeId","data-v-97c164c2"]]),vn={class:"stats-grid"},gn={class:"stat-item"},yn={class:"stat-value"},hn={class:"stat-item"},bn={class:"stat-value"},_n={class:"stat-item"},wn={class:"stat-value"},kn={class:"stat-item"},xn={class:"stat-value"},Sn={class:"detail-sections"},Cn={class:"detail-row"},In={class:"detail-value"},On={class:"detail-value"},Tn={class:"detail-value"},Pn={key:0,class:"detail-row"},En={key:0,class:"separator"},An={key:1,class:"detail-row"},Mn={class:"detail-value error"},Rn={key:2,class:"detail-row"},Nn={key:0,class:"separator"},$n={key:3,class:"detail-row"},Fn={key:4,class:"detail-section"},jn={class:"template-preview"},Dn={key:0,class:"action-buttons"},Ln=Z(o({__name:"TrialDetailView",props:{trial:{},compact:{type:Boolean}},setup(e){const t=e,n=s(),r=G(),i=l(!1);function o(e,t){const a=t.getTime()-e.getTime(),n=Math.floor(a/36e5),l=Math.floor(a%36e5/6e4);return n>0?`${n}h ${l}m`:`${l}m`}async function c(){if(i.value)W.warn("Trial start already in progress",{trialId:t.trial.id});else{i.value=!0;try{const e=await r.executeTrialWithConfirmation(t.trial.id);if(e.needsConfirmation&&e.runningTrial){if(!(await new Promise(t=>{ce.confirm({title:"Another Trial is Running",content:`"${e.runningTrial.name}" is currently running. Starting this trial will pause it. Continue?`,onOk:()=>t(!0),onCancel:()=>t(!1)})})))return;await r.executeTrialWithConfirmation(t.trial.id,!0)}W.info("Trial started",{trialId:t.trial.id})}catch(e){W.error("Failed to start trial",e),ce.error({title:"Failed to start trial",content:e instanceof Error?e.message:"Unknown error"})}finally{i.value=!1}}}function u(){n.push({name:"trials",query:{tab:"create",duplicate:t.trial.id,edit:"true"}})}return(e,n)=>{const l=y("a-button");return w(),p("div",{class:x(["trial-detail-view",{compact:e.compact}])},[m("div",vn,[m("div",gn,[a(g(re),{class:"stat-icon-inline"}),n[0]||(n[0]=m("span",{class:"stat-label"},"Duration:",-1)),m("span",yn,S(o(e.trial.created,e.trial.completed||new Date)),1)]),m("div",hn,[a(g(qe),{class:"stat-icon-inline"}),n[1]||(n[1]=m("span",{class:"stat-label"},"Cost:",-1)),m("span",bn,"$"+S((e.trial.estimatedCost||0).toFixed(2)),1)]),m("div",_n,[a(g(it),{class:"stat-icon-inline"}),n[2]||(n[2]=m("span",{class:"stat-label"},"Models:",-1)),m("span",wn,S(e.trial.configurationSnapshots?.length||0),1)]),m("div",kn,[a(g(se),{class:"stat-icon-inline"}),n[3]||(n[3]=m("span",{class:"stat-label"},"Design:",-1)),m("span",xn,S(e.trial.designSnapshot?.originalName||"Unknown"),1)])]),m("div",Sn,[m("div",Cn,[n[4]||(n[4]=m("span",{class:"detail-label"},"Created:",-1)),m("span",In,S(new Date(e.trial.created).toLocaleString()),1),n[5]||(n[5]=m("span",{class:"detail-label"},"Repeats:",-1)),m("span",On,S(e.trial.repeatConfig?.callsPerPrompt||1)+"x",1),n[6]||(n[6]=m("span",{class:"detail-label"},"Variables:",-1)),m("span",Tn,S((t.trial.variableSnapshots&&t.trial.variableSnapshots.length>0?t.trial.variableSnapshots[0].originalListName:null)||"None"),1)]),e.trial.configurationSnapshots?.length>0?(w(),p("div",Pn,[n[7]||(n[7]=m("span",{class:"detail-label"},"Models:",-1)),(w(!0),p(b,null,_(e.trial.configurationSnapshots,(t,n)=>(w(),p("span",{key:`trial-config-${t.name}-${n}`,class:"model-inline"},[a(g(it)),k(" "+S(t.name)+" ("+S(t.provider)+", temp: "+S(t.parameters?.temperature||.7)+") ",1),n<e.trial.configurationSnapshots.length-1?(w(),p("span",En,"•")):f("",!0)]))),128))])):f("",!0),e.trial.progress.networkErrors>0?(w(),p("div",An,[n[8]||(n[8]=m("span",{class:"detail-label"},"Issues:",-1)),m("span",Mn,S(e.trial.progress.networkErrors)+" network errors occurred",1)])):f("",!0),e.trial.variableSnapshots&&e.trial.variableSnapshots.length>0?(w(),p("div",Rn,[n[9]||(n[9]=m("span",{class:"detail-label"},"Variables Used:",-1)),(w(!0),p(b,null,_(e.trial.variableSnapshots,(t,a)=>(w(),p("span",{key:t.variableName,class:"detail-value"},[m("strong",null,S(t.variableName),1),k(" from "+S(t.originalListName)+" ("+S(t.data.itemCount)+" values) ",1),a<e.trial.variableSnapshots.length-1?(w(),p("span",Nn,"•")):f("",!0)]))),128))])):f("",!0),"failed"===e.trial.status?(w(),p("div",$n,n[10]||(n[10]=[m("span",{class:"detail-label"},"Status:",-1),m("span",{class:"detail-value error"},"Trial failed - check task details for more information",-1)]))):f("",!0),e.trial.designSnapshot?.promptTemplate?(w(),p("div",Fn,[m("h4",null,[a(g(se)),n[11]||(n[11]=k(" Prompt Template"))]),m("div",jn,[m("pre",null,S(e.trial.designSnapshot.promptTemplate),1)])])):f("",!0)]),"draft"===e.trial.status?(w(),p("div",Dn,[i.value?(w(),v(l,{key:0,type:"primary",disabled:!0},{icon:h(()=>[a(g(ne),{spin:""})]),default:h(()=>[n[12]||(n[12]=k(" Starting... "))]),_:1,__:[12]})):(w(),v(l,{key:1,type:"primary",onClick:c,disabled:i.value},{icon:h(()=>[a(g(ie))]),default:h(()=>[n[13]||(n[13]=k(" Start Trial "))]),_:1,__:[13]},8,["disabled"])),a(l,{onClick:u},{icon:h(()=>[a(g(oe))]),default:h(()=>[n[14]||(n[14]=k(" Edit Configuration "))]),_:1,__:[14]})])):f("",!0)],2)}}}),[["__scopeId","data-v-791ca8ac"]]),Un={class:"modal-content"},qn={class:"modal-header"},zn={class:"modal-body"},Vn={class:"section"},Bn={class:"format-options"},Hn=["data-testid","aria-label"],Kn=["value","data-testid","aria-label"],Gn={class:"format-label"},Wn={class:"format-name"},Yn={class:"section"},Jn={class:"field-groups"},Qn=["data-testid"],Xn={class:"field-list"},Zn=["data-testid","aria-label"],el=["value","data-testid","aria-label"],tl={class:"field-label"},al={class:"field-name"},nl={class:"field-desc"},ll={class:"section"},rl={class:"preview-info"},sl={class:"preview-count"},il={class:"preview-fields"},ol={class:"preview-size"},cl={class:"modal-footer"},ul=Z(o({__name:"ExportDataModal",props:{trial:{},apiCalls:{}},emits:["close"],setup(e){const t=e,n=[{id:"csv",name:"CSV",description:"Comma-separated values (Excel compatible)"},{id:"tsv",name:"TSV",description:"Tab-separated values"},{id:"excel",name:"Excel",description:"Microsoft Excel (.xlsx)"},{id:"json",name:"JSON",description:"JavaScript Object Notation"},{id:"jsonl",name:"JSONL",description:"JSON Lines (one object per line)"}],s=[{name:"Basic Info",fields:[{id:"id",name:"ID",description:"API call identifier",default:!0},{id:"trial_id",name:"Trial ID",description:"Parent trial identifier",default:!0},{id:"trial_name",name:"Trial Name",description:"Human-readable trial name",default:!0},{id:"status",name:"Status",description:"Call status (completed, failed, etc.)",default:!0},{id:"created",name:"Created",description:"When the call was initiated",default:!0},{id:"completed",name:"Completed",description:"When the call finished",default:!0}]},{name:"Configuration",fields:[{id:"configuration_index",name:"Config Index",description:"Configuration array index",default:!1},{id:"configuration_name",name:"Config Name",description:"Human-readable config name",default:!1},{id:"provider",name:"Provider",description:"LLM service provider",default:!0},{id:"model",name:"Model",description:"Model identifier",default:!0},{id:"parameters",name:"Parameters",description:"Model parameters as separate columns (temperature, max_tokens, etc.)",default:!0}]},{name:"Content",fields:[{id:"prompt",name:"Prompt",description:"Input prompt text",default:!0},{id:"variables",name:"Variables",description:"Variable substitutions (flattened as separate columns)",default:!0},{id:"result_content",name:"Result Content",description:"LLM response content",default:!0},{id:"result_error",name:"Result Error",description:"Error message if failed",default:!0}]},{name:"Performance",fields:[{id:"response_latency_ms",name:"Latency (ms)",description:"Response time",default:!0},{id:"duration_ms",name:"Duration (ms)",description:"Total processing time",default:!1},{id:"result_success",name:"Success",description:"Whether call succeeded",default:!0}]},{name:"Technical Details",fields:[{id:"request_url",name:"Request URL",description:"API endpoint URL",default:!0},{id:"request_method",name:"Request Method",description:"HTTP method",default:!1},{id:"request_headers",name:"Request Headers",description:"HTTP request headers",default:!1},{id:"request_body",name:"Request Body",description:"Full request payload",default:!1},{id:"response_status",name:"Response Status",description:"HTTP status code",default:!0},{id:"response_headers",name:"Response Headers",description:"HTTP response headers",default:!1},{id:"response_body",name:"Response Body",description:"Full response payload",default:!1}]},{name:"Error Handling",fields:[{id:"network_error_count",name:"Network Errors",description:"Number of network failures",default:!1},{id:"retry_count",name:"Retry Count",description:"Number of retry attempts",default:!1}]}],i=l("csv"),o=l([]),c=s.flatMap(e=>e.fields);o.value=c.filter(e=>e.default).map(e=>e.id);const u=r(()=>{const e=50*o.value.length,a=t.apiCalls.length*e;return a<1024?`${a}B`:a<1048576?`${(a/1024).toFixed(1)}KB`:`${(a/1048576).toFixed(1)}MB`});function d(){o.value=c.map(e=>e.id)}function f(){o.value=c.filter(e=>e.default).map(e=>e.id)}function v(){o.value=[]}function g(e){const t=new Set(["model","messages","prompt","stream","user"]),a={};for(const[n,l]of Object.entries(e))t.has(n)||(a[n]=l);return a}function x(e,t=""){const a={};for(const[n,l]of Object.entries(e)){const e=t?`${t}.${n}`:n;null===l||"object"!=typeof l||Array.isArray(l)?a[e]=Array.isArray(l)?JSON.stringify(l):l:Object.assign(a,x(l,e))}return a}function C(){const e=new Set,a=[];if("aligned"===t.trial.executionContext?.mode){const n=t.trial.variableSnapshots?.find(e=>"tabular"===e.category);n?.data.tabularData?.columns&&(a.push(...n.data.tabularData.columns),n.data.tabularData.columns.forEach(t=>e.add(t)))}o.value.includes("variables")&&t.apiCalls.forEach(t=>{t.variables&&"object"==typeof t.variables&&Object.keys(t.variables).forEach(t=>{e.has(t)||(e.add(t),a.push(t))})});const n=new Set,l=[];return o.value.includes("parameters")&&t.apiCalls.forEach(e=>{if(e.request?.body){const t=x(g(e.request.body));Object.keys(t).forEach(e=>{n.has(e)||(n.add(e),l.push(e))})}}),t.apiCalls.map((e,n)=>{const r={};var s,i;if("aligned"===t.trial.executionContext?.mode&&(r.Row=n+1),o.value.includes("id")&&(r.ID=e.id),o.value.includes("trial_id")&&(r["Trial ID"]=e.trialId),o.value.includes("trial_name")&&(r["Trial Name"]=t.trial.name),o.value.includes("status")&&(r.Status=e.status),o.value.includes("created")&&(r.Created=e.created?new Date(e.created).toISOString():""),o.value.includes("completed")&&(r.Completed=e.completed?new Date(e.completed).toISOString():""),o.value.includes("configuration_index")&&(r["Configuration Index"]=e.configurationIndex),o.value.includes("configuration_name")&&(r["Configuration Name"]=(s=e.configurationIndex,t.trial.configurationSnapshots[s]&&t.trial.configurationSnapshots[s].name||`Config ${s+1}`)),o.value.includes("provider")&&(r.Provider=t.trial.configurationSnapshots?.[e.configurationIndex]?.provider||(i=e,i.request?.url?.includes("openai.com")?"OpenAI":i.request?.url?.includes("anthropic.com")?"Anthropic":i.request?.url?.includes("openrouter.ai")?"OpenRouter":i.request?.url?.includes("localhost:11434")?"Ollama":"Unknown")),o.value.includes("model")&&(r.Model=t.trial.configurationSnapshots?.[e.configurationIndex]?.modelId||function(e){return e.request?.body?.model?e.request.body.model:"Unknown"}(e)),o.value.includes("prompt")&&(r.Prompt=e.prompt),o.value.includes("variables"))for(const t of a)r[t]=e.variables?.[t]||"";if(o.value.includes("result_content")&&(r["Result Content"]=e.result?.content||""),o.value.includes("result_error")&&(r["Result Error"]=e.result?.error||""),o.value.includes("response_latency_ms")&&(r["Response Latency (ms)"]=e.response?.latencyMs||""),o.value.includes("duration_ms")){const t=e.created?new Date(e.created).getTime():0,a=e.completed?new Date(e.completed).getTime():0;r["Duration (ms)"]=t&&a?a-t:""}if(o.value.includes("result_success")&&(r["Result Success"]=e.result?.success||!1),o.value.includes("request_url")&&(r["Request URL"]=e.request?.url||""),o.value.includes("request_method")&&(r["Request Method"]=e.request?.method||""),o.value.includes("request_headers")&&(r["Request Headers"]=JSON.stringify(e.request?.headers||{})),o.value.includes("request_body")&&(r["Request Body"]=JSON.stringify(e.request?.body||{})),o.value.includes("response_status")&&(r["Response Status"]=e.response?.status||""),o.value.includes("response_headers")&&(r["Response Headers"]=JSON.stringify(e.response?.headers||{})),o.value.includes("response_body")&&(r["Response Body"]=JSON.stringify(e.response?.body||{})),o.value.includes("network_error_count")&&(r["Network Error Count"]=0),o.value.includes("retry_count")&&(r["Retry Count"]=0),o.value.includes("parameters")&&l.length>0)if(e.request?.body){const t=g(e.request.body),a=x(t);n<3&&W.debug("Export parameters debug",{callId:e.id,requestBody:e.request.body,extractedParams:t,flatParams:a,parameterOrder:l});for(const e of l){r[`param.${e}`]=void 0!==a[e]?a[e]:""}}else for(const t of l){r[`param.${t}`]=""}return void 0!==e.repeatIndex&&(r.Repeat=e.repeatIndex+1,r["Repeat Group"]=e.repeatGroupId),r})}async function I(){const e=C(),a=(new Date).toISOString().split("T")[0],n=`${t.trial.name}_${i.value}_${a}`;try{switch(i.value){case"csv":!function(e,t){if(0===e.length)return;const a=Object.keys(e[0]||{}),n=[a.join(","),...e.map(e=>a.map(t=>`"${String(e[t]??"").replace(/"/g,'""')}"`).join(","))].join("\n");O(n,`${t}.csv`,"text/csv")}(e,n);break;case"tsv":!function(e,t){if(0===e.length)return;const a=Object.keys(e[0]||{}),n=[a.join("\t"),...e.map(e=>a.map(t=>String(e[t]||"").replace(/\t/g," ")).join("\t"))].join("\n");O(n,`${t}.tsv`,"text/tab-separated-values")}(e,n);break;case"excel":await async function(e,t){const a=await le(()=>import("./xlsx-C4WhbwXR.js"),[],import.meta.url),n=a.utils.book_new(),l=a.utils.json_to_sheet(e),r=Object.keys(e[0]||{}),s=r.map(e=>({wch:Math.min(Math.max(e.length,10),50)}));l["!cols"]=s,a.utils.book_append_sheet(n,l,"Trial Results"),a.writeFile(n,`${t}.xlsx`)}(e,n);break;case"json":!function(e,t){const a=JSON.stringify(e,null,2);O(a,`${t}.json`,"application/json")}(e,n);break;case"jsonl":!function(e,t){const a=e.map(e=>JSON.stringify(e)).join("\n");O(a,`${t}.jsonl`,"application/jsonl")}(e,n)}}catch(l){W.error("Export failed",l),te.error("Export failed: "+(l instanceof Error?l.message:"Unknown error"))}}function O(e,t,a){let n=e;"text/csv"!==a&&"text/tab-separated-values"!==a||(n="\ufeff"+e);const l=new Blob([n],{type:`${a};charset=utf-8`}),r=URL.createObjectURL(l),s=document.createElement("a");s.href=r,s.download=t,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(r)}return(e,t)=>{const l=y("a-button");return w(),p("div",{class:"modal-overlay",onClick:t[4]||(t[4]=A(t=>e.$emit("close"),["self"]))},[m("div",Un,[m("div",qn,[t[5]||(t[5]=m("h3",null,"Export Trial Data",-1)),m("button",{onClick:t[0]||(t[0]=t=>e.$emit("close")),class:"close-btn","data-testid":"btn-close-export-modal","aria-label":"Close export modal"},"×")]),m("div",zn,[m("div",Vn,[t[6]||(t[6]=m("h4",null,"Export Format",-1)),m("div",Bn,[(w(),p(b,null,_(n,e=>m("label",{key:e.id,class:"format-option","data-testid":`label-format-${e.id}`,"aria-label":`Export as ${e.name} format`},[F(m("input",{type:"radio",value:e.id,"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),class:"format-radio","data-testid":`radio-format-${e.id}`,"aria-label":`Select ${e.name} format`},null,8,Kn),[[j,i.value]]),m("span",Gn,[m("span",Wn,S(e.name),1)])],8,Hn)),64))])]),m("div",Yn,[m("h4",null,[t[7]||(t[7]=k(" Fields to Export ")),m("div",{class:"field-controls"},[m("button",{onClick:d,class:"control-btn","data-testid":"btn-select-all-fields","aria-label":"Select all export fields"},"Select All"),m("button",{onClick:f,class:"control-btn","data-testid":"btn-select-default-fields","aria-label":"Select default export fields"},"Defaults"),m("button",{onClick:v,class:"control-btn","data-testid":"btn-select-no-fields","aria-label":"Deselect all export fields"},"Select None")])]),m("div",Jn,[(w(),p(b,null,_(s,e=>m("div",{key:e.name,class:"field-group","data-testid":`field-group-${e.name.toLowerCase().replace(/\s+/g,"-")}`},[m("h5",null,S(e.name),1),m("div",Xn,[(w(!0),p(b,null,_(e.fields,e=>(w(),p("label",{key:e.id,class:"field-option","data-testid":`label-field-${e.id}`,"aria-label":`Include ${e.name} in export`},[F(m("input",{type:"checkbox",value:e.id,"onUpdate:modelValue":t[2]||(t[2]=e=>o.value=e),class:"field-checkbox","data-testid":`checkbox-field-${e.id}`,"aria-label":`Select ${e.name} field for export`},null,8,el),[[D,o.value]]),m("span",tl,[m("span",al,S(e.name),1),m("span",nl,S(e.description),1)])],8,Zn))),128))])],8,Qn)),64))])]),m("div",ll,[t[8]||(t[8]=m("h4",null,"Export Preview",-1)),m("div",rl,[m("span",sl,S(e.apiCalls.length)+" records",1),m("span",il,S(o.value.length)+" fields",1),m("span",ol,"~"+S(u.value),1)])])]),m("div",cl,[a(l,{onClick:t[3]||(t[3]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-cancel-export","aria-label":"Cancel export"},{default:h(()=>t[9]||(t[9]=[k(" Cancel ")])),_:1,__:[9]}),a(l,{type:"primary",onClick:I,disabled:0===o.value.length,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-confirm-export","data-format":i.value,"aria-label":`Export data as ${i.value.toUpperCase()}`},{default:h(()=>[k(" Export "+S(i.value.toUpperCase()),1)]),_:1},8,["disabled","data-format","aria-label"])])])])}}}),[["__scopeId","data-v-f2b58b35"]]),dl=Object.freeze(Object.defineProperty({__proto__:null,default:ul},Symbol.toStringTag,{value:"Module"})),pl=n("taskMonitoring",()=>{const e=R([]),t=R([]);let a=null,n=null;const l=r(()=>{let t=0,a=0,n=0,l=0,r=0;for(const s of e.value)switch(s.status){case"pending":t++;break;case"running":a++;break;case"completed":n++;break;case"failed":l++;break;case"cancelled":r++}return{pending:t,running:a,completed:n,failed:l,cancelled:r,total:e.value.length}}),s=r(()=>{const e=t.value.filter(e=>"running"===e.status);return 0===e.length?null:(e.sort((e,t)=>(e.started?.getTime()||0)-(t.started?.getTime()||0)),e[0])}),i=r(()=>{const a=new Map,n=ue.getAllGroups();for(const e of n)a.set(e,{provider:e,pending:0,running:0,completed:0,failed:0});for(const l of e.value){const e=t.value.find(e=>e.id===l.trialId);if(!e)continue;const n=e.configurationSnapshots[l.configurationIndex];if(!n)continue;const r=ue.getProviderGroup(n.provider),s=a.get(r);if(s)switch(l.status){case"pending":s.pending++;break;case"running":s.running++;break;case"completed":s.completed++;break;case"failed":s.failed++}}return Array.from(a.values()).filter(e=>e.pending>0||e.running>0||e.completed>0||e.failed>0)});let o=0;return{allApiCalls:e,trials:t,globalStats:l,providerStats:i,activeTrial:s,getTrialStats:function(a){const n=e.value.filter(e=>e.trialId===a);let l=0,r=0,s=0,i=0;for(const e of n)switch(e.status){case"pending":l++;break;case"running":r++;break;case"completed":s++;break;case"failed":i++}let o=0;if(l>0){const n=t.value.find(e=>e.id===a);n&&n.created&&(o=e.value.filter(e=>{if("pending"!==e.status||e.trialId===a)return!1;const l=t.value.find(t=>t.id===e.trialId);return l&&l.created&&l.created<n.created}).length)}return{pending:l,running:r,completed:s,failed:i,total:n.length,queuePosition:o}},initialize:function(){o++,a||n?W.debug("Task monitoring store already initialized",{count:o}):(a=Ee(async()=>{const e=(await de.trials.where("status").anyOf(["running","paused"]).toArray()).map(e=>e.id);return 0===e.length?[]:await de.apiCalls.where("trialId").anyOf(e).toArray()}).subscribe({next:t=>{e.value=t},error:e=>{W.error("Error in API calls subscription",e)}}),n=Ee(()=>de.trials.toArray()).subscribe({next:e=>{t.value=e},error:e=>{W.error("Error in trials subscription",e)}}))},destroy:function(){o--,o>0?W.debug("Task monitoring store still has references",{count:o}):(a&&(a.unsubscribe(),a=null),n&&(n.unsubscribe(),n=null),W.debug("Task monitoring store destroyed"))}}});const ml={class:"header-left"},fl={class:"queue-title"},vl={key:0,class:"mini-dashboard"},gl={class:"mini-stat"},yl={class:"mini-value"},hl={class:"mini-stat"},bl={class:"mini-value"},_l={class:"mini-stat"},wl={class:"mini-value"},kl={class:"mini-stat error"},xl={class:"mini-value"},Sl={class:"mini-stat active-trial"},Cl={class:"leader-status"},Il={class:"expandable-content"},Ol={key:0,class:"active-trial-banner"},Tl={class:"active-text"},Pl={class:"queue-stats-grid"},El={class:"stat-card"},Al={class:"stat-value"},Ml={class:"stat-card"},Rl={class:"stat-value"},Nl={class:"stat-card"},$l={class:"stat-value"},Fl={class:"stat-card"},jl={class:"stat-value"},Dl={key:1,class:"provider-section"},Ll={class:"section-subtitle"},Ul={class:"provider-list"},ql={class:"provider-header"},zl={class:"provider-name"},Vl={key:0,class:"provider-status"},Bl={class:"provider-counts"},Hl={key:1,class:"provider-status"},Kl={class:"concurrency-gauge"},Gl={class:"gauge-label"},Wl={class:"gauge-value"},Yl={class:"gauge-info"},Jl={key:2,class:"trial-queue-section"},Ql={class:"trial-queue-stats"},Xl={class:"trial-stat"},Zl={class:"trial-stat-value"},er=Z(o({__name:"QueueStatusPanel",props:{trialId:{},trial:{},compact:{type:Boolean,default:!1}},setup(e){const t=e,n=l(!1);function s(){n.value=!n.value}const{isLeader:i,queueStats:o,providerStats:c}=function(){const e=pl(),t=pe();return u(()=>{e.initialize()}),d(()=>{e.destroy()}),{isLeader:l(!0),leaderId:l("browser-native"),queueStats:r(()=>({pending:e.globalStats.pending,reserved:0,executing:e.globalStats.running,completed:e.globalStats.completed,failed:e.globalStats.failed,buried:e.globalStats.cancelled,total:e.globalStats.total})),providerStats:r(()=>e.providerStats.map(e=>{let a=t.getGroupConcurrency(e.provider);if(void 0===a){const t=ue.getProvidersInGroup(e.provider);a=1;for(const e of t)e.execution?.defaultConcurrency&&(a=Math.max(a,e.execution.defaultConcurrency))}const n=a>0?Math.round(e.running/a*100):0;return{provider:e.provider,pending:e.pending,executing:e.running,rateLimit:{tokens:a-e.running,requestsPerSecond:a,burstSize:a,utilization:n}}})),rateLimits:l({}),getTrialQueueInfo:function(t){return r(()=>{const a=e.getTrialStats(t);return{position:a.queuePosition,pending:a.pending,executing:a.running,completed:a.completed}})},getTaskInfo:async function(e){},refreshStats:async function(){},refreshRateLimits:async function(){},destroy:function(){e.destroy()}}}(),C=pl(),I=r(()=>t.trialId?null:C.activeTrial);u(()=>{t.trialId||C.initialize()}),d(()=>{t.trialId||C.destroy()});const O=r(()=>t.trialId||""),T=t.trialId?function(e){const t=pl(),a=l([]),n=r(()=>{const a=t.getTrialStats(e.value);return{pending:a.pending,reserved:0,executing:a.running,completed:a.completed,failed:a.failed,buried:0,queuePosition:a.queuePosition}});return u(()=>{t.initialize()}),{tasks:a,stats:n,destroy:function(){}}}(O):null,P=r(()=>T?T.stats.value:{pending:0,executing:0,queuePosition:0}),E=r(()=>{if(t.trialId&&P.value){const e=t.trial?.progress||{completed:0,failed:0};return{pending:P.value.pending||0,executing:P.value.executing||0,completed:e.completed||0,failed:e.failed||0}}return o.value}),A=r(()=>{if(!t.trialId||!t.trial)return c.value;const e=new Set;return t.trial.configurationSnapshots&&t.trial.configurationSnapshots.forEach(t=>{if(t.provider){const a=ue.getProviderGroup(t.provider);e.add(t.provider),e.add(a)}}),c.value.filter(t=>e.has(t.provider)).map(e=>({...e,pending:0,executing:0,rateLimit:e.rateLimit}))});return(e,t)=>{const l=y("router-link"),r=y("a-tag"),o=y("a-progress");return w(),p("div",{class:x(["queue-status-panel",{collapsed:n.value}])},[m("div",{class:"queue-header",onClick:s},[m("div",ml,[a(g(Pe),{class:x(["collapse-icon",{rotated:!n.value}])},null,8,["class"]),m("h3",fl,[a(g(me)),k(" "+S(e.trialId?"Trial Progress":"Global Task Queue (All Trials)"),1)]),n.value?(w(),p("div",vl,[m("span",gl,[m("span",yl,S(E.value.pending),1),t[0]||(t[0]=k(" pending "))]),t[6]||(t[6]=m("span",{class:"mini-divider"},"|",-1)),m("span",hl,[m("span",bl,S(E.value.executing),1),t[1]||(t[1]=k(" running "))]),t[7]||(t[7]=m("span",{class:"mini-divider"},"|",-1)),m("span",_l,[m("span",wl,S(E.value.completed),1),t[2]||(t[2]=k(" done "))]),E.value.failed>0?(w(),p(b,{key:0},[t[4]||(t[4]=m("span",{class:"mini-divider"},"|",-1)),m("span",kl,[m("span",xl,S(E.value.failed),1),t[3]||(t[3]=k(" failed "))])],64)):f("",!0),I.value&&!e.trialId?(w(),p(b,{key:1},[t[5]||(t[5]=m("span",{class:"mini-divider"},"|",-1)),m("span",Sl,[a(g(ie)),k(" "+S(I.value.name),1)])],64)):f("",!0)])):f("",!0)]),m("div",Cl,[g(i)?(w(),p(b,{key:0},[a(g(fe),{class:"leader-icon active"}),t[8]||(t[8]=m("span",{class:"leader-text"},"Queue Processor (Leader)",-1))],64)):(w(),p(b,{key:1},[a(g(ve),{class:"leader-icon"}),t[9]||(t[9]=m("span",{class:"leader-text"},"Observer",-1))],64))])]),F(m("div",Il,[!e.trialId&&I.value?(w(),p("div",Ol,[a(g(ie),{class:"active-icon"}),m("span",Tl,"Active Trial: "+S(I.value.name),1),a(l,{to:`/trials/${I.value.id}`,class:"active-link"},{default:h(()=>[t[10]||(t[10]=k(" View ")),a(g(ge))]),_:1,__:[10]},8,["to"])])):f("",!0),m("div",Pl,[m("div",El,[m("div",Al,S(E.value.pending),1),t[11]||(t[11]=m("div",{class:"stat-label"},"Pending",-1))]),m("div",Ml,[m("div",Rl,S(E.value.executing),1),t[12]||(t[12]=m("div",{class:"stat-label"},"Executing",-1))]),m("div",Nl,[m("div",$l,S(E.value.completed),1),t[13]||(t[13]=m("div",{class:"stat-label"},"Completed",-1))]),m("div",Fl,[m("div",jl,S(E.value.failed),1),t[14]||(t[14]=m("div",{class:"stat-label"},"Failed",-1))])]),A.value.length>0?(w(),p("div",Dl,[m("h4",Ll,S(e.trialId?"Trial Provider Status":"Provider Status"),1),m("div",Ul,[(w(!0),p(b,null,_(A.value,n=>{return w(),p("div",{key:n.provider,class:"provider-item"},[m("div",ql,[m("span",zl,S(n.provider),1),e.trialId?(w(),p("div",Hl,[a(r,{color:"blue",size:"small"},{default:h(()=>t[15]||(t[15]=[k("Used by this trial")])),_:1,__:[15]})])):(w(),p("div",Vl,[m("div",Bl,[n.pending>0?(w(),v(r,{key:0,color:"blue"},{default:h(()=>[k(S(n.pending)+" pending ",1)]),_:2},1024)):f("",!0),n.executing>0?(w(),v(r,{key:1,color:"green"},{default:h(()=>[k(S(n.executing)+" running ",1)]),_:2},1024)):f("",!0)])]))]),m("div",Kl,[m("div",Gl,[t[16]||(t[16]=m("span",null,"Concurrency",-1)),m("span",Wl,S(n.rateLimit.utilization)+"% slots used ",1)]),a(o,{percent:n.rateLimit.utilization,"stroke-color":(l=n.rateLimit.utilization,l<50?"#52c41a":l<80?"#faad14":"#f5222d"),"show-info":!1,size:"small"},null,8,["percent","stroke-color"]),m("div",Yl,S(n.rateLimit.requestsPerSecond)+" max concurrent ",1)])]);var l}),128))])])):f("",!0),e.trialId?(w(),p("div",Jl,[t[18]||(t[18]=m("h4",{class:"section-subtitle"},"Additional Info",-1)),m("div",Ql,[m("div",Xl,[t[17]||(t[17]=m("span",{class:"trial-stat-label"},"Queue Position:",-1)),m("span",Zl,S(P.value.queuePosition||"Processing"),1)])])])):f("",!0)],512),[[L,!n.value]])],2)}}}),[["__scopeId","data-v-f7f4d7f6"]]);function tr(e,t){const a=new Set,n=new Set,l=new Set;e.forEach(e=>{e.variables&&Object.keys(e.variables).forEach(e=>a.add(e)),e.variableAttributes&&Object.values(e.variableAttributes).forEach(e=>{e&&Object.keys(e).forEach(e=>n.add(e))})});const r=Array.from(a).sort(),s=Array.from(n).sort(),i=Array.from(l).sort(),o=[];t?.designSnapshot?.extractPattern&&o.push("extracted_value");const c=["success","refused",...o,...i];return{categorical:[...r,...s,"model","status","error_type"],numeric:["response_time","total_tokens","prompt_tokens","completion_tokens","extracted_value",...o].sort(),extracted:c}}function ar(e,t,a){switch(t){case"model":if(a&&e.configurationIndex<a.configurationSnapshots.length){return a.configurationSnapshots[e.configurationIndex].modelId||"Unknown"}return"Unknown";case"status":return e.status;case"response_time":return e.response?.latencyMs||0;case"total_tokens":if(e.response?.body?.usage){const t=e.response.body.usage;return t.total_tokens||t.prompt_tokens+t.completion_tokens||0}return 0;case"prompt_tokens":return e.response?.body?.usage?.prompt_tokens||e.response?.body?.usage?.input_tokens||0;case"completion_tokens":return e.response?.body?.usage?.completion_tokens||e.response?.body?.usage?.output_tokens||0;case"error_type":return e.result?.errorType||(!1===e.result?.success?"api_error":"success");case"success":return e.result?.success?1:0;case"refused":return e.result?.refused?1:0;case"extracted_value":if(e.result?.success&&void 0!==e.result?.content){const t=String(e.result.content),a=parseFloat(t);return isNaN(a)||t.trim()!==String(a)?t:a}return null}if(void 0!==e.variables?.[t])return e.variables[t];if(e.variableAttributes)for(const n of Object.keys(e.variableAttributes)){const a=e.variableAttributes[n];if(a&&void 0!==a[t])return a[t]}return null}const nr={count:{label:"Count",calculate:e=>e.length,format:e=>e.toString(),needsNumeric:!1},sum:{label:"Sum",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mean:{label:"Mean",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0)/t.length:null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},median:{label:"Median",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(0===t.length)return null;const a=[...t].sort((e,t)=>e-t),n=Math.floor(a.length/2);return a.length%2==0?(a[n-1]+a[n])/2:a[n]},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mode:{label:"Mode",calculate:e=>{if(0===e.length)return null;const t=new Map;e.forEach(e=>t.set(e,(t.get(e)||0)+1));let a=0,n=null;return t.forEach((e,t)=>{e>a&&(a=e,n=t)}),{value:n,count:a,total:e.length}},format:e=>e?`${e.value} (${e.count}/${e.total})`:"-",needsNumeric:!1},variance:{label:"Variance",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(t.length<=1)return null;const a=t.reduce((e,t)=>e+t,0)/t.length;return t.reduce((e,t)=>e+Math.pow(t-a,2),0)/(t.length-1)},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},std_dev:{label:"Std Dev",calculate:e=>{const t=nr.variance.calculate(e);return null!==t?Math.sqrt(t):null},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},min:{label:"Min",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.min(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},max:{label:"Max",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.max(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},success_rate:{label:"Success Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.success).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},refusal_rate:{label:"Refusal Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.refused).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},avg_time:{label:"Avg Time (ms)",calculate:(e,t)=>{const a=t.filter(e=>e.response?.latencyMs).map(e=>e.response.latencyMs);return a.length>0?a.reduce((e,t)=>e+t,0)/a.length:null},format:e=>e?`${Math.round(e)}ms`:"-",needsNumeric:!1,usesApiCalls:!0}};function lr(e,t){if(!e||null===e.value)return"-";return nr[t].format(e.value)}const rr={"blue-subtle":{name:"Blue (Subtle)",colors:["rgba(59, 130, 246, 0.1)","rgba(59, 130, 246, 0.3)","rgba(59, 130, 246, 0.7)"]},"green-red":{name:"Green-Red",colors:["#dc2626","#fbbf24","#10b981"]},"blue-yellow":{name:"Blue-Yellow",colors:["#1e40af","#3b82f6","#fbbf24"]},"purple-orange":{name:"Purple-Orange",colors:["#7c3aed","#a855f7","#ff9500"]},grayscale:{name:"Grayscale",colors:["#f3f4f6","#9ca3af","#374151"]},viridis:{name:"Viridis",colors:["#440154","#482878","#3e4989","#31688e","#26828e","#1f9e89","#35b779","#6ece58","#b5de2b","#fde725"]},inferno:{name:"Inferno",colors:["#000004","#1b0c41","#4a0c6b","#781c6d","#a52c60","#cf4446","#ed6925","#fb9b06","#f7d13d","#fcffa4"]},magma:{name:"Magma",colors:["#000004","#180f3d","#440f76","#721f81","#9e2f7f","#cd4071","#f1605d","#fd9668","#feca8d","#fcfdbf"]},plasma:{name:"Plasma",colors:["#0d0887","#46039f","#7201a8","#9c179e","#bd3786","#d8576b","#ed7953","#fb9f3a","#fdca26","#f0f921"]}};function sr(e,t){if(0===t.length)return"transparent";if(1===t.length)return t[0];e=Math.max(0,Math.min(1,e));const a=1/(t.length-1),n=Math.floor(e/a),l=e%a/a;return ir(t[Math.min(n,t.length-1)],t[Math.min(n+1,t.length-1)],l)}function ir(e,t,a){if(e.startsWith("rgba")&&t.startsWith("rgba")){const n=e=>{const t=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);return t?{r:parseInt(t[1]),g:parseInt(t[2]),b:parseInt(t[3]),a:t[4]?parseFloat(t[4]):1}:null},l=n(e),r=n(t);if(l&&r){return`rgba(${Math.round(l.r+(r.r-l.r)*a)}, ${Math.round(l.g+(r.g-l.g)*a)}, ${Math.round(l.b+(r.b-l.b)*a)}, ${(l.a+(r.a-l.a)*a).toFixed(2)})`}}if(e.startsWith("rgba")||t.startsWith("rgba"))return a<.5?e:t;const n=e.replace("#",""),l=t.replace("#",""),r=parseInt(n.substr(0,2),16),s=parseInt(n.substr(2,2),16),i=parseInt(n.substr(4,2),16),o=parseInt(l.substr(0,2),16),c=parseInt(l.substr(2,2),16),u=parseInt(l.substr(4,2),16),d=Math.round(r+(o-r)*a),p=Math.round(s+(c-s)*a),m=Math.round(i+(u-i)*a);return`#${d.toString(16).padStart(2,"0")}${p.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}`}function or(e){let t,a,n;if(e.startsWith("rgba")){const l=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);if(!l)return!1;t=parseInt(l[1]),a=parseInt(l[2]),n=parseInt(l[3])}else{const l="#"===e.charAt(0)?e.substring(1,7):e;t=parseInt(l.substring(0,2),16),a=parseInt(l.substring(2,4),16),n=parseInt(l.substring(4,6),16)}const l=[t/255,a/255,n/255].map(e=>e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4));return.2126*l[0]+.7152*l[1]+.0722*l[2]<=.179}function cr(e){return or(e)?"#FFFFFF":"#000000"}function ur(e,t,a){const{colorScales:n,interpolateColor:l,getContrastColor:s}={colorScales:rr,interpolateColor:sr,interpolateBetweenColors:ir,colorIsDarkAdvanced:or,getContrastColor:cr};function i(e){if("number"==typeof e)return e;if("string"==typeof e){const t=parseFloat(e);return isNaN(t)?null:t}return null}return{getCellStyle:function(r,o,c){if(!r||null===r.value||"number"!=typeof r.value)return{};const u=n[t.value];if(!u)return{};const d=function(t,n,l){const r=i(t.value);if(null===r)return.5;if("global"===a.value){const t=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>i(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(r-e)/(a-e)}}else if("column"===a.value){const t=e.value.rows.map(e=>e.cells[l]).filter(e=>null!==e).map(e=>i(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(r-e)/(a-e)}}else if("row"===a.value){const t=e.value.rows.find(e=>e.label===n);if(t){const e=t.cells.filter(e=>null!==e).map(e=>i(e.value)).filter(e=>null!==e);if(e.length>0){const t=Math.min(...e),a=Math.max(...e);if(a!==t)return(r-t)/(a-t)}}}return.5}(r,o,c),p=l(d,u.colors);return{backgroundColor:`${p} !important`,color:`${s(p)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},getSummaryStyle:function(a){if(!a||null===a.value||"number"!=typeof a.value)return{};const r=n[t.value];if(!r)return{};let o=.5;const c=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>i(e.value)).filter(e=>null!==e);if(c.length>0){const e=Math.min(...c),t=Math.max(...c),n=i(a.value);null!==n&&(o=t!==e?(n-e)/(t-e):.5)}const u=l(o,r.colors);return{backgroundColor:`${u} !important`,color:`${s(u)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},styleKey:r(()=>`${t.value}-${a.value}`)}}const dr={class:"pivot-config"},pr={class:"config-row"},mr={class:"config-group"},fr=["value","aria-label"],vr={label:"Categorical"},gr=["value"],yr={class:"config-group"},hr=["value","aria-label"],br={label:"Categorical"},_r=["value"],wr={class:"config-group"},kr=["value","aria-label"],xr={label:"Extracted Values"},Sr=["value"],Cr={label:"Numeric Fields"},Ir=["value"],Or={class:"config-group"},Tr=["value","aria-label"],Pr=Z(o({__name:"PivotConfiguration",props:{config:{},availableFields:{}},emits:["update-config"],setup(e,{emit:t}){const a=t;function n(e,t){a("update-config",e,t)}function l(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}return(e,t)=>(w(),p("div",dr,[m("div",pr,[m("div",mr,[t[4]||(t[4]=m("label",{for:"pivot-row-field"},"Rows (Group by):",-1)),m("select",{id:"pivot-row-field",value:e.config.rowField,"aria-label":"Group rows by "+l(e.config.rowField),onChange:t[0]||(t[0]=e=>n("rowField",e.target.value))},[m("optgroup",vr,[(w(!0),p(b,null,_(e.availableFields.categorical,e=>(w(),p("option",{key:e,value:e},S(l(e)),9,gr))),128))])],40,fr)]),m("div",yr,[t[5]||(t[5]=m("label",{for:"pivot-column-field"},"Columns (Group by):",-1)),m("select",{id:"pivot-column-field",value:e.config.columnField,"aria-label":"Group columns by "+l(e.config.columnField),onChange:t[1]||(t[1]=e=>n("columnField",e.target.value))},[m("optgroup",br,[(w(!0),p(b,null,_(e.availableFields.categorical,e=>(w(),p("option",{key:e,value:e},S(l(e)),9,_r))),128))])],40,hr)]),m("div",wr,[t[6]||(t[6]=m("label",{for:"pivot-value-field"},"Values (Aggregate):",-1)),m("select",{id:"pivot-value-field",value:e.config.valueField,"aria-label":"Aggregate "+e.config.valueField+" values",onChange:t[2]||(t[2]=e=>n("valueField",e.target.value))},[m("optgroup",xr,[(w(!0),p(b,null,_(e.availableFields.extracted,e=>(w(),p("option",{key:e,value:e},S(e),9,Sr))),128))]),m("optgroup",Cr,[(w(!0),p(b,null,_(e.availableFields.numeric,e=>(w(),p("option",{key:e,value:e},S(l(e)),9,Ir))),128))])],40,kr)]),m("div",Or,[t[8]||(t[8]=m("label",{for:"pivot-aggregation"},"Aggregation:",-1)),m("select",{id:"pivot-aggregation",value:e.config.aggregation,"aria-label":"Aggregation method: "+e.config.aggregation,onChange:t[3]||(t[3]=e=>n("aggregation",e.target.value))},t[7]||(t[7]=[U('<optgroup label="Statistical" data-v-efb8a7c2><option value="mean" data-v-efb8a7c2>Mean</option><option value="median" data-v-efb8a7c2>Median</option><option value="variance" data-v-efb8a7c2>Variance</option><option value="std_dev" data-v-efb8a7c2>Std Dev</option><option value="min" data-v-efb8a7c2>Min</option><option value="max" data-v-efb8a7c2>Max</option></optgroup><optgroup label="Frequency" data-v-efb8a7c2><option value="count" data-v-efb8a7c2>Count</option><option value="mode" data-v-efb8a7c2>Mode</option></optgroup><optgroup label="Performance" data-v-efb8a7c2><option value="success_rate" data-v-efb8a7c2>Success Rate</option><option value="refusal_rate" data-v-efb8a7c2>Refusal Rate</option><option value="avg_time" data-v-efb8a7c2>Avg Time</option></optgroup>',3)]),40,Tr)])])]))}}),[["__scopeId","data-v-efb8a7c2"]]),Er={class:"heatmap-controls"},Ar={class:"color-scale-selector"},Mr=["value","aria-label"],Rr={class:"gradient-mode-selector"},Nr={class:"gradient-toggle",role:"group","aria-label":"Gradient mode selector"},$r=["aria-pressed"],Fr=["aria-pressed"],jr=["aria-pressed"],Dr=["title","aria-label"],Lr=Z(o({__name:"PivotHeatmapControls",props:{selectedColorScale:{},gradientMode:{},isFullscreen:{type:Boolean}},emits:["update-color-scale","update-gradient-mode","toggle-fullscreen"],setup(e,{emit:t}){const a=t;function n(e){const t=e.target.value;a("update-color-scale",t)}function l(e){a("update-gradient-mode",e)}return(e,t)=>(w(),p("div",Er,[m("div",Ar,[t[5]||(t[5]=m("label",{for:"heatmap-color-scale"},"Color Scale:",-1)),m("select",{id:"heatmap-color-scale",value:e.selectedColorScale,"aria-label":"Color scale: "+e.selectedColorScale,onChange:n},t[4]||(t[4]=[U('<option value="blue-subtle" data-v-4b4f9d62>Blue (Subtle)</option><option value="green-red" data-v-4b4f9d62>Green-Red (Success)</option><option value="blue-yellow" data-v-4b4f9d62>Blue-Yellow (Performance)</option><option value="purple-orange" data-v-4b4f9d62>Purple-Orange (General)</option><option value="viridis" data-v-4b4f9d62>Viridis</option><option value="inferno" data-v-4b4f9d62>Inferno</option><option value="magma" data-v-4b4f9d62>Magma</option><option value="plasma" data-v-4b4f9d62>Plasma</option><option value="grayscale" data-v-4b4f9d62>Grayscale</option>',9)]),40,Mr)]),m("div",Rr,[t[6]||(t[6]=m("label",null,"Gradient Mode:",-1)),m("div",Nr,[m("button",{type:"button",class:x(["toggle-btn",{active:"global"===e.gradientMode}]),"aria-pressed":"global"===e.gradientMode,onClick:t[0]||(t[0]=e=>l("global"))}," Global ",10,$r),m("button",{type:"button",class:x(["toggle-btn",{active:"column"===e.gradientMode}]),"aria-pressed":"column"===e.gradientMode,onClick:t[1]||(t[1]=e=>l("column"))}," Per Column ",10,Fr),m("button",{type:"button",class:x(["toggle-btn",{active:"row"===e.gradientMode}]),"aria-pressed":"row"===e.gradientMode,onClick:t[2]||(t[2]=e=>l("row"))}," Per Row ",10,jr)])]),m("button",{type:"button",class:"fullscreen-btn",title:e.isFullscreen?"Exit Fullscreen":"Enter Fullscreen","aria-label":e.isFullscreen?"Exit fullscreen mode":"Enter fullscreen mode",onClick:t[3]||(t[3]=t=>e.$emit("toggle-fullscreen"))},S(e.isFullscreen?"⊟":"⊞"),9,Dr)]))}}),[["__scopeId","data-v-4b4f9d62"]]),Ur={class:"filters-row"},qr={key:0,class:"filter-group"},zr=["value"],Vr=["for"],Br=["id","onUpdate:modelValue","aria-label"],Hr={value:""},Kr=["value"],Gr={key:1,class:"filter-group"},Wr=["value"],Yr={class:"table-view"},Jr={key:0,class:"empty-state","data-testid":"empty-data-message"},Qr={key:1,class:"error-state","data-testid":"invalid-aggregation-error"},Xr={key:2,class:"pivot-table-container"},Zr={class:"pivot-table-grid responsive-table",role:"table"},es={role:"row"},ts={class:"corner-cell",role:"columnheader"},as={key:0,class:"total-header",role:"columnheader"},ns={class:"row-header",role:"rowheader"},ls=["data-testid","title","aria-label","role","onClick","onKeydown"],rs={key:0,class:"cell-content"},ss=["title"],is={class:"cell-value"},os={class:"error-message"},cs={key:1},us=Z(o({__name:"PivotTableCore",props:{apiCalls:{},trial:{default:null},config:{},maxTableRows:{default:1e4},showTotals:{type:Boolean,default:!0}},emits:["config-change","cell-click"],setup(e,{emit:t}){const n=e,s=t,i=l(!1),o=l("viridis"),u=l("global"),v=l({rowField:n.config?.rowField||"",columnField:n.config?.columnField||"",valueField:n.config?.valueField||"",aggregation:n.config?.aggregation||"mean"});c(()=>n.config,e=>{e&&Object.assign(v.value,e)},{deep:!0});const y=l({}),h=l([]),k=r(()=>Object.values(y.value).some(e=>""!==e)),C=R(tr(n.apiCalls,n.trial));let I=0;c(()=>n.apiCalls,e=>{if(0===e.length||0===I||e.length-I>=10){const t=h.value.length>0||k.value?h.value:e;C.value=tr(t,n.trial),I=e.length}},{immediate:!0});const T=R({});let P=0;c(()=>n.apiCalls.length,e=>{(0===e||0===P||e-P>=5)&&((()=>{if(0===n.apiCalls.length)return void(T.value={});const e={};n.apiCalls.forEach(t=>{if(n.trial&&t.configurationIndex<n.trial.configurationSnapshots.length){const a=n.trial.configurationSnapshots[t.configurationIndex].modelId||"Unknown";e.model||(e.model=new Set),e.model.add(a)}t.status&&(e.status||(e.status=new Set),e.status.add(t.status)),t.variables&&Object.entries(t.variables).forEach(([t,a])=>{a&&String(a).trim()&&(e[t]||(e[t]=new Set),e[t].add(String(a)))})});const t={};Object.entries(e).forEach(([e,a])=>{t[e]=Array.from(a).sort()}),T.value=t})(),P=e)},{immediate:!0});const E=r(()=>{const{model:e,status:t,...a}=T.value;return a});function M(){h.value=n.apiCalls.filter(e=>{if(y.value.model&&""!==y.value.model){if(!n.trial||e.configurationIndex>=n.trial.configurationSnapshots.length)return!1;if((n.trial.configurationSnapshots[e.configurationIndex].modelId||"Unknown")!==y.value.model)return!1}if(y.value.status&&""!==y.value.status&&e.status!==y.value.status)return!1;for(const[t,a]of Object.entries(y.value))if(a&&""!==a&&"model"!==t&&"status"!==t){const n=e.variables?.[t];if(n!==a)return!1}return!0})}function N(){y.value={},M()}c(()=>n.apiCalls,()=>{k.value?M():h.value=n.apiCalls},{immediate:!0});const $=r(()=>{const e=h.value.length>0||k.value?h.value:n.apiCalls;return 0===e.length?{rows:[],columns:[],totals:[],grandTotal:{value:0,count:0,apiCalls:[],rawValues:[]}}:function(e,t,a){const n=new Map,l=new Set,r=new Set;e.forEach(e=>{const s=String(ar(e,t.rowField,a)||"Unknown"),i=String(ar(e,t.columnField,a)||"Unknown");l.add(s),r.add(i),n.has(s)||n.set(s,new Map),n.get(s).has(i)||n.get(s).set(i,[]),n.get(s).get(i).push(e)});const s=e=>e.every(e=>!isNaN(Number(e))&&""!==e.trim())?e.sort((e,t)=>Number(e)-Number(t)):e.sort(),i=s(Array.from(l)),o=s(Array.from(r)),c=nr[t.aggregation];function u(e){const n=e.map(e=>ar(e,t.valueField,a));if(!c||"function"!=typeof c.calculate)return W.error("Invalid aggregation function:",t.aggregation,c),{value:null,count:e.length,apiCalls:e,rawValues:n,error:"Invalid aggregation function"};const l={nonNumeric:0,nullUndefined:0};return c.needsNumeric&&(l.nonNumeric=n.filter(e=>"number"!=typeof e).length),l.nullUndefined=n.filter(e=>null==e).length,{value:c.usesApiCalls?c.calculate(n,e):c.calculate(n),count:e.length,apiCalls:e,rawValues:n,excludedCounts:l}}const d=i.map(e=>{const t=[],a=[];return o.forEach(l=>{const r=n.get(e)?.get(l)||[];t.push(r.length>0?u(r):null),a.push(...r)}),{label:e,cells:t,total:u(a)}}),p=o.map(e=>{const t=[];return i.forEach(a=>{const l=n.get(a)?.get(e)||[];t.push(...l)}),u(t)});return{rows:d,columns:o,totals:p,grandTotal:u(e)}}(e,v.value,n.trial)}),j=r(()=>$.value.rows),{getCellStyle:D,getSummaryStyle:L,styleKey:U}=ur($,o,u);function B(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}function H(e,t,a){if(!a)return`${e} × ${t}: No data`;let n=`${e} × ${t}: ${lr(a,v.value.aggregation)} (${a.count} calls)`;if(a.excludedCounts){const e=[];a.excludedCounts.nonNumeric>0&&e.push(`${a.excludedCounts.nonNumeric} non-numeric responses excluded`),a.excludedCounts.nullUndefined>0&&e.push(`${a.excludedCounts.nullUndefined} null/empty responses`),e.length>0&&(n+=` | ${e.join(", ")}`)}return a.error&&(n+=` - ERROR: ${a.error}`),n}function K(e,t,a){if(!a)return`${e} by ${t}: No data`;const n=lr(a,v.value.aggregation);return a.error?`${e} by ${t}: ${n} with data integrity error: ${a.error}`:`${e} by ${t}: ${n} from ${a.count} API calls`}function G(e,t){"rowField"!==e&&"columnField"!==e&&"valueField"!==e&&"aggregation"!==e||(v.value[e]=t),s("config-change",{...v.value})}function Y(e,t,a){a&&s("cell-click",{row:e,column:t,cell:a})}function J(){i.value=!i.value,i.value?document.body.style.overflow="hidden":document.body.style.overflow=""}return d(()=>{i.value&&(document.body.style.overflow="")}),c([C,()=>n.apiCalls.length],([e])=>{if(n.apiCalls.length>0&&(!v.value.rowField||""===v.value.rowField)&&e.categorical.length>0){if(v.value.rowField=e.categorical.find(e=>"model"!==e&&"status"!==e&&"error_type"!==e)||e.categorical[0]||"model",v.value.columnField=v.value.columnField||"model",v.value.valueField=v.value.valueField||"extracted_value",!v.value.aggregation||""===v.value.aggregation){const e=n.apiCalls.slice(0,3).map(e=>ar(e,v.value.valueField,n.trial)).filter(e=>null!=e),t=e.length>0&&e.every(e=>"number"==typeof e);v.value.aggregation=t?"mean":"mode"}s("config-change",{...v.value})}},{immediate:!0}),(e,t)=>(w(),p("div",{class:x(["pivot-table-core",{fullscreen:i.value}])},[q([C.value,v.value],()=>(w(),p("div",null,[a(Pr,{config:v.value,"available-fields":C.value,onUpdateConfig:G},null,8,["config","available-fields"])])),t,0),a(Lr,{"selected-color-scale":o.value,"gradient-mode":u.value,"is-fullscreen":i.value,onUpdateColorScale:t[1]||(t[1]=e=>o.value=e),onUpdateGradientMode:t[2]||(t[2]=e=>u.value=e),onToggleFullscreen:J},null,8,["selected-color-scale","gradient-mode","is-fullscreen"]),Object.keys(T.value).length>0?q([T.value,y.value],()=>(w(),p("div",{key:0,class:"data-filters"},[m("div",Ur,[T.value.model&&T.value.model.length>1?(w(),p("div",qr,[t[7]||(t[7]=m("label",{for:"filter-model",class:"filter-label"},"Model:",-1)),F(m("select",{id:"filter-model","onUpdate:modelValue":t[3]||(t[3]=e=>y.value.model=e),class:"filter-select","aria-label":"Filter by model",onChange:M},[t[6]||(t[6]=m("option",{value:""},"All Models",-1)),(w(!0),p(b,null,_(T.value.model,e=>(w(),p("option",{key:e,value:e},S(e),9,zr))),128))],544),[[V,y.value.model]])])):f("",!0),(w(!0),p(b,null,_(E.value,(e,t)=>(w(),p("div",{key:t,class:"filter-group"},[m("label",{for:`filter-${t}`,class:"filter-label"},S(B(String(t)))+": ",9,Vr),F(m("select",{id:`filter-${t}`,"onUpdate:modelValue":e=>y.value[t]=e,class:"filter-select","aria-label":`Filter by ${B(String(t))}`,onChange:M},[m("option",Hr,"All "+S(B(String(t))),1),(w(!0),p(b,null,_(e,e=>(w(),p("option",{key:e,value:e},S(e),9,Kr))),128))],40,Br),[[V,y.value[t]]])]))),128)),T.value.status&&T.value.status.length>1?(w(),p("div",Gr,[t[9]||(t[9]=m("label",{for:"filter-status",class:"filter-label"},"Status:",-1)),F(m("select",{id:"filter-status","onUpdate:modelValue":t[4]||(t[4]=e=>y.value.status=e),class:"filter-select","aria-label":"Filter by status",onChange:M},[t[8]||(t[8]=m("option",{value:""},"All Statuses",-1)),(w(!0),p(b,null,_(T.value.status,e=>(w(),p("option",{key:e,value:e},S(e),9,Wr))),128))],544),[[V,y.value.status]])])):f("",!0),k.value?(w(),p("button",{key:2,type:"button",class:"clear-filters-btn",title:"Clear all filters","aria-label":"Clear all filters",onClick:N}," Clear Filters ")):f("",!0)])])),t,5):f("",!0),m("div",Yr,[0===n.apiCalls.length?(w(),p("div",Jr,t[10]||(t[10]=[m("p",null,"No data available for pivot table analysis.",-1)]))):v.value.aggregation in g(nr)?(w(),p("div",Xr,[m("table",Zr,[m("thead",null,[m("tr",es,[m("th",ts,S(B(v.value.rowField)||"Items")+" / "+S(B(v.value.columnField)||"Aggregated"),1),(w(!0),p(b,null,_($.value.columns,e=>(w(),p("th",{key:e,class:"column-header",role:"columnheader"},S(e),1))),128)),v.value.columnField&&e.showTotals?(w(),p("th",as," Total ")):f("",!0)])]),m("tbody",null,[(w(!0),p(b,null,_(j.value,t=>(w(),p("tr",{key:`${t.label}-${g(U)}`,class:"data-row",role:"row"},[m("td",ns,S(t.label),1),(w(!0),p(b,null,_(t.cells,(e,a)=>(w(),p("td",{key:`${a}-${g(U)}`,class:x(["data-cell",{"error-cell":e?.error}]),"data-testid":e?.error?"pivot-cell-error":"pivot-cell",style:O(g(D)(e,t.label,a)),title:H(t.label,$.value.columns[a],e),"aria-label":K(t.label,$.value.columns[a],e),role:e?.error?"alert":"cell",tabindex:"0",onClick:n=>Y(t.label,$.value.columns[a],e),onKeydown:[z(n=>Y(t.label,$.value.columns[a],e),["enter"]),z(A(n=>Y(t.label,$.value.columns[a],e),["prevent"]),["space"])]},[e?.error?(w(),p("div",rs,[m("span",{class:"error-indicator",title:e.error},"⚠️",8,ss),m("span",is,S(e?g(lr)(e,v.value.aggregation):"-"),1),m("div",os,S(e.error),1)])):(w(),p("span",cs,S(e?g(lr)(e,v.value.aggregation):"-"),1))],46,ls))),128)),v.value.columnField&&e.showTotals?(w(),p("td",{key:0,class:"total-cell",style:O(g(L)(t.total)),role:"cell"},S(g(lr)(t.total,v.value.aggregation)),5)):f("",!0)]))),128)),v.value.rowField&&e.showTotals?(w(),p("tr",{key:`totals-${g(U)}`,class:"total-row",role:"row"},[t[12]||(t[12]=m("td",{class:"row-header",role:"rowheader"},"Total",-1)),(w(!0),p(b,null,_($.value.totals,(e,t)=>(w(),p("td",{key:`total-${t}-${g(U)}`,class:"total-cell",style:O(g(L)(e)),role:"cell"},S(g(lr)(e,v.value.aggregation)),5))),128)),v.value.columnField?(w(),p("td",{key:0,class:"grand-total-cell",style:O(g(L)($.value.grandTotal)),role:"cell"},S(g(lr)($.value.grandTotal,v.value.aggregation)),5)):f("",!0)])):f("",!0)])])])):(w(),p("div",Qr,[m("p",null,"Invalid aggregation function: "+S(v.value.aggregation),1),t[11]||(t[11]=m("p",null,"Please select a valid aggregation method.",-1))]))])],2))}}),[["__scopeId","data-v-6da58b58"]]);function ds(e,t={}){const{embedded:a=!1,providedApiCalls:n}=t,r=l(n||[]),s=l(!0),i=l(null);let o=null;return c(e,(e,t)=>{e!==t&&(o&&(o.unsubscribe(),o=null),a&&!n&&e?(async e=>{s.value=!0,i.value=null;try{if(n)return r.value=n,void(s.value=!1);o=Ee(()=>de.apiCalls.where("trialId").equals(e).toArray()).subscribe({next:e=>{r.value=e,s.value=!1},error:t=>{W.error("Error loading API calls",t,{component:"useTrialApiCalls",trialId:e}),i.value=t instanceof Error?t:new Error("Failed to load API calls"),s.value=!1}})}catch(t){W.error("Error setting up API calls subscription",t,{component:"useTrialApiCalls",trialId:e}),i.value=t instanceof Error?t:new Error("Failed to setup API calls subscription"),s.value=!1}})(e):s.value=!1)},{immediate:!0}),d(()=>{o&&o.unsubscribe()}),{apiCalls:r,loading:s,error:i}}const ps={class:"trial-details-panel"},ms={key:0,class:"empty-details"},fs={class:"empty-illustration"},vs={key:1,class:"trial-details"},gs={class:"details-header-fixed"},ys={class:"header-top-row"},hs={class:"header-left"},bs={class:"trial-title"},_s={class:"trial-meta"},ws={class:"progress-inline"},ks={class:"progress-bar-small"},xs={class:"progress-text-inline"},Ss={class:"inline-stats"},Cs={class:"stat-item"},Is={class:"stat-item"},Os={class:"stat-item"},Ts={key:0,class:"stat-item"},Ps={class:"header-actions-row"},Es={class:"details-content-tabbed"},As={class:"tab-content status-tab-content"},Ms={class:"status-scroll-container"},Rs={key:0,class:"queue-status-section"},Ns={class:"tab-content task-view-tab"},$s={class:"tab-content pivot-tab-content"},Fs={class:"pivot-scroll-container"},js={class:"pivot-container"},Ds={key:1,class:"empty-state"},Ls=Z(o({__name:"TrialDetailsPanel",emits:["create-trial"],setup(e){const t=yt(),n=G(),i=s(),o=l(!1),c=l(null),u=l([]),d=l("status"),_=l(!1),x=r(()=>t.selectedTrial),C=r(()=>x.value?.id||void 0),{apiCalls:I,loading:T}=ds(C,{embedded:!0}),P=l({rowField:"",columnField:"model",valueField:"success",aggregation:"mean"}),E=r(()=>[...I.value].sort((e,t)=>{if("running"===e.status&&"running"!==t.status)return-1;if("running"!==e.status&&"running"===t.status)return 1;const a=e.completed||e.created||new Date(0);return(t.completed||t.created||new Date(0)).getTime()-a.getTime()}));function A(){if(!x.value||0===x.value.progress.total)return 0;const e=x.value.progress.completed-(x.value.progress.networkErrors||0);return Math.round(e/x.value.progress.total*100)}function M(){if(!x.value||!x.value.created)return"N/A";const e=new Date(x.value.started||x.value.created).getTime(),t=(x.value.completed?new Date(x.value.completed).getTime():Date.now())-e,a=Math.floor(t/36e5),n=Math.floor(t%36e5/6e4);return a>0?`${a}h ${n}m`:`${n}m`}function R(){if(!x.value||!x.value.started)return"calculating...";const e=Date.now()-new Date(x.value.started).getTime(),t=x.value.progress.completed;if(0===t)return"calculating...";const a=e/t*(x.value.progress.total-t),n=Math.floor(a/6e4),l=Math.floor(a%6e4/1e3);if(n>60){return`${Math.floor(n/60)}h ${n%60}m`}return`${n}m ${l}s`}async function N(){if(x.value)try{await n.pauseTrial(x.value.id),W.info("Trial paused",{trialId:x.value.id})}catch(e){W.error("Failed to pause trial",e),ce.error({title:"Failed to pause trial",content:e instanceof Error?e.message:"Unknown error"})}}async function $(){if(x.value&&!_.value){_.value=!0;try{const e=await n.getRunningTrials();e.length>0?ce.confirm({title:"Another trial is already running",content:`The trial "${e[0].name}" is currently running. Resuming this trial will pause it. Do you want to continue?`,okText:"Yes, resume this trial",cancelText:"No, keep current trial",onOk:async()=>{try{await n.resumeTrial(x.value.id),W.info("Trial resumed",{trialId:x.value.id})}catch(e){W.error("Failed to resume trial",e),ce.error({title:"Failed to resume trial",content:e instanceof Error?e.message:"Unknown error"})}finally{_.value=!1}},onCancel:()=>{_.value=!1}}):(await n.resumeTrial(x.value.id),W.info("Trial resumed",{trialId:x.value.id}),_.value=!1)}catch(e){W.error("Failed to check running trials",e),ce.error({title:"Failed to resume trial",content:e instanceof Error?e.message:"Unknown error"}),_.value=!1}}}async function F(){x.value&&ce.confirm({title:"Cancel Trial?",content:"Are you sure you want to cancel this trial? This action cannot be undone.",okText:"Cancel Trial",okType:"danger",cancelText:"Keep Running",onOk:async()=>{try{await n.cancelTrial(x.value.id),W.info("Trial cancelled",{trialId:x.value.id})}catch(e){W.error("Failed to cancel trial",e),ce.error({title:"Failed to cancel trial",content:e instanceof Error?e.message:"Unknown error"})}}})}async function j(){await async function(){if(!x.value)return;try{const{PythonExportService:e}=await le(async()=>{const{PythonExportService:e}=await Promise.resolve().then(()=>Bs);return{PythonExportService:e}},void 0,import.meta.url),t=e.validateTrialForExport(x.value);if(!t.valid)return void ce.error({title:"Cannot export trial",content:t.errors.join("\n")});const a=await e.generatePythonScript(x.value,{mode:"simple"}),n=new Blob([a],{type:"text/x-python"}),l=URL.createObjectURL(n),r=document.createElement("a");r.href=l,r.download=`auditomatic_${x.value.name.replace(/[^a-zA-Z0-9]/g,"_")}_${(new Date).toISOString().split("T")[0]}.py`,r.click(),URL.revokeObjectURL(l),W.info("Trial exported",{trialId:x.value.id})}catch(e){W.error("Failed to export trial",e),ce.error({title:"Failed to export trial",content:e instanceof Error?e.message:"Unknown error"})}}()}async function D(){if(!x.value)return;const e=await de.apiCalls.where("trialId").equals(x.value.id).toArray();o.value=!0,c.value=x.value,u.value=e}function L(){x.value&&i.push({name:"trials",query:{tab:"create",duplicate:x.value.id}})}function U(){x.value&&i.push({name:"trials",query:{tab:"create",duplicate:x.value.id,edit:"true"}})}async function q(){x.value&&ce.confirm({title:"Delete Trial?",content:`Are you sure you want to delete "${x.value.name}"? This action cannot be undone.`,okText:"Delete",okType:"danger",cancelText:"Cancel",onOk:async()=>{try{await n.deleteTrial(x.value.id),t.selectTrial(null),W.info("Trial deleted",{trialId:x.value.id})}catch(e){W.error("Failed to delete trial",e),ce.error({title:"Failed to delete trial",content:e instanceof Error?e.message:"Unknown error"})}}})}const z=e=>{P.value=e},V=e=>{if(!e.cell)return;const t=e.cell.apiCalls||[];0!==t.length&&ce.info({title:`${e.row} × ${e.column}`,width:"80%",class:"pivot-cell-details-modal",content:()=>B("div",{class:"pivot-cell-details"},[B("div",{class:"cell-summary"},[B("span",{class:"count"},`${t.length} calls`),B("span",{class:"separator"},"•"),B("span",{class:"aggregate"},`${"average"===P.value.aggregation?"Avg":"Total"}: ${e.cell.value.toFixed(2)}`)]),B("div",{class:"calls-list"},t.map((e,t)=>B("div",{key:e.id,class:"call-row"},[B("span",{class:"call-index"},`${t+1}.`),B("span",{class:"model"},e.model),B("span",{class:`status ${e.status}`},e.status),e.variables&&Object.entries(e.variables).length>0&&B("span",{class:"variables"},Object.entries(e.variables).map(([e,t])=>`${e}: ${t}`).join(", ")),e.extracted&&B("span",{class:"extracted"},`→ ${e.extracted}`),B("span",{class:"metrics"},[e.cost&&`$${e.cost.toFixed(3)}`,e.cost&&e.duration&&" • ",e.duration&&`${e.duration}ms`].filter(Boolean).join(""))])))])})};return(e,t)=>{const n=y("a-button"),l=y("a-tag"),r=y("a-menu-item"),s=y("a-menu"),i=y("a-dropdown"),C=y("a-tab-pane"),B=y("a-tabs");return w(),p(b,null,[m("div",ps,[x.value?(w(),p("div",vs,[m("div",gs,[m("div",ys,[m("div",hs,[m("h2",bs,S(x.value?x.value.name.replace(/\s*-\s*\d{1,2}\/\d{1,2}\/\d{4}/g,"").replace(/\s*\(Copy\)(\s*\(Copy\))*$/g,"").trim():""),1),m("div",_s,[a(l,{color:(H=x.value.status,{running:"blue",completed:"green",failed:"red",paused:"orange",draft:"default"}[H]||"default"),class:"status-tag"},{default:h(()=>[k(S(x.value.status.toUpperCase()),1)]),_:1},8,["color"]),m("div",ws,[m("div",ks,[m("div",{class:"progress-fill",style:O({width:(x.value&&0!==x.value.progress.total?Math.round(x.value.progress.completed/x.value.progress.total*100):0)+"%"})},null,4)]),m("span",xs,S(x.value.progress.completed)+"/"+S(x.value.progress.total)+" ("+S(A())+"%) ",1)]),m("div",Ss,[m("span",Cs,[a(g(re)),t[6]||(t[6]=m("span",null,"Duration:",-1)),m("strong",null,S(M()),1)]),m("span",Is,[a(g(vt)),t[7]||(t[7]=m("span",null,"Latency:",-1)),m("strong",null,S("3.6s"),1)]),m("span",Os,[a(g(qe)),t[8]||(t[8]=m("span",null,"Cost:",-1)),m("strong",null,"$"+S((x.value.estimatedCost||0).toFixed(2)),1)]),"running"===x.value.status||"paused"===x.value.status?(w(),p("span",Ts,[a(g(Ye)),t[9]||(t[9]=m("span",null,"Remaining:",-1)),m("strong",null,"~"+S(R()),1)])):f("",!0)])])])]),m("div",Ps,["running"===x.value.status?(w(),p(b,{key:0},[a(n,{onClick:N,size:"large",class:"action-button"},{icon:h(()=>[a(g(nt))]),default:h(()=>[t[10]||(t[10]=k(" Pause "))]),_:1,__:[10]}),a(n,{onClick:F,danger:"",size:"large",class:"action-button"},{icon:h(()=>[a(g(dt))]),default:h(()=>[t[11]||(t[11]=k(" Cancel "))]),_:1,__:[11]})],64)):"paused"===x.value.status?(w(),p(b,{key:1},[a(n,{type:"primary",onClick:$,disabled:_.value,size:"large",class:"action-button"},{icon:h(()=>[_.value?(w(),v(g(ne),{key:0,spin:""})):(w(),v(g(ie),{key:1}))]),default:h(()=>[k(" "+S(_.value?"Resuming...":"Resume"),1)]),_:1},8,["disabled"]),a(n,{onClick:F,danger:"",size:"large",class:"action-button"},{icon:h(()=>[a(g(dt))]),default:h(()=>[t[12]||(t[12]=k(" Cancel "))]),_:1,__:[12]})],64)):f("",!0),a(i,null,{overlay:h(()=>[a(s,null,{default:h(()=>[a(r,{onClick:D},{default:h(()=>[a(g(Ae)),t[14]||(t[14]=k(" Export Data "))]),_:1,__:[14]}),a(r,{onClick:j},{default:h(()=>[a(g(je)),t[15]||(t[15]=k(" Export Python Script "))]),_:1,__:[15]})]),_:1})]),default:h(()=>[a(n,{size:"large",class:"action-button"},{icon:h(()=>[a(g(be))]),default:h(()=>[t[13]||(t[13]=k(" Export ")),a(g(he))]),_:1,__:[13]})]),_:1}),a(n,{onClick:L,size:"large",class:"action-button"},{icon:h(()=>[a(g(_e))]),default:h(()=>[t[16]||(t[16]=k(" Duplicate "))]),_:1,__:[16]}),"draft"===x.value.status?(w(),v(n,{key:2,onClick:U,size:"large",class:"action-button"},{icon:h(()=>[a(g(oe))]),default:h(()=>[t[17]||(t[17]=k(" Edit "))]),_:1,__:[17]})):f("",!0),a(n,{onClick:q,danger:"",size:"large",class:"action-button"},{icon:h(()=>[a(g(we))]),default:h(()=>[t[18]||(t[18]=k(" Delete "))]),_:1,__:[18]})])]),m("div",Es,[a(B,{activeKey:d.value,"onUpdate:activeKey":t[1]||(t[1]=e=>d.value=e),class:"detail-tabs","tab-bar-style":{marginBottom:0}},{default:h(()=>[a(C,{key:"status",tab:"Status"},{default:h(()=>[m("div",As,[m("div",Ms,[a(Ln,{trial:x.value,compact:!1},null,8,["trial"]),"running"===x.value.status||"paused"===x.value.status?(w(),p("div",Rs,[t[19]||(t[19]=m("h3",{class:"section-title"},"Queue Status",-1)),a(er,{"trial-id":x.value.id,trial:x.value,compact:!1},null,8,["trial-id","trial"])])):f("",!0)])])]),_:1}),a(C,{key:"tasks",tab:"Task View"},{default:h(()=>[m("div",Ns,[a(fn,{trial:x.value,"api-calls":E.value,loading:g(T)},null,8,["trial","api-calls","loading"])])]),_:1}),a(C,{key:"pivot",tab:"Pivot Table"},{default:h(()=>[m("div",$s,[m("div",Fs,[m("div",js,[g(I).length>0?(w(),v(us,{key:0,"api-calls":g(I),trial:x.value,config:P.value,"show-totals":!0,onConfigChange:z,onCellClick:V},null,8,["api-calls","trial","config"])):(w(),p("div",Ds,t[20]||(t[20]=[m("p",null,"No data available for pivot table analysis.",-1)])))])])])]),_:1})]),_:1},8,["activeKey"])])])):(w(),p("div",ms,[m("div",fs,[a(g(ye),{style:{"font-size":"64px",color:"var(--color-primary-alpha)"}})]),t[4]||(t[4]=m("h3",null,"Select a trial to view details",-1)),t[5]||(t[5]=m("p",null,"Choose from the list or create a new one",-1)),a(n,{type:"primary",class:"create-trial-button-large",onClick:t[0]||(t[0]=t=>e.$emit("create-trial"))},{icon:h(()=>[a(g(J))]),default:h(()=>[t[3]||(t[3]=k(" Create New Trial "))]),_:1,__:[3]})]))]),o.value?(w(),v(ul,{key:0,trial:c.value,"api-calls":u.value,onClose:t[2]||(t[2]=e=>o.value=!1)},null,8,["trial","api-calls"])):f("",!0)],64);var H}}}),[["__scopeId","data-v-f0e642c5"]]);class Us{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){let t={};if("aligned"===e.executionContext?.mode){const a=e.variableSnapshots.find(e=>"tabular"===e.category);if(a?.data.tabularData){const{columns:e,rows:n}=a.data.tabularData;t.__tabular__=["true"],t.__columns__=e,t.__rows__=n.map(e=>JSON.stringify(e)),e.forEach(e=>{const a=[...new Set(n.map(t=>String(t[e]||"")))];t[e]=a.sort()})}}else{const a=new ke({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e);t=this.extractUniqueVariables(a)}const a=e.configurationSnapshots.map(e=>({provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:e.parameters})),n=new Set(a.map(e=>e.provider)),l={};for(const r of n){const e=ue.getProvider(r);e&&(l[r]=this.buildProviderConfig(r,e))}return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:t},models:a,providerConfigs:l}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static buildProviderConfig(e,t){const a=t.requestTransform||{},n=t.auth||{type:"none"};let l="direct";"messages"===a.promptKey&&a.wrapPrompt?l="messages":"input"===a.promptKey&&(l="input");let r,s,i="root";"ollama-chat"===e?(i="options",r={max_tokens:"num_predict",max_completion_tokens:"num_predict"}):"ollama-generate"===e&&(i="mixed",s={root:["model","prompt","stream","format","raw"],options:["temperature","num_predict","top_k","top_p"]},r={max_tokens:"num_predict",max_completion_tokens:"num_predict"});const o=Object.values(t.responseModes||{})[0],c=this.parseResponsePath(o?.responseTransform?.contentPath),u=o?.responseTransform?.fallbackPaths?.map(e=>this.parseResponsePath(e)),d=t.api.baseUrl+(t.api.endpoints.chat||t.api.endpoints.generate||"");return{name:t.name,endpoint:d,auth:{type:n.type,header:n.header,prefix:"bearer"===n.type?"Bearer":void 0},headers:t.headers,request:{modelPrefixStrip:!0,promptFormat:l,messageRole:a.messageRole,paramLocation:i,paramRenames:r,mixedParams:s},response:{successPath:c,fallbackPaths:u,errorPath:["error","message"]}}}static parseResponsePath(e){return e?e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t}):["content"]}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),r=JSON.stringify(e.providerConfigs,null,4);return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Simple Mode\n=====================================\nGenerated by Auditomatic Lite v${xe.short} on ${a}\n\nThis script reproduces your experiment by generating API calls from variables.\nPerfect for understanding, modifying, and extending your experiments.\n\nOriginal trial: ${t}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${Object.keys(e.providerConfigs).map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${e}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Provider configurations (how to talk to each API)\nPROVIDER_CONFIGS = ${r}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef make_api_call(provider_id: str, model: str, prompt: str, params: dict) -> dict:\n    """\n    Universal API caller that handles all provider quirks.\n    \n    Returns dict with 'success', 'content', 'error', and timing info.\n    """\n    config = PROVIDER_CONFIGS[provider_id]\n    \n    # Build headers\n    headers = {"Content-Type": "application/json"}\n    \n    # Add authentication\n    auth = config["auth"]\n    if auth["type"] == "bearer":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = f"{auth['prefix']} {api_key}"\n    elif auth["type"] == "header":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = api_key\n    \n    # Add provider-specific headers\n    if config.get("headers"):\n        headers.update(config["headers"])\n    \n    # Build request body\n    request = config["request"]\n    \n    # Strip provider prefix from model\n    if request.get("modelPrefixStrip"):\n        model = model.split(":", 1)[-1]\n    \n    body = {"model": model}\n    \n    # Format prompt\n    if request["promptFormat"] == "messages":\n        body["messages"] = [{"role": request.get("messageRole", "user"), "content": prompt}]\n    elif request["promptFormat"] == "direct":\n        body["prompt"] = prompt\n    elif request["promptFormat"] == "input":\n        body["input"] = prompt\n    \n    # Handle parameters\n    processed_params = params.copy()\n    \n    # Apply renames\n    if request.get("paramRenames"):\n        for old_key, new_key in request["paramRenames"].items():\n            if old_key in processed_params:\n                processed_params[new_key] = processed_params.pop(old_key)\n    \n    # Place parameters\n    if request["paramLocation"] == "root":\n        body.update(processed_params)\n    elif request["paramLocation"] == "options":\n        body["options"] = processed_params\n    elif request.get("mixedParams"):\n        mixed = request["mixedParams"]\n        for key, value in processed_params.items():\n            if key in mixed.get("root", []):\n                body[key] = value\n            else:\n                if "options" not in body:\n                    body["options"] = {}\n                body["options"][key] = value\n    \n    # Make request\n    start_time = time.time()\n    try:\n        response = requests.post(\n            config["endpoint"],\n            headers=headers,\n            json=body,\n            timeout=30\n        )\n        latency_ms = (time.time() - start_time) * 1000\n        \n        if response.ok:\n            data = response.json()\n            content = extract_from_path(data, config["response"]["successPath"])\n            \n            # Try fallback paths\n            if content is None and config["response"].get("fallbackPaths"):\n                for path in config["response"]["fallbackPaths"]:\n                    content = extract_from_path(data, path)\n                    if content is not None:\n                        break\n            \n            return {\n                "success": True,\n                "content": content or "",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n        else:\n            return {\n                "success": False,\n                "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n            \n    except Exception as e:\n        return {\n            "success": False,\n            "error": str(e),\n            "latency_ms": (time.time() - start_time) * 1000\n        }\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Check if this is tabular/spreadsheet data (row-by-row execution)\n    if "__tabular__" in variables and variables["__tabular__"] == ["true"]:\n        # Row-by-row execution for spreadsheet imports\n        rows = [json.loads(row) for row in variables["__rows__"]]\n        \n        for row in rows:\n            # Replace variables in template with values from this row\n            prompt = template\n            var_dict = {}\n            \n            for col, value in row.items():\n                var_dict[col] = str(value) if value is not None else ""\n                prompt = prompt.replace(f"{{{{{col}}}}}", var_dict[col])\n            \n            yield prompt, var_dict\n    else:\n        # Standard cartesian product execution\n        # Get variable names from template\n        import re\n        var_names = re.findall(r'{{(\\w+)}}', template)\n        \n        # Filter out special variables\n        var_names = [v for v in var_names if not v.startswith("__")]\n        \n        # Generate all combinations\n        from itertools import product\n        \n        var_lists = [variables[var] for var in var_names if var in variables]\n        if not var_lists:\n            yield template, {}\n            return\n            \n        for values in product(*var_lists):\n            var_dict = dict(zip(var_names, values))\n            \n            # Replace variables in template\n            prompt = template\n            for var, val in var_dict.items():\n                prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n            \n            yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(\n                model_config["provider"],\n                model_config["modelId"],\n                prompt,\n                model_config["parameters"]\n            )\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": result.get("content", ""),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                "status_code": result.get("status_code", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {result['content'][:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_results_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider not in API_KEYS or not API_KEYS[provider]:\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(set(missing_keys)))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns:\n            print(f"Avg latency: {df['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class qs{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=[],a=new Ie,n=new ke({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),l=Se(e);let r=0;for(const i of e.configurationSnapshots){const o=ue.getProvider(i.provider);if(o)for(const c of n){const n=l>1?Ce():void 0;let u=e.designSnapshot.promptTemplate;for(const[e,t]of Object.entries(c.variables))u=u.replace(new RegExp(`{{${e}}}`,"g"),t);for(let e=0;e<l;e++){r++;try{const s={id:"export-config",name:i.name,provider:i.provider,model:i.modelId,params:i.parameters,created_at:new Date},d=a.buildAPIRequest(s,u),p={};for(const[e,t]of Object.entries(d.headers))"Authorization"===e&&t.startsWith("Bearer ")?p[e]=`Bearer $${i.provider.split("-")[0].toUpperCase()}_API_KEY`:e===o.auth.header&&"header"===o.auth.type?p[e]=`$${i.provider.split("-")[0].toUpperCase()}_API_KEY`:p[e]=t;const m=this.parseResponsePath(this.getDefaultResponsePath(i.provider));t.push({id:`call_${String(r).padStart(3,"0")}`,provider:i.provider,endpoint:d.url,headers:p,body:d.body,responsePath:m,metadata:{variables:c.variables,modelName:i.modelId,configName:i.name,...l>1&&{repeatIndex:e,repeatGroupId:n}}})}catch(s){W.warn("Failed to build API call for config",{configName:i.name,error:s})}}}}return{apiCalls:t,...e.repeatConfig&&{repeatConfig:{callsPerPrompt:e.repeatConfig.callsPerPrompt,delayBetweenRepeats:e.repeatConfig.delayBetweenRepeats}}}}static parseResponsePath(e){return e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t})}static getDefaultResponsePath(e){switch(e){case"openai-chat":case"openrouter":return"choices[0].message.content";case"openai-responses":return"output[0].content[0].text";case"anthropic":return"content[0].text";case"ollama-chat":return"message.content";case"ollama-generate":return"response";default:return"content"}}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.apiCalls,null,4),l=[...new Set(e.apiCalls.map(e=>e.provider))],r=e.repeatConfig?`\nRepeat configuration: ${e.repeatConfig.callsPerPrompt} calls per prompt${e.repeatConfig.delayBetweenRepeats?`, ${e.repeatConfig.delayBetweenRepeats}ms delay`:""}`:"";return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Literal Mode\n======================================\nGenerated by Auditomatic Lite v${xe.short} on ${a}\n\nThis script contains the EXACT API calls from your experiment.\nPerfect for bit-for-bit reproduction, debugging, and comparing results.\n\nOriginal trial: ${t}\nTotal API calls: ${e.apiCalls.length}${r}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${l.map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${t}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Pre-computed API calls from your experiment\nAPI_CALLS = ${n}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef execute_literal_calls():\n    """Execute pre-serialized API calls exactly as specified"""\n    results = []\n    total = len(API_CALLS)\n    \n    print(f"Executing {total} pre-computed API calls...")\n    print("=" * 60)\n    \n    for i, call in enumerate(API_CALLS):\n        print(f"[{i+1}/{total}] {call['metadata']['configName']} - ", end="")\n        \n        # Replace API key placeholders in headers\n        headers = {}\n        for key, value in call["headers"].items():\n            if "\\$" in str(value):\n                # Extract provider name from placeholder\n                for provider_key, api_key in API_KEYS.items():\n                    placeholder = f"\\\${provider_key}_API_KEY"\n                    if placeholder in value:\n                        headers[key] = value.replace(placeholder, api_key)\n                        break\n                else:\n                    headers[key] = value\n            else:\n                headers[key] = value\n        \n        # Check if we have required API key\n        provider_base = call["provider"].split("-")[0].upper()\n        if provider_base in ["OPENAI", "ANTHROPIC", "OPENROUTER"] and not API_KEYS.get(provider_base):\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": f"No API key for {provider_base}",\n                "latency_ms": 0,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ No API key")\n            continue\n        \n        # Make the exact API call\n        start_time = time.time()\n        try:\n            response = requests.post(\n                call["endpoint"],\n                headers=headers,\n                json=call["body"],\n                timeout=30\n            )\n            latency_ms = (time.time() - start_time) * 1000\n            \n            if response.ok:\n                data = response.json()\n                content = extract_from_path(data, call["responsePath"])\n                \n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": content or "",\n                    "success": True,\n                    "error": "",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    "full_response": json.dumps(data)[:500],  # First 500 chars\n                    **call["metadata"]["variables"]\n                })\n                print(f"✓ {(content or '')[:30]}")\n            else:\n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": "",\n                    "success": False,\n                    "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    **call["metadata"]["variables"]\n                })\n                print(f"✗ HTTP {response.status_code}")\n                \n        except Exception as e:\n            latency_ms = (time.time() - start_time) * 1000\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": str(e)[:200],\n                "latency_ms": latency_ms,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ {str(e)[:30]}")\n        \n        # Handle repeat delays if configured\n        if "repeatIndex" in call["metadata"] and call["metadata"]["repeatIndex"] > 0:\n            # Check if there's a repeat delay configured\n            delay_ms = ${e.repeatConfig?.delayBetweenRepeats||0}\n            if delay_ms > 0:\n                time.sleep(delay_ms / 1000.0)\n        \n        # Rate limiting\n        time.sleep(0.1)\n    \n    return results\n\ndef extract_prompt_from_body(body: dict) -> str:\n    """Extract the prompt from various request body formats"""\n    # Messages format (OpenAI, Anthropic, etc)\n    if "messages" in body and isinstance(body["messages"], list):\n        for msg in body["messages"]:\n            if msg.get("role") == "user":\n                return msg.get("content", "")\n    \n    # Direct prompt format (Ollama generate)\n    if "prompt" in body:\n        return body["prompt"]\n    \n    # Input format (OpenAI responses)\n    if "input" in body:\n        return body["input"]\n    \n    return ""\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    # Drop full_response column for cleaner output (except JSON)\n    if format != "json" and "full_response" in df.columns:\n        df = df.drop(columns=["full_response"])\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_literal_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    required_providers = set(call["provider"].split("-")[0].upper() for call in API_CALLS)\n    missing_keys = []\n    for provider in required_providers:\n        if provider not in ["OLLAMA"] and not API_KEYS.get(provider):\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(missing_keys))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Execute all calls\n    results = execute_literal_calls()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if df['success'].any():\n            print(f"Avg latency (successful): {df[df['success']]['latency_ms'].mean():.1f}ms")\n        \n        # Group by model\n        print(f"\\nBy Model:")\n        model_summary = df.groupby('config_name')['success'].agg(['count', 'sum', 'mean'])\n        model_summary.columns = ['total', 'successful', 'success_rate']\n        print(model_summary)\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class zs{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new ke({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>{let t,a="text";return e.parameters.response_format?(a="json_mode",t={response_format:e.parameters.response_format}):e.parameters.tools&&(a="function_calling",t={tools:e.parameters.tools,tool_choice:e.parameters.tool_choice}),{provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:this.filterCoreParams(e.parameters),responseMode:a,responseModeParams:t}}),l=new Set(n.map(e=>e.provider)),r={"openai-chat":"openai","openai-responses":"openai",anthropic:"anthropic",openrouter:"openai","ollama-chat":"ollama","ollama-generate":"ollama"},s=[...new Set(Array.from(l).map(e=>r[e]).filter(Boolean))],i={"openai-chat":"OPENAI","openai-responses":"OPENAI",anthropic:"ANTHROPIC",openrouter:"OPENROUTER","ollama-chat":"","ollama-generate":""},o=[...new Set(Array.from(l).map(e=>i[e]).filter(Boolean))];return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerLibraries:{required:s,apiKeys:o}}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static filterCoreParams(e){const t={...e};return delete t.response_format,delete t.tools,delete t.tool_choice,t}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),r=["import os","import json","import time","import pandas as pd","from datetime import datetime"];return e.providerLibraries.required.includes("openai")&&r.push("from openai import OpenAI"),e.providerLibraries.required.includes("anthropic")&&r.push("from anthropic import Anthropic"),e.providerLibraries.required.includes("ollama")&&r.push("import ollama"),`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Native Mode\n=====================================\nGenerated by Auditomatic Lite v${xe.short} on ${a}\n\nThis script uses native Python libraries for each provider.\nCleanest code, best for production use.\n\nOriginal trial: ${t}\nRequired packages: ${e.providerLibraries.required.join(", ")}\n"""\n\n${r.join("\n")}\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\n${e.providerLibraries.apiKeys.map(e=>`os.environ.setdefault("${e}_API_KEY", "")  # Set your ${e} API key`).join("\n")}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\n# Initialize clients\nclients = {}\n\ndef get_client(provider):\n    """Get or create client for provider"""\n    if provider not in clients:\n        if provider in ["openai-chat", "openai-responses"]:\n            clients[provider] = OpenAI()\n        elif provider == "anthropic":\n            clients[provider] = Anthropic()\n        elif provider == "openrouter":\n            clients[provider] = OpenAI(\n                api_key=os.environ.get("OPENROUTER_API_KEY"),\n                base_url="https://openrouter.ai/api/v1"\n            )\n        # Ollama doesn't need a client\n    return clients.get(provider)\n\ndef make_api_call(model_config: dict, prompt: str) -> dict:\n    """Make API call using native provider library"""\n    provider = model_config["provider"]\n    model = model_config["modelId"]\n    params = model_config["parameters"].copy()\n    \n    try:\n        start_time = time.time()\n        \n        if provider == "openai-chat" or provider == "openrouter":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["response_format"] = {"type": "json_object"}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content based on response mode\n            if model_config["responseMode"] == "function_calling" and response.choices[0].message.tool_calls:\n                content = response.choices[0].message.tool_calls[0].function.arguments\n                if isinstance(content, str):\n                    content = json.loads(content)\n            else:\n                content = response.choices[0].message.content\n            \n        elif provider == "openai-responses":\n            client = get_client(provider)\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["text"] = {"format": {"type": "json_object"}}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.responses.create(\n                model=model,\n                input=prompt,\n                **params\n            )\n            \n            # Extract content\n            output = response.output\n            if isinstance(output, list) and len(output) > 0:\n                if hasattr(output[0], 'content') and isinstance(output[0].content, list):\n                    content = output[0].content[0].text if hasattr(output[0].content[0], 'text') else str(output[0].content[0])\n                else:\n                    content = str(output[0])\n            else:\n                content = str(output)\n            \n        elif provider == "anthropic":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.messages.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content\n            if model_config["responseMode"] == "function_calling" and hasattr(response.content[0], 'input'):\n                content = response.content[0].input\n            else:\n                content = response.content[0].text\n            \n        elif provider == "ollama-chat":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.chat(\n                model=model,\n                messages=[{"role": "user", "content": prompt}],\n                **params\n            )\n            \n            # Extract content\n            content = response["message"]["content"]\n            \n        elif provider == "ollama-generate":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.generate(\n                model=model,\n                prompt=prompt,\n                **params\n            )\n            \n            # Extract content\n            content = response["response"]\n        \n        else:\n            raise ValueError(f"Unknown provider: {provider}")\n        \n        latency_ms = (time.time() - start_time) * 1000\n        \n        return {\n            "success": True,\n            "content": content,\n            "latency_ms": latency_ms\n        }\n        \n    except Exception as e:\n        latency_ms = (time.time() - start_time) * 1000\n        return {\n            "success": False,\n            "content": "",\n            "error": str(e),\n            "latency_ms": latency_ms\n        }\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(model_config, prompt)\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": str(result.get("content", "")),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {str(result['content'])[:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: list, format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_native_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for required packages\n    required = ${JSON.stringify(e.providerLibraries.required)}\n    missing = []\n    for lib in required:\n        try:\n            __import__(lib)\n        except ImportError:\n            missing.append(lib)\n    \n    if missing:\n        print(f"ERROR: Missing required packages: {', '.join(missing)}")\n        print(f"Install with: pip install {' '.join(missing)}")\n        return\n    \n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider in ["openai-chat", "openai-responses"] and not os.environ.get("OPENAI_API_KEY"):\n            missing_keys.append("OPENAI_API_KEY")\n        elif provider == "anthropic" and not os.environ.get("ANTHROPIC_API_KEY"):\n            missing_keys.append("ANTHROPIC_API_KEY")\n        elif provider == "openrouter" and not os.environ.get("OPENROUTER_API_KEY"):\n            missing_keys.append("OPENROUTER_API_KEY")\n    \n    if missing_keys:\n        print(f"WARNING: Missing API keys: {', '.join(set(missing_keys))}")\n        print("Set them in the script or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns and df['success'].any():\n            print(f"Avg latency: {df[df['success']]['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class Vs{static async generatePythonScript(e,t){try{const a=t||this.getDefaultOptions(),n=this.validateTrialForExport(e);if(!n.valid)throw new Error(`Trial validation failed: ${n.errors.join(", ")}`);switch(a.mode){case"simple":return Us.generate(e);case"literal":return qs.generate(e);case"native":return zs.generate(e);default:throw new Error(`Unknown export mode: ${a.mode}`)}}catch(a){throw new Error(`Failed to generate Python export: ${a instanceof Error?a.message:String(a)}`)}}static async downloadPythonScript(e,t){const a=await this.generatePythonScript(e,t),n=t||this.getDefaultOptions(),l=new Blob([a],{type:"text/x-python"}),r=URL.createObjectURL(l),s=document.createElement("a");s.href=r,s.download=this.generateFilename(e,n.mode),document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(r)}static validateTrialForExport(e){const t=[];return e.designSnapshot?e.designSnapshot.promptTemplate||t.push("Design missing prompt template"):t.push("Trial missing design snapshot"),e.configurationSnapshots&&0!==e.configurationSnapshots.length?e.configurationSnapshots.forEach((e,a)=>{e.provider||t.push(`Configuration ${a+1} missing provider`),e.modelId||t.push(`Configuration ${a+1} missing model`),e.parameters||t.push(`Configuration ${a+1} missing parameters`)}):t.push("Trial missing model configurations"),e.variableSnapshots||t.push("Trial missing variable snapshots"),{valid:0===t.length,errors:t}}static getExportSummary(e){const t=new Set(e.configurationSnapshots.map(e=>e.provider)),a=e.totalCombinations||0;return{apiCallCount:e.configurationSnapshots.length*a,providersUsed:Array.from(t),variableCombinations:a,configurations:e.configurationSnapshots.length}}static getDefaultOptions(){return{mode:"simple"}}static generateFilename(e,t){const a=e.name||`trial_${e.id}`,n=(new Date).toISOString().split("T")[0];return`${a.toLowerCase().replace(/[^a-z0-9]/g,"_")}_${t}_${n}.py`}}const Bs=Object.freeze(Object.defineProperty({__proto__:null,PythonExportService:Vs},Symbol.toStringTag,{value:"Module"})),Hs={class:"trial-info"},Ks={class:"trial-stats"},Gs={class:"export-section"},Ws={class:"mode-content"},Ys={class:"mode-content"},Js={class:"mode-content"},Qs={class:"export-section"},Xs={class:"preview-content"},Zs={class:"preview-info"},ei=o({__name:"PythonExportModal",props:{trial:{}},emits:["close","exported"],setup(e,{emit:t}){const n=e,s=t,i=l("simple"),o=l(!1),c=r(()=>n.trial.progress.total),u=r(()=>n.trial.configurationSnapshots?.length||0),d=r(()=>n.trial.totalCombinations||0),p=r(()=>{const e=.05*d.value+.3*u.value;return Math.round(15+e)}),f=r(()=>{const e=.5*c.value;return Math.round(10+e)}),g=r(()=>{const e=.05*d.value+.2*u.value;return Math.round(12+e)}),b=r(()=>{const e=n.trial.name.toLowerCase().replace(/\s+/g,"_"),t=(new Date).toISOString().split("T")[0];return`${e}_${i.value}_${t}.py`}),_=r(()=>{if("simple"===i.value){return 300+(d.value+10*u.value)}if("native"===i.value){return 250+(d.value+8*u.value)}return 200+15*c.value});async function x(){o.value=!0;try{const e={mode:i.value};await Vs.downloadPythonScript(n.trial,e),s("exported",b.value),s("close")}catch(e){W.error("Export failed",e),alert("Export failed: "+(e instanceof Error?e.message:"Unknown error"))}finally{o.value=!1}}return(e,t)=>{const n=y("a-button"),l=y("a-tag"),r=y("a-radio"),s=y("a-radio-group"),C=y("a-typography-text");return w(),v(Re,{"model-value":!0,title:"Export Python Script",size:"full","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("close"))},{footer:h(()=>[a(n,{onClick:t[0]||(t[0]=t=>e.$emit("close")),size:"large","data-testid":"btn-cancel-python-export","aria-label":"Cancel Python export"},{default:h(()=>t[3]||(t[3]=[k(" Cancel ")])),_:1,__:[3]}),a(n,{type:"primary",onClick:x,loading:o.value,size:"large","data-testid":"btn-confirm-python-export","data-mode":i.value,"aria-label":`Export Python script in ${i.value} mode`},{default:h(()=>t[4]||(t[4]=[k(" Export Script ")])),_:1,__:[4]},8,["loading","data-mode","aria-label"])]),default:h(()=>[m("div",Hs,[m("h3",null,S(e.trial.name),1),m("div",Ks,[a(l,null,{default:h(()=>[k(S(c.value)+" API calls",1)]),_:1}),a(l,null,{default:h(()=>[k(S(u.value)+" configurations",1)]),_:1}),a(l,null,{default:h(()=>[k(S(d.value)+" variable combinations",1)]),_:1})])]),m("div",Gs,[t[11]||(t[11]=m("h4",null,"Export Mode",-1)),a(s,{value:i.value,"onUpdate:value":t[1]||(t[1]=e=>i.value=e),class:"mode-options","data-testid":"radiogroup-export-mode","aria-label":"Select Python export mode"},{default:h(()=>[a(r,{value:"simple",class:"mode-radio","data-testid":"radio-mode-simple","aria-label":"Simple script mode"},{default:h(()=>[m("div",Ws,[t[5]||(t[5]=m("div",{class:"mode-title"},"Simple Script",-1)),t[6]||(t[6]=m("div",{class:"mode-description"}," Educational script with variables as lists. Easy to understand, modify, and extend. Perfect for learning how AI APIs work. ",-1)),a(l,{color:"blue",size:"small"},{default:h(()=>[k("~"+S(p.value)+"KB",1)]),_:1})])]),_:1}),a(r,{value:"literal",class:"mode-radio","data-testid":"radio-mode-literal","aria-label":"Literal reproduction mode"},{default:h(()=>[m("div",Ys,[t[7]||(t[7]=m("div",{class:"mode-title"},"Literal Reproduction",-1)),t[8]||(t[8]=m("div",{class:"mode-description"}," Exact API calls pre-computed. Bit-for-bit reproduction of your experiment. Best for debugging and comparing results. ",-1)),a(l,{color:"blue",size:"small"},{default:h(()=>[k("~"+S(f.value)+"KB",1)]),_:1})])]),_:1}),a(r,{value:"native",class:"mode-radio","data-testid":"radio-mode-native","aria-label":"Native libraries mode"},{default:h(()=>[m("div",Js,[t[9]||(t[9]=m("div",{class:"mode-title"},"Native Libraries",-1)),t[10]||(t[10]=m("div",{class:"mode-description"}," Uses official Python SDKs (openai, anthropic, ollama). Cleanest code, best for production use. Requires: pip install openai anthropic ollama ",-1)),a(l,{color:"green",size:"small"},{default:h(()=>[k("~"+S(g.value)+"KB",1)]),_:1})])]),_:1})]),_:1},8,["value"])]),t[13]||(t[13]=m("div",{class:"export-section"},[m("h4",null,"Output Format"),m("div",{class:"format-info"},[m("p",null,"Both scripts save results using pandas in your choice of format:"),m("ul",null,[m("li",null,[m("strong",null,"CSV"),k(" - Universal format, opens in Excel/Google Sheets")]),m("li",null,[m("strong",null,"Excel"),k(" - Native Excel format")]),m("li",null,[m("strong",null,"JSON"),k(" - For programmatic access")]),m("li",null,[m("strong",null,"Parquet"),k(" - Efficient compressed format")]),m("li",null,[m("strong",null,"HTML"),k(" - For web viewing")]),m("li",null,[m("strong",null,"Markdown"),k(" - For documentation")]),m("li",null,[m("strong",null,"Stata"),k(" - For statistical analysis")]),m("li",null,[m("strong",null,"Pickle"),k(" - Python native format")])])])],-1)),m("div",Qs,[t[12]||(t[12]=m("h4",null,"Script Preview",-1)),m("div",Xs,[a(C,{code:"",class:"preview-filename"},{default:h(()=>[k(S(b.value),1)]),_:1}),m("div",Zs,[a(l,{size:"small"},{default:h(()=>[k(S(_.value)+" lines",1)]),_:1}),a(l,{size:"small"},{default:h(()=>[k(S(i.value)+" mode",1)]),_:1})])])])]),_:1,__:[13]})}}}),ti=Z(o({__name:"ResizableDivider",props:{minSize:{default:300},maxSize:{default:600},currentWidth:{default:380},disabled:{type:Boolean,default:!1}},emits:["resize","resizeStart","resizeEnd","reset"],setup(e,{emit:t}){const a=e,n=t,r=l(!1);return(e,t)=>(w(),p("div",{class:x(["resizable-divider",{resizing:r.value,disabled:e.disabled}]),onMousedown:t[0]||(t[0]=t=>!e.disabled&&function(e){e.preventDefault(),r.value=!0;const t=e.clientX,l=a.currentWidth;n("resizeStart");const s=e=>{if(!r.value)return;const s=e.clientX-t,i=l+s,o=Math.max(a.minSize,Math.min(a.maxSize,i));n("resize",o)},i=()=>{r.value=!1,n("resizeEnd"),document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",i),document.body.style.userSelect="",document.body.style.cursor=""};document.body.style.userSelect="none",document.body.style.cursor="col-resize",document.addEventListener("mousemove",s),document.addEventListener("mouseup",i)}(t)),onDblclick:t[1]||(t[1]=t=>!e.disabled&&e.$emit("reset"))},t[2]||(t[2]=[m("div",{class:"divider-handle"},[m("div",{class:"handle-bar"})],-1)]),34))}}),[["__scopeId","data-v-d9082894"]]),ai={class:"trials-view-split","data-testid":"page-trials"},ni={class:"trials-layout"},li={class:"trials-content"},ri="auditomatic.trial-sider-width",si=Z(o({__name:"TrialsViewSplitPanel",setup(e){const t=G(),n=pe(),o=yt(),b=i(),_=s(),x=l(!1),S=l(!1),C=l(null),I=l(null),T=l(!1),P=l(),E=l(250),A=localStorage.getItem(ri);A&&(E.value=parseInt(A,10));const M=r(()=>n.hasAnyApiKeys||n.isProviderEnabled("ollama-chat")||n.isProviderEnabled("ollama-generate"));function R(e){E.value=e,localStorage.setItem(ri,e.toString())}function N(){E.value=250,localStorage.setItem(ri,"250")}function $(){x.value=!1,P.value=void 0,I.value=null,T.value=!1}function F(e){W.info("Trial created",{trialId:e}),$(),o.selectTrial(e)}async function j(e){W.info("Trial created and started",{trialId:e}),$(),await new Promise(e=>setTimeout(e,100)),o.selectTrial(e)}function D(e){W.info("Opening export for trial",{trialId:e.id}),C.value=e,S.value=!0}function L(e){W.info("Python script exported",{filename:e})}function U(){const e=b.query;if(e.duplicate&&"string"==typeof e.duplicate){const a=t.trials.find(t=>t.id===e.duplicate);a&&(I.value=a,T.value="true"===e.edit,x.value=!0)}else e.designId&&"string"==typeof e.designId&&(P.value=e.designId,x.value=!0);(e.duplicate||e.designId||e.edit)&&_.replace({query:{}})}const q=e=>{if((e.metaKey||e.ctrlKey)&&"k"===e.key){e.preventDefault();const t=document.querySelector(".trial-list-search input");t?.focus()}};return c(()=>b.query,()=>{U()}),c(()=>b.params.trialId,()=>{o.syncWithRoute()},{immediate:!0}),u(async()=>{if(document.addEventListener("keydown",q),await t.initialize(),await new Promise(e=>setTimeout(e,50)),U(),o.syncWithRoute(),!o.selectedTrialId){const e=t.trials.find(e=>"running"===e.status);e&&o.selectTrial(e.id)}}),d(()=>{document.removeEventListener("keydown",q)}),(e,t)=>{const n=y("a-button"),l=y("a-alert");return w(),p("div",ai,[M.value?f("",!0):(w(),v(l,{key:0,type:"warning",message:"No LLM providers configured",description:"Add keys for external APIs (local Ollama does not need keys) or enable Ollama provider.","show-icon":"",class:"provider-warning"},{action:h(()=>[a(g(H),{to:"/settings"},{default:h(()=>[a(n,{size:"small",type:"primary"},{default:h(()=>t[3]||(t[3]=[k(" Go to Settings ")])),_:1,__:[3]})]),_:1})]),_:1})),m("div",ni,[m("div",{class:"trials-sider",style:O({width:E.value+"px"})},[a(ea,{collapsed:E.value<100,onCreateTrial:t[0]||(t[0]=e=>x.value=!0)},null,8,["collapsed"])],4),a(ti,{"min-size":50,"max-size":600,"current-width":E.value,onResize:R,onReset:N},null,8,["current-width"]),m("div",li,[a(Ls,{onCreateTrial:t[1]||(t[1]=e=>x.value=!0)})])]),x.value?(w(),v(Me,{key:1,initialDesignId:P.value,trialToDuplicate:I.value||void 0,isEditMode:T.value,onClose:$,onCreated:F,onCreatedAndStarted:j,onExportTrial:D},null,8,["initialDesignId","trialToDuplicate","isEditMode"])):f("",!0),S.value&&C.value?(w(),v(ei,{key:2,trial:C.value,onClose:t[2]||(t[2]=e=>{S.value=!1,C.value=null}),onExported:L},null,8,["trial"])):f("",!0)])}}}),[["__scopeId","data-v-14b4c2e2"]]);export{si as default};
