import{_ as e}from"./BaseModal.vue_vue_type_style_index_0_lang-D3rbY83j.js";import{d as t,a6 as a,Y as n,a1 as l,_ as s,ag as r,f as o,c as i,w as c,o as d,b as u,ab as p,V as m,F as f,k as v,W as g,Z as b,a0 as y,ad as h,a8 as _,G as C,u as k,H as w,a7 as x,n as S,B as I,s as P,al as T,ae as M,q as E,aj as A}from"./vendor-DImCB_rW.js";import{_ as N,k as $,m as O,q as F,z as R,a as D,u as j,p as U,f as L,l as q,E as B,t as z,d as V,G as K,A as G,H as Y,J as H,K as J}from"./index-B1L31PPG.js";import{u as W}from"./designs-db-xzJUdtVO.js";import{u as X}from"./variables-db-CynsS7O5.js";import{u as Q}from"./models-db-CCNjdEp8.js";import{u as Z}from"./useEnvironmentalCost-aVOV7dso.js";import{a as ee}from"./cost-formatting-Bv_drrqY.js";import{G as te}from"./GenericModelSelectorModal-Cw1Mc2v7.js";const ae={class:"modal-footer"},ne={key:0,class:"footer-left"},le={class:"footer-actions"},se=N(t({__name:"ModalFooter",setup:e=>(e,t)=>(n(),a("div",ae,[e.$slots.left?(n(),a("div",ne,[r(e.$slots,"left",{},void 0,!0)])):l("",!0),s("div",le,[r(e.$slots,"default",{},void 0,!0)])]))}),[["__scopeId","data-v-3a3879d0"]]),re={key:0,class:"preview-controls"},oe={key:0,class:"cycle-info"},ie=["innerHTML"],ce={key:1,class:"variable-legend"},de={class:"variable-value"},ue=N(t({__name:"TemplatePreview",props:{design:{},template:{},variables:{},cycling:{type:Boolean,default:!0},cyclingPaused:{type:Boolean,default:!1},cyclingSpeed:{default:1e3},showControls:{default:"none"},displayMode:{default:"block"},showLegend:{type:Boolean,default:!1},maxHeight:{default:"300px"},previewMode:{type:Boolean,default:!1}},emits:["update:cyclingPaused","update:previewMode"],setup(e,{emit:t}){const r=e,w=t,x=X(),S=o(0);let I=null;const P=["variable-highlight-blue","variable-highlight-green","variable-highlight-purple","variable-highlight-orange","variable-highlight-pink","variable-highlight-teal"],T=i(()=>r.design?r.design.promptTemplate:r.template||""),M=i(()=>{const e=[];if(r.design?.variableBindings){for(const[a,n]of Object.entries(r.design.variableBindings))if("direct"===n.type&&n.values)e.push({name:a,values:[...n.values]});else if("list"===n.type&&n.listId){const t=x.lists.find(e=>e.id===n.listId);t&&("simple"===t.category&&t.values?e.push({name:a,values:[...t.values]}):"attributed"===t.category&&t.items&&e.push({name:a,values:t.items.map(e=>e.value)}))}}else if(r.variables)for(const[a,n]of Object.entries(r.variables))n.length>0&&e.push({name:a,values:[...n]});if(0===e.length)return[];const t=e.map(e=>e.values);return t.reduce((e,t)=>e.flatMap(e=>t.map(t=>[...e,t])),[[]]).map(t=>{const a={};return e.forEach((e,n)=>{a[e.name]=t[n]}),a})}),E=i(()=>M.value.length),A=i(()=>0===M.value.length?{}:M.value[S.value%M.value.length]),N=i(()=>{let e=T.value;"inline"===r.displayMode&&(e=e.replace(/\s+/g," ").trim());let t=R(e);if(M.value.length>0&&(r.cycling||r.previewMode)){const e=A.value;Object.keys(e).forEach((a,n)=>{const l=e[a];if(void 0!==l){const e=new RegExp(`\\{\\{\\s*${s=a,s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}\\s*\\}\\}`,"g"),r=`<span class="${F(n)}">${R(l)}</span>`;t=t.replace(e,r)}var s})}return t});function F(e){return P[e%P.length]}function R(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function D(){w("update:cyclingPaused",!r.cyclingPaused)}function j(){w("update:previewMode",!r.previewMode)}function U(){!r.cycling||r.cyclingPaused||M.value.length<=1||(L(),I=setInterval(()=>{S.value=(S.value+1)%M.value.length},r.cyclingSpeed))}function L(){I&&(clearInterval(I),I=null)}return c([()=>r.cycling,()=>r.cyclingPaused],()=>{r.cycling&&!r.cyclingPaused?U():L()},{immediate:!0}),c(()=>r.template,()=>{S.value=0}),d(()=>{r.cycling&&!r.cyclingPaused&&U()}),u(()=>{L()}),(e,t)=>{const r=g("a-button");return n(),a("div",{class:p(["template-preview",[`preview-${e.displayMode}`,{"preview-cycling":e.cycling&&!e.cyclingPaused}]])},["none"!==e.showControls?(n(),a("div",re,["pause-play"===e.showControls?(n(),a(f,{key:0},[v(r,{onClick:D,size:"small",type:e.cyclingPaused?"default":"primary",disabled:!e.cycling||E.value<=1},{default:b(()=>[C(y(e.cyclingPaused?"Start":"Pause")+" Variable Substitution ",1)]),_:1},8,["type","disabled"]),e.cycling&&E.value>1?(n(),a("span",oe,y(S.value+1)+" / "+y(E.value),1)):l("",!0)],64)):"editor-mode"===e.showControls?(n(),m(r,{key:1,type:e.previewMode?"default":"primary",onClick:j},{default:b(()=>[e.previewMode?(n(),m(k(O),{key:1})):(n(),m(k($),{key:0})),C(" "+y(e.previewMode?"Return to Editor":"Preview Filled-In Prompts"),1)]),_:1},8,["type"])):l("",!0)])):l("",!0),s("div",{class:"preview-content",innerHTML:N.value,style:h({maxHeight:e.maxHeight})},null,12,ie),e.showLegend&&A.value&&Object.keys(A.value).length>0?(n(),a("div",ce,[(n(!0),a(f,null,_(A.value,(e,t,l)=>(n(),a("div",{key:t,class:"legend-item"},[s("span",{class:p(F(l))},y(t),3),s("span",de,y(e),1)]))),128))])):l("",!0)],2)}}}),[["__scopeId","data-v-a4d016f0"]]),pe={class:"design-selection-step"},me={class:"step-body"},fe={class:"design-selector","data-testid":"design-selector"},ve={key:0,class:"no-designs-state"},ge={class:"no-designs-content"},be={key:1,class:"design-list","data-testid":"design-list"},ye=["data-design-id","data-design-name","onClick"],he={class:"design-header"},_e={class:"design-title-section"},Ce={class:"design-name"},ke={key:0,class:"design-inline-description"},we={class:"design-date"},xe={class:"design-stats"},Se={class:"stat-item"},Ie={class:"stat-value"},Pe={class:"stat-item"},Te={class:"stat-value"},Me={class:"stat-item"},Ee={class:"stat-value"},Ae=N(t({__name:"DesignSelectionStep",props:{designSearch:{},filteredDesigns:{},countVariables:{type:Function},formatLastEditDate:{type:Function},getOutputTypeColor:{type:Function},getCombinationCount:{type:Function}},emits:["select","create-new"],setup(e){const t=e,r=W(),{designSearch:o,filteredDesigns:i,countVariables:c,formatLastEditDate:d,getOutputTypeColor:u,getCombinationCount:p}=t;return(e,t)=>{const m=g("a-input"),h=g("a-button"),x=g("a-tag");return n(),a("div",pe,[t[11]||(t[11]=s("div",{class:"step-header"},[s("h3",null,"What are you testing?")],-1)),s("div",me,[s("div",fe,[v(m,{value:k(o),"onUpdate:value":t[0]||(t[0]=e=>w(o)?o.value=e:null),placeholder:"Search designs...",size:"large",class:"design-search","data-testid":"input-design-search",allowClear:""},{prefix:b(()=>[v(k(R))]),_:1},8,["value"]),0===k(i).length?(n(),a("div",ve,[s("div",ge,[t[4]||(t[4]=s("p",null,"No designs found",-1)),v(h,{onClick:t[1]||(t[1]=()=>k(r).initialize())},{default:b(()=>t[3]||(t[3]=[C("Refresh Designs")])),_:1,__:[3]})])])):(n(),a("div",be,[(n(!0),a(f,null,_(k(i),r=>(n(),a("div",{key:r.id,class:"design-item","data-testid":"design-item","data-design-id":r.id,"data-design-name":r.name,onClick:t=>e.$emit("select",r)},[s("div",he,[s("div",_e,[s("h4",Ce,[C(y(r.name)+" ",1),r.description?(n(),a("span",ke,"- "+y(r.description),1)):l("",!0)])]),s("span",we,y(k(d)(r.updated)),1)]),v(ue,{design:r,cycling:!0,"show-controls":"none","display-mode":"inline","max-height":"none",class:"design-description"},null,8,["design"]),s("div",xe,[v(x,{size:"small",color:k(u)(r.outputType),class:"output-type-tag"},{default:b(()=>[C(y(r.outputType||"text"),1)]),_:2},1032,["color"]),s("span",Se,[s("span",Ie,y(k(c)(r)),1),t[5]||(t[5]=s("span",{class:"stat-label"},"vars",-1))]),t[8]||(t[8]=s("span",{class:"stat-divider"},"•",-1)),s("span",Pe,[s("span",Te,y(k(p)(r)),1),t[6]||(t[6]=s("span",{class:"stat-label"},"combos",-1))]),t[9]||(t[9]=s("span",{class:"stat-divider"},"•",-1)),s("span",Me,[s("span",Ee,y(r.tokenEstimate?.avgTokens||"?"),1),t[7]||(t[7]=s("span",{class:"stat-label"},"tokens",-1))])])],8,ye))),128)),s("div",{class:"design-card design-card-create","data-testid":"btn-create-design",onClick:t[2]||(t[2]=t=>e.$emit("create-new"))},[v(k(F),{style:{"font-size":"24px"}}),t[10]||(t[10]=s("span",null,"Create New Design",-1))])]))])])])}}}),[["__scopeId","data-v-a52dcf0e"]]),Ne={class:"trial-metadata-form"},$e={class:"form-section"},Oe={class:"trial-name-section"},Fe={class:"repeat-section"},Re={class:"form-stats"},De={class:"stat-item"},je={class:"stat-value"},Ue={class:"stat-item"},Le={class:"stat-value"},qe=N(t({__name:"TrialMetadataForm",props:{modelValue:{},totalCombinations:{}},emits:["update:modelValue"],setup(e,{emit:t}){const l=e,r=t;function o(e){r("update:modelValue",{...l.modelValue,trialName:e})}function i(e){r("update:modelValue",{...l.modelValue,repeatCount:e||1})}return(e,t)=>{const l=g("a-input"),r=g("a-input-number");return n(),a("div",Ne,[s("div",$e,[s("div",Oe,[t[0]||(t[0]=s("label",{class:"form-label"},"Trial Name:",-1)),v(l,{value:e.modelValue.trialName,"onUpdate:value":o,placeholder:"Enter trial name",class:"trial-name-input","data-testid":"input-trial-name",size:"large"},null,8,["value"])]),s("div",Fe,[t[1]||(t[1]=s("label",{class:"form-label"},"Repeat Each Prompt:",-1)),v(r,{value:e.modelValue.repeatCount,"onUpdate:value":i,min:1,max:10,size:"large",class:"repeat-count-input"},null,8,["value"]),t[2]||(t[2]=s("span",{class:"repeat-suffix"},"times",-1))])]),s("div",Re,[s("div",De,[t[3]||(t[3]=s("span",{class:"stat-label"},"Total Combinations:",-1)),s("span",je,y(e.totalCombinations),1)]),s("div",Ue,[t[4]||(t[4]=s("span",{class:"stat-label"},"API Calls per Model:",-1)),s("span",Le,y(e.totalCombinations*e.modelValue.repeatCount),1)])])])}}}),[["__scopeId","data-v-50707609"]]),Be={class:"model-configuration-section"},ze={class:"quick-add-row"},Ve={class:"quick-add-section"},Ke={class:"quick-add-buttons"},Ge={key:0,class:"quick-cost"},Ye={key:0,class:"config-table","data-testid":"model-config-table"},He=["data-config-index","data-provider","data-model"],Je={class:"col-model"},We={class:"model-name"},Xe={class:"model-provider"},Qe={class:"col-params"},Ze={class:"params-text"},et={class:"col-calls"},tt={class:"calls-breakdown"},at={class:"calls-value"},nt={class:"col-cost"},lt={class:"cost-breakdown"},st={key:0,class:"cost-value"},rt={key:1,class:"env-cost"},ot={class:"col-total"},it={class:"cost-breakdown"},ct={key:0,class:"cost-value total-cost"},dt={key:1,class:"env-cost"},ut={class:"col-actions"},pt={key:0,class:"table-summary-row"},mt={class:"col-model"},ft={class:"summary-label"},vt={class:"col-calls"},gt={class:"summary-calls"},bt={class:"col-total"},yt={key:0,class:"summary-cost"},ht={key:1,class:"empty-config-state"},_t=N(t({__name:"ModelConfigurationSection",props:{configurations:{},design:{},totalCombinations:{},repeatCount:{}},emits:["show-model-selector","add","remove"],setup(e,{emit:t}){const r=e,o=t,c=Q(),d=D(),u=j(),{hasDataForModel:p}=Z(),h=i(()=>d.financialCostsEnabled),w=i(()=>d.environmentalCostsEnabled),I=i(()=>r.totalCombinations*r.configurations.length*r.repeatCount),P=i(()=>{let e=0;for(const t of r.configurations)e+=N(t)*r.totalCombinations*r.repeatCount;return e}),T=i(()=>{const e=e=>d.hasApiKey(e),t=(e,t)=>!!c.enabledModels.find(a=>a.provider===e&&a.modelId===t&&a.enabled),a=[],n=new Set,l=[...u.trials].sort((e,t)=>new Date(t.created).getTime()-new Date(e.created).getTime());for(const c of l){if(a.length>=5)break;for(const l of c.configurationSnapshots||[]){if(a.length>=5)break;const s=`${l.provider}:${l.modelId}:${JSON.stringify(l.parameters)}`;if(!n.has(s)&&e(l.provider)&&t(l.provider,l.modelId)){const e=U.getParametersForModel(l.provider,l.modelId);if(!e)continue;if(Object.keys(l.parameters).some(t=>!(t in e)))continue;n.add(s),a.push({provider:l.provider,modelId:l.modelId,displayName:l.modelId,parameters:l.parameters,outputType:"text"})}}}const s=(e,t)=>{const a=U.getParametersForModel(e,t),n={},l=(e,t)=>{Object.entries(e).forEach(([e,a])=>{"object"===a.type&&a.properties?(t[e]={},l(a.properties,t[e])):void 0!==a.default&&(t[e]=a.default)})};l(a,n),n.temperature||!n.options||n.options.temperature||(n.options?n.options.temperature=0:n.temperature=0);const s=(e,t)=>{for(const[a,n]of Object.entries(e))"object"===n.type&&n.properties?(t[a]||(t[a]={}),s(n.properties,t[a])):n.is_output_length&&void 0===t[a]&&(t[a]=128)};return s(a,n),n},r=[{provider:"openai-chat",modelId:"gpt-4.1-nano",displayName:"gpt-4.1-nano",parameters:s("openai-chat","gpt-4.1-nano"),outputType:"text"},{provider:"anthropic",modelId:"claude-3-haiku-20240307",displayName:"claude-3-haiku-20240307",parameters:s("anthropic","claude-3-haiku-20240307"),outputType:"text"}],o=new Set(a.map(e=>`${e.provider}:${e.modelId}:${JSON.stringify(e.parameters)}`));for(const c of r){const n=`${c.provider}:${c.modelId}:${JSON.stringify(c.parameters)}`;!o.has(n)&&e(c.provider)&&t(c.provider,c.modelId)&&a.push(c)}const i=[],p=new Set;for(const c of a){const e=`${c.provider}:${c.modelId}`;p.has(e)||(p.add(e),i.push(c))}return i.slice(0,7)});function M(e){const t=[];for(const[a,n]of Object.entries(e))null!=n&&t.push(`${a}=${n}`);return t.join(", ")||"Default settings"}function E(e){return r.configurations.some(t=>t.provider===e.provider&&t.modelId===e.modelId&&JSON.stringify(t.parameters)===JSON.stringify(e.parameters))}function A(e){const t=c.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t||!r.design)return 0;const a=r.design.tokenEstimate?.avgTokens||0,n=U.getParametersForModel(e.provider,e.modelId);let l=0;for(const[s,r]of Object.entries(n))if(r.is_output_length&&e.parameters[s]){l=e.parameters[s];break}if(0===a||0===l)return 0;return((t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*l)*r.totalCombinations*r.repeatCount}function N(e){const t=c.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t||!r.design)return 0;const a=r.design.tokenEstimate?.avgTokens||0,n=U.getParametersForModel(e.provider,e.modelId);let l=0;for(const[s,r]of Object.entries(n))if(r.is_output_length&&e.parameters[s]){l=e.parameters[s];break}if(0===a||0===l)return 0;return(t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*l}function $(e){return N(e)*r.totalCombinations*r.repeatCount}function O(e){return p(e.provider,e.modelId)}function R(e,t){return"per-call"===t?"<1mg CO₂e":"~10mg CO₂e"}return(e,t)=>{const r=g("a-button");return n(),a("div",Be,[s("div",ze,[v(r,{onClick:t[0]||(t[0]=t=>e.$emit("show-model-selector")),type:"primary",size:"large",class:"big-add-model-btn","data-testid":"btn-add-model","aria-label":"Add Model Configuration"},{default:b(()=>[v(k(F)),t[1]||(t[1]=C(" Add Model "))]),_:1,__:[1]}),t[3]||(t[3]=s("div",{class:"separator-bar"},null,-1)),s("div",Ve,[t[2]||(t[2]=s("div",{class:"quick-add-label"},"Quick add recent/popular models (with default temperature=0, max response length = 128):",-1)),s("div",Ke,[(n(!0),a(f,null,_(T.value,e=>(n(),m(r,{key:`${e.provider}:${e.modelId}:${JSON.stringify(e.parameters)}`,onClick:t=>function(e){E(e)||(o("add",{name:e.displayName,provider:e.provider,modelId:e.modelId,parameters:e.parameters}),S(()=>{const e=document.querySelector(".ant-modal-body");e&&e.scrollTo({top:e.scrollHeight,behavior:"smooth"})}))}(e),size:"small",class:"quick-preset-btn",disabled:E(e),"data-testid":"quick-add-model","data-provider":e.provider,"data-model":e.modelId,"aria-label":`Quick add ${e.displayName} model`},{default:b(()=>[C(y(e.displayName)+" ",1),h.value?(n(),a("span",Ge,y(k(ee)(A(e))),1)):l("",!0)]),_:2},1032,["onClick","disabled","data-provider","data-model","aria-label"]))),128))])])]),e.configurations.length>0?(n(),a("div",Ye,[t[8]||(t[8]=x('<div class="table-header" data-v-82ddd342><div class="col-model" data-v-82ddd342>Model</div><div class="col-params" data-v-82ddd342>Parameters</div><div class="col-calls" data-v-82ddd342>API Calls</div><div class="col-cost" data-v-82ddd342>Cost per Call</div><div class="col-total" data-v-82ddd342>Total Cost</div><div class="col-actions" data-v-82ddd342>Actions</div></div>',1)),(n(!0),a(f,null,_(e.configurations,(o,i)=>(n(),a("div",{key:i,class:"table-row","data-testid":"model-config-row","data-config-index":i,"data-provider":o.provider,"data-model":o.modelId},[s("div",Je,[s("div",We,y(o.provider)+":"+y(o.modelId),1),s("div",Xe,y(o.provider),1)]),s("div",Qe,[s("span",Ze,y(M(o.parameters)),1)]),s("div",et,[s("span",tt,y(e.totalCombinations)+" × "+y(e.repeatCount)+" = ",1),s("span",at,y(e.totalCombinations*e.repeatCount),1)]),s("div",nt,[s("div",lt,[h.value?(n(),a("span",st,y(k(ee)(N(o))),1)):l("",!0),w.value&&O(o)?(n(),a("small",rt,y(R(0,"per-call")),1)):l("",!0)])]),s("div",ot,[s("div",it,[h.value?(n(),a("span",ct,y(k(ee)($(o))),1)):l("",!0),w.value&&O(o)?(n(),a("small",dt,y(R(0,"total")),1)):l("",!0)])]),s("div",ut,[v(r,{type:"text",size:"small",danger:"",onClick:t=>e.$emit("remove",i),class:"remove-btn","data-testid":"remove-model-config","data-config-index":i,"aria-label":`Remove ${o.provider} ${o.modelId} configuration`},{default:b(()=>t[4]||(t[4]=[C("Remove")])),_:2,__:[4]},1032,["onClick","data-config-index","aria-label"])])],8,He))),128)),e.configurations.length>1?(n(),a("div",pt,[s("div",mt,[s("div",ft,"TOTAL ("+y(e.configurations.length)+" models)",1)]),t[5]||(t[5]=s("div",{class:"col-params"},null,-1)),s("div",vt,[s("span",gt,y(I.value),1)]),t[6]||(t[6]=s("div",{class:"col-cost"},null,-1)),s("div",bt,[h.value?(n(),a("span",yt,y(k(ee)(P.value)),1)):l("",!0)]),t[7]||(t[7]=s("div",{class:"col-actions"},null,-1))])):l("",!0)])):(n(),a("div",ht,t[9]||(t[9]=[s("p",null,"No models configured yet. Add at least one model to continue.",-1)])))])}}}),[["__scopeId","data-v-82ddd342"]]);const Ct={key:0,class:"trial-creation-form"},kt={class:"streamlined-content"},wt={class:"content-section"},xt={class:"section-header"},St={class:"section-body"},It={key:1,class:"selected-design-with-template"},Pt={class:"unified-header"},Tt={class:"combinations-count"},Mt={class:"header-controls"},Et={class:"design-stats"},At={class:"stat-item"},Nt={class:"stat-value"},$t={class:"stat-item"},Ot={class:"stat-value"},Ft={class:"stat-item"},Rt={class:"stat-value"},Dt={key:0,class:"content-section","data-testid":"trial-config-section"},jt={class:"section-body"},Ut={class:"model-section"},Lt={class:"tab-footer"},qt={class:"footer-actions"},Bt={class:"streamlined-content"},zt={class:"content-section"},Vt={class:"section-header"},Kt={class:"section-body"},Gt={key:1,class:"selected-design-with-template"},Yt={class:"unified-header"},Ht={class:"combinations-count"},Jt={class:"header-controls"},Wt={class:"design-stats"},Xt={class:"stat-item"},Qt={class:"stat-value"},Zt={class:"stat-item"},ea={class:"stat-value"},ta={class:"stat-item"},aa={class:"stat-value"},na={key:0,class:"content-section","data-testid":"trial-config-section"},la={class:"section-body"},sa={class:"model-section"},ra=N(t({__name:"TrialCreationModalNew",props:{initialDesignId:{},trialToDuplicate:{},isEditMode:{type:Boolean},isTabMode:{type:Boolean}},emits:["close","created","created-and-started","export-trial"],setup(t,{emit:r}){const p=t,f=r,h=i(()=>({type:p.isEditMode?"edit":p.trialToDuplicate?"duplicate":"create",initialDesignId:p.initialDesignId,sourceTrial:p.trialToDuplicate||void 0})),_=X(),w=function(e){const t=W(),a=X(),n=Q(),l=j(),s=D(),r=o(null),c=o(""),d=o(1),u=o([]),p=o(!1),m=o(!1),f=o(!1),v=o(!1),g=i(()=>{if(!r.value)return 0;let e=1;for(const t of Object.values(r.value.variableBindings))if("direct"===t.type)e*=t.values?.length||1;else if(t.listId){const n=a.lists.find(e=>e.id===t.listId);e*=n?.itemCount||1}return e}),b=i(()=>g.value*u.value.length*d.value),y=i(()=>{let e=0;for(const t of u.value)e+=k(t)*g.value*d.value;return e}),h=i(()=>null!==r.value&&u.value.length>0);function _(e){r.value=e,c.value=C(e),f.value=!0}function C(e){return e||r.value?`${e?.name||r.value?.name||"Trial"} - ${(new Date).toLocaleString("en-US",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"})}`:"New Trial"}function k(e){const t=n.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t)return 0;const a=r.value?.tokenEstimate?.avgTokens||0,l=U.getParametersForModel(e.provider,e.modelId);let s=0;for(const[n,r]of Object.entries(l))if(r.is_output_length&&e.parameters[n]){s=e.parameters[n];break}return 0===a||0===s?0:(t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*s}return{selectedDesign:r,trialName:c,repeatCount:d,configurations:u,creating:p,showModelSelector:m,liveUpdatePaused:f,showPlaceholders:v,totalCombinations:g,totalExperiments:b,totalCost:y,canProceed:h,selectDesign:_,generateTrialName:C,addConfiguration:function(e){u.value.push(e)},removeConfiguration:function(e){u.value.splice(e,1)},getConfigCostPerCall:k,createDraftTrial:async function(){if(r.value&&0!==u.value.length){p.value="draft";try{const e=await l.createTrial({name:c.value||C(),designId:r.value.id,configurations:u.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:d.value>1?{callsPerPrompt:d.value,strategy:"sequential"}:void 0});return L.success("Trial created as draft!"),e}catch(e){throw q.error("Failed to create draft trial",e),L.error("Failed to create draft trial"),e}finally{p.value=!1}}},createAndStartTrial:async function(){if(r.value&&0!==u.value.length){p.value="start";try{const e=await l.createTrial({name:c.value||C(),designId:r.value.id,configurations:u.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:d.value>1?{callsPerPrompt:d.value,strategy:"sequential"}:void 0});return L.success("Trial created! Starting execution..."),setTimeout(async()=>{try{await l.executeTrial(e)}catch(t){q.error("Failed to start trial",t),L.error("Failed to start trial execution")}},100),e}catch(e){throw q.error("Failed to create trial",e),L.error("Failed to create trial"),e}finally{p.value=!1}}},createAndExportTrial:async function(){if(r.value&&0!==u.value.length){p.value="export";try{const e=await l.createTrial({name:c.value||C(),designId:r.value.id,configurations:u.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:d.value>1?{callsPerPrompt:d.value,strategy:"sequential"}:void 0}),t=await l.getTrial(e);if(!t)throw new Error("Trial not found after creation");return L.success("Trial created! Opening export options..."),t}catch(e){throw q.error("Failed to create trial for export",e),L.error("Failed to create trial for export"),e}finally{p.value=!1}}},initialize:async function(){await Promise.all([t.initialize(),a.initialize(),l.initialize()]);const n=e.value;if(n.initialDesignId){const e=t.designs.find(e=>e.id===n.initialDesignId);e&&_(e)}if(n.sourceTrial){const e=n.sourceTrial,a=t.designs.find(t=>t.id===e.designSnapshot.originalId);a&&(r.value=a,c.value="edit"===n.type?e.name:`Copy of ${e.name}`,e.repeatConfig?.callsPerPrompt&&(d.value=e.repeatConfig.callsPerPrompt),e.configurationSnapshots&&e.configurationSnapshots.length>0&&(u.value=e.configurationSnapshots.map(e=>({name:e.name||e.modelId,provider:e.provider,modelId:e.modelId,parameters:e.parameters||{}}))),f.value=!0)}},designsStore:t,variableListsStore:a,modelsStore:n,settingsStore:s}}(h),x=function(){const e=W(),t=X(),a=o(""),n=o(0);let l=null;const s=i(()=>{const t=e.designs;if(!a.value)return t;const n=a.value.toLowerCase();return t.filter(e=>e.name.toLowerCase().includes(n)||e.promptTemplate.toLowerCase().includes(n))});function r(e){return e.replace(/\n+/g," ").replace(/\s+/g," ").trim()}function c(e){if(!e.variableBindings)return[{}];const a=[];for(const[l,s]of Object.entries(e.variableBindings))if("direct"===s.type&&s.values)a.push({name:l,values:[...s.values]});else if("list"===s.type&&s.listId){const e=t.lists.find(e=>e.id===s.listId);if(e){let t=[];t="simple"===e.category&&e.values?e.values:"attributed"===e.category&&e.items?e.items.map(e=>e.value):[`${l}_sample`],a.push({name:l,values:t})}}if(0===a.length)return[{}];const n=[...a.map(e=>e.values).reduce((e,t)=>e.flatMap(e=>t.map(t=>[...e,t])),[[]])];for(let t=n.length-1;t>0;t--){const e=Math.floor(Math.random()*(t+1));[n[t],n[e]]=[n[e],n[t]]}return n.map(e=>{const t={};return a.forEach((a,n)=>{t[a.name]=e[n]}),t})}function p(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function m(){l||(l=setInterval(()=>{n.value++},1e3))}function f(){l&&(clearInterval(l),l=null)}return d(()=>{m()}),u(()=>{f()}),{designSearch:a,previewCycleIndex:n,filteredDesigns:s,countVariables:function(e){return Object.keys(e.variableBindings).length},truncateTemplate:r,formatLastEditDate:function(e){const t=new Date,a=t.getTime()-e.getTime(),n=Math.floor(a/864e5);if(0===n)return"Today";if(1===n)return"Yesterday";if(n<7)return`${n} days ago`;if(n<30){const e=Math.floor(n/7);return`${e} week${e>1?"s":""} ago`}return e.toLocaleDateString("en-US",{month:"short",day:"numeric",year:e.getFullYear()!==t.getFullYear()?"numeric":void 0})},getOutputTypeColor:function(e){return{text:"blue",number:"green",boolean:"purple",json:"orange"}[e]||"default"},getCombinationCount:function(e){if(!e.variableBindings)return"1";let a=1;for(const n of Object.values(e.variableBindings))if("direct"===n.type&&n.values)a*=n.values.length;else if("list"===n.type&&n.listId){const e=t.lists.find(e=>e.id===n.listId);a*=e?.itemCount||1}return a>1e3?`${(a/1e3).toFixed(1)}k`:a.toString()},generateVariableCombinations:c,getPreviewTemplateHTML:function(e){const t=c(e);if(t.length<=1)return p(r(e.promptTemplate));const a=t[n.value%t.length],l=["variable-highlight-blue","variable-highlight-green","variable-highlight-purple","variable-highlight-orange","variable-highlight-pink","variable-highlight-teal"];let s=e.promptTemplate;Object.keys(e.variableBindings||{}).forEach((e,t)=>{if(void 0!==a[e]){const n=new RegExp(`\\{\\{\\s*${e}\\s*\\}\\}`,"g"),r=`<span class="${l[t%l.length]}">${p(String(a[e]))}</span>`;s=s.replace(n,r)}});let o=p(s);return l.forEach(e=>{o=o.replace(new RegExp(`&lt;span class="${e}"&gt;`,"g"),`<span class="${e}">`).replace(/&lt;\/span&gt;/g,"</span>")}),r(o)},escapeHtml:p,startCycling:m,stopCycling:f}}(),S=o(!0),I=i(()=>w.selectedDesign.value),P=i({get:()=>w.trialName.value,set:e=>{w.trialName.value=e}}),T=i({get:()=>w.repeatCount.value,set:e=>{w.repeatCount.value=e}}),M=i(()=>w.configurations.value),E=i({get:()=>w.showModelSelector.value,set:e=>{w.showModelSelector.value=e}}),A=i(()=>w.creating.value),N=i(()=>w.totalCombinations.value),{countVariables:$,getOutputTypeColor:O}=x,F=i(()=>p.isEditMode&&p.trialToDuplicate?`Edit Trial: ${p.trialToDuplicate.name}`:p.trialToDuplicate?`Duplicate Trial: ${p.trialToDuplicate.name}`:"Create New Trial"),R=i(()=>w.canProceed.value);async function K(e){0===_.lists.length&&await _.initialize();const t={...e,variableBindings:Object.entries(e.variableBindings).reduce((e,[t,a])=>(e[t]={type:a.type,values:a.values?[...a.values]:void 0,listId:a.listId,listName:a.listName,source:a.source?{...a.source}:void 0},e),{}),tokenEstimate:e.tokenEstimate?{...e.tokenEstimate}:void 0,refusalWords:e.refusalWords?[...e.refusalWords]:void 0};w.selectDesign(t),S.value=!0,x.stopCycling()}async function G(e){try{const t=await V.designs.get(e);t&&w.selectDesign(t)}catch(t){q.error("Failed to load design",t),z.error({title:"Failed to load design",content:t instanceof Error?t.message:"Unknown error"})}}function Y(){w.selectedDesign.value=null,w.configurations.value=[]}async function H(){f("close"),window.location.href="#/designs"}function J(e){w.trialName.value=e.trialName,w.repeatCount.value=e.repeatCount}function Z(e){w.addConfiguration(e)}function ee(e){w.removeConfiguration(e)}function ae(e){Z(e),w.showModelSelector.value=!1}async function ne(){try{const e=await w.createDraftTrial();e&&(f("created",e),f("close"))}catch(e){}}async function le(){try{const e=await w.createAndExportTrial();e&&(f("export-trial",e),f("close"))}catch(e){}}async function re(){try{const e=await w.createAndStartTrial();e&&(f("created-and-started",e),f("close"))}catch(e){}}function oe(){S.value=!S.value,S.value?x.stopCycling():x.startCycling()}return d(async()=>{await w.initialize(),0===_.lists.length&&await _.initialize()}),c(()=>p.trialToDuplicate,()=>{p.trialToDuplicate&&async function(){if(p.trialToDuplicate)try{p.trialToDuplicate.designSnapshot?.originalId&&await G(p.trialToDuplicate.designSnapshot.originalId),p.isEditMode?w.trialName.value=p.trialToDuplicate.name:w.trialName.value=`${p.trialToDuplicate.name} (Copy)`,w.repeatCount.value=p.trialToDuplicate.repeatConfig?.callsPerPrompt||1,w.configurations.value=p.trialToDuplicate.configurationSnapshots||[]}catch(e){q.error("Failed to initialize duplication",e),z.error({title:"Failed to load trial data",content:e instanceof Error?e.message:"Unknown error"})}}()},{immediate:!0}),c(()=>p.initialDesignId,()=>{p.initialDesignId&&!p.trialToDuplicate&&async function(){p.initialDesignId&&await G(p.initialDesignId)}()},{immediate:!0}),(t,r)=>{const o=g("a-button"),i=g("a-tag");return t.isTabMode?(n(),a("div",Ct,[s("div",kt,[s("section",wt,[s("div",xt,[r[8]||(r[8]=s("h3",null,"What are you testing?",-1)),I.value?(n(),m(o,{key:0,onClick:Y,size:"small",class:"back-button",style:{"margin-left":"2em"}},{default:b(()=>r[7]||(r[7]=[C(" ← Back to Select Design ")])),_:1,__:[7]})):l("",!0)]),s("div",St,[I.value?(n(),a("div",It,[s("div",Pt,[s("h4",null,y(I.value.name),1),s("span",Tt,y(N.value)+" combinations",1),s("div",Mt,[v(o,{onClick:oe,size:"small",type:S.value?"default":"primary",class:"pause-btn"},{default:b(()=>[C(y(S.value?"Start Variable Substitution":"Pause Variable Substitution"),1)]),_:1},8,["type"])])]),v(ue,{design:I.value,cycling:!0,"cycling-paused":S.value,"show-controls":"none","display-mode":"inline","max-height":"none",class:"step2-preview","onUpdate:cyclingPaused":r[0]||(r[0]=e=>S.value=e)},null,8,["design","cycling-paused"]),s("div",Et,[v(i,{size:"small",color:k(O)(I.value.outputType),class:"output-type-tag"},{default:b(()=>[C(y(I.value.outputType||"text"),1)]),_:1},8,["color"]),s("span",At,[s("span",Nt,y(k($)(I.value)),1),r[9]||(r[9]=s("span",{class:"stat-label"},"vars",-1))]),r[12]||(r[12]=s("span",{class:"stat-divider"},"•",-1)),s("span",$t,[s("span",Ot,y(N.value),1),r[10]||(r[10]=s("span",{class:"stat-label"},"combos",-1))]),r[13]||(r[13]=s("span",{class:"stat-divider"},"•",-1)),s("span",Ft,[s("span",Rt,y(I.value.tokenEstimate?.avgTokens||"?"),1),r[11]||(r[11]=s("span",{class:"stat-label"},"tokens",-1))])])])):(n(),m(Ae,{key:0,"design-search":k(x).designSearch,"filtered-designs":k(x).filteredDesigns,"count-variables":k(x).countVariables,"format-last-edit-date":k(x).formatLastEditDate,"get-output-type-color":k(x).getOutputTypeColor,"get-combination-count":k(x).getCombinationCount,onSelect:K,onCreateNew:H},null,8,["design-search","filtered-designs","count-variables","format-last-edit-date","get-output-type-color","get-combination-count"]))])]),I.value?(n(),a("section",Dt,[r[15]||(r[15]=s("h3",null,"Trial Configuration",-1)),s("div",jt,[v(qe,{"model-value":{trialName:P.value,repeatCount:T.value},"total-combinations":N.value,"onUpdate:modelValue":J},null,8,["model-value","total-combinations"]),s("div",Ut,[r[14]||(r[14]=s("h4",null,"Model Configuration",-1)),v(_t,{configurations:M.value,design:I.value,"total-combinations":N.value,"repeat-count":T.value,onShowModelSelector:r[1]||(r[1]=e=>E.value=!0),onAdd:Z,onRemove:ee},null,8,["configurations","design","total-combinations","repeat-count"])])])])):l("",!0)]),s("div",Lt,[s("div",qt,[v(o,{size:"large",onClick:ne,loading:"draft"===A.value,disabled:!R.value,"data-testid":"btn-create-draft-tab","aria-label":"Create trial as draft"},{default:b(()=>r[16]||(r[16]=[C(" Create as Draft ")])),_:1,__:[16]},8,["loading","disabled"]),v(o,{size:"large",onClick:le,loading:"export"===A.value,disabled:!R.value,"data-testid":"btn-export-python-tab","aria-label":"Export trial to Python"},{default:b(()=>r[17]||(r[17]=[C(" Export to Python ")])),_:1,__:[17]},8,["loading","disabled"]),v(o,{type:"primary",size:"large",onClick:re,loading:"start"===A.value,disabled:!R.value,"data-testid":"btn-create-and-start-tab","aria-label":"Create and start trial execution"},{default:b(()=>[v(k(B)),r[18]||(r[18]=C(" Create and Start "))]),_:1,__:[18]},8,["loading","disabled"])])]),v(te,{open:E.value&&!!I.value,mode:"trial",design:I.value||void 0,"existing-configurations":M.value,onClose:r[2]||(r[2]=e=>E.value=!1),onAddConfiguration:ae},null,8,["open","design","existing-configurations"])])):(n(),m(e,{key:1,"model-value":!0,title:F.value,size:"full","data-testid":"modal-trial-creation","onUpdate:modelValue":r[6]||(r[6]=e=>t.$emit("close"))},{footer:b(()=>[v(se,null,{default:b(()=>[v(o,{size:"large",onClick:ne,loading:"draft"===A.value,disabled:!R.value,"data-testid":"btn-create-draft","aria-label":"Create trial as draft"},{default:b(()=>r[28]||(r[28]=[C(" Create as Draft ")])),_:1,__:[28]},8,["loading","disabled"]),v(o,{size:"large",onClick:le,loading:"export"===A.value,disabled:!R.value,"data-testid":"btn-export-python","aria-label":"Export trial to Python"},{default:b(()=>r[29]||(r[29]=[C(" Export to Python ")])),_:1,__:[29]},8,["loading","disabled"]),v(o,{type:"primary",size:"large",onClick:re,loading:"start"===A.value,disabled:!R.value,"data-testid":"btn-create-and-start","aria-label":"Create and start trial execution"},{default:b(()=>[v(k(B)),r[30]||(r[30]=C(" Create and Start "))]),_:1,__:[30]},8,["loading","disabled"])]),_:1})]),default:b(()=>[s("div",Bt,[s("section",zt,[s("div",Vt,[r[20]||(r[20]=s("h3",null,"What are you testing?",-1)),I.value?(n(),m(o,{key:0,onClick:Y,size:"small",class:"back-button",style:{"margin-left":"2em"}},{default:b(()=>r[19]||(r[19]=[C(" ← Back to Select Design ")])),_:1,__:[19]})):l("",!0)]),s("div",Kt,[I.value?(n(),a("div",Gt,[s("div",Yt,[s("h4",null,y(I.value.name),1),s("span",Ht,y(N.value)+" combinations",1),s("div",Jt,[v(o,{onClick:oe,size:"small",type:S.value?"default":"primary",class:"pause-btn"},{default:b(()=>[C(y(S.value?"Start Variable Substitution":"Pause Variable Substitution"),1)]),_:1},8,["type"])])]),v(ue,{design:I.value,cycling:!0,"cycling-paused":S.value,"show-controls":"none","display-mode":"inline","max-height":"none",class:"step2-preview","onUpdate:cyclingPaused":r[3]||(r[3]=e=>S.value=e)},null,8,["design","cycling-paused"]),s("div",Wt,[v(i,{size:"small",color:k(O)(I.value.outputType),class:"output-type-tag"},{default:b(()=>[C(y(I.value.outputType||"text"),1)]),_:1},8,["color"]),s("span",Xt,[s("span",Qt,y(k($)(I.value)),1),r[21]||(r[21]=s("span",{class:"stat-label"},"vars",-1))]),r[24]||(r[24]=s("span",{class:"stat-divider"},"•",-1)),s("span",Zt,[s("span",ea,y(N.value),1),r[22]||(r[22]=s("span",{class:"stat-label"},"combos",-1))]),r[25]||(r[25]=s("span",{class:"stat-divider"},"•",-1)),s("span",ta,[s("span",aa,y(I.value.tokenEstimate?.avgTokens||"?"),1),r[23]||(r[23]=s("span",{class:"stat-label"},"tokens",-1))])])])):(n(),m(Ae,{key:0,"design-search":k(x).designSearch,"filtered-designs":k(x).filteredDesigns,"count-variables":k(x).countVariables,"format-last-edit-date":k(x).formatLastEditDate,"get-output-type-color":k(x).getOutputTypeColor,"get-combination-count":k(x).getCombinationCount,onSelect:K,onCreateNew:H},null,8,["design-search","filtered-designs","count-variables","format-last-edit-date","get-output-type-color","get-combination-count"]))])]),I.value?(n(),a("section",na,[r[27]||(r[27]=s("h3",null,"Trial Configuration",-1)),s("div",la,[v(qe,{"model-value":{trialName:P.value,repeatCount:T.value},"total-combinations":N.value,"onUpdate:modelValue":J},null,8,["model-value","total-combinations"]),s("div",sa,[r[26]||(r[26]=s("h4",null,"Model Configuration",-1)),v(_t,{configurations:M.value,design:I.value,"total-combinations":N.value,"repeat-count":T.value,onShowModelSelector:r[4]||(r[4]=e=>E.value=!0),onAdd:Z,onRemove:ee},null,8,["configurations","design","total-combinations","repeat-count"])])])])):l("",!0)]),v(te,{open:E.value&&!!I.value,mode:"trial",design:I.value||void 0,"existing-configurations":M.value,onClose:r[5]||(r[5]=e=>E.value=!1),onAddConfiguration:ae},null,8,["open","design","existing-configurations"])]),_:1},8,["title"]))}}}),[["__scopeId","data-v-d9d0a3a2"]]),oa={class:"trial-overview"},ia={class:"overview-section"},ca={class:"cost-value"},da={key:0,class:"text-secondary",style:{"margin-left":"8px"}},ua={class:"overview-section"},pa={class:"progress-details"},ma={class:"progress-stats"},fa={class:"configurations-section"},va={key:0,class:"model-info"},ga={key:0},ba={class:"prompt-section"},ya={key:0,class:"variables-section"},ha=t({__name:"TrialDetailModal",props:{trial:{}},emits:["close","updated"],setup(t){const r=t,o=[{title:"Model",key:"model",width:200},{title:"Parameters",key:"params",width:300},{title:"Cost/Call",key:"cost",width:100,align:"right"}],c=i(()=>0===r.trial.progress.total?0:Math.round(r.trial.progress.completed/r.trial.progress.total*100));function d(e){const t=Object.entries(e).map(([e,t])=>`${e}: ${t}`).join(", ");return t.length>50?t.substring(0,50)+"...":t}function u(){const e=r.trial.variableSnapshots;return e&&0!==e.length?e.map(e=>({variable:e.variableName,listName:e.originalListName,count:e.data.itemCount})):[]}return(t,r)=>{const i=g("a-button"),p=g("a-tag"),h=g("a-descriptions-item"),_=g("a-descriptions"),k=g("a-progress"),w=g("a-typography-text"),x=g("a-table"),S=g("a-typography-paragraph"),I=g("a-list-item-meta"),P=g("a-list-item"),T=g("a-list");return n(),m(e,{"model-value":!0,title:t.trial.name,size:"full","onUpdate:modelValue":r[1]||(r[1]=e=>t.$emit("close"))},{footer:b(()=>[v(i,{onClick:r[0]||(r[0]=e=>t.$emit("close")),size:"large","data-testid":"btn-close-trial-detail","aria-label":"Close trial details"},{default:b(()=>r[2]||(r[2]=[C(" Close ")])),_:1,__:[2]})]),default:b(()=>[s("div",oa,[s("div",ia,[r[3]||(r[3]=s("h3",null,"Trial Information",-1)),v(_,{column:2,size:"small",bordered:""},{default:b(()=>[v(h,{label:"Status"},{default:b(()=>{return[v(p,{color:(e=t.trial.status,{completed:"success",failed:"error",running:"processing",cancelled:"default",draft:"default",pending:"processing",paused:"warning"}[e]||"default"),"data-testid":"tag-trial-status","data-status":t.trial.status,"aria-label":`Trial status: ${t.trial.status}`},{default:b(()=>[C(y(t.trial.status.toUpperCase()),1)]),_:1},8,["color","data-status","aria-label"])];var e}),_:1}),v(h,{label:"Design"},{default:b(()=>[C(y(t.trial.designSnapshot.originalName),1)]),_:1}),v(h,{label:"Created"},{default:b(()=>{return[C(y((e=t.trial.created,new Date(e).toLocaleString())),1)];var e}),_:1}),v(h,{label:"Estimated Cost"},{default:b(()=>[s("span",ca,"$"+y(t.trial.estimatedCost.toFixed(3)),1)]),_:1}),t.trial.repeatConfig?.callsPerPrompt&&t.trial.repeatConfig.callsPerPrompt>1?(n(),m(h,{key:0,label:"Repeat Configuration"},{default:b(()=>[v(p,{color:"purple"},{default:b(()=>[C(y(t.trial.repeatConfig.callsPerPrompt)+"× repeat",1)]),_:1}),t.trial.repeatConfig.delayBetweenRepeats?(n(),a("span",da,y(t.trial.repeatConfig.delayBetweenRepeats)+"ms delay ",1)):l("",!0)]),_:1})):l("",!0)]),_:1})]),s("div",ua,[r[4]||(r[4]=s("h3",null,"Progress",-1)),s("div",pa,[v(k,{percent:c.value,status:"failed"===t.trial.status?"exception":"active",size:"small","data-testid":"progress-trial-completion","aria-label":`Trial progress: ${c.value}% complete`},null,8,["percent","status","aria-label"]),s("div",ma,[v(p,{"data-testid":"tag-progress-completed","aria-label":`${t.trial.progress.completed} of ${t.trial.progress.total} calls completed`},{default:b(()=>[C(y(t.trial.progress.completed)+" / "+y(t.trial.progress.total)+" completed",1)]),_:1},8,["aria-label"]),t.trial.progress.networkErrors>0?(n(),m(p,{key:0,color:"error","data-testid":"tag-network-errors","aria-label":`${t.trial.progress.networkErrors} network errors occurred`},{default:b(()=>[C(y(t.trial.progress.networkErrors)+" network errors ",1)]),_:1},8,["aria-label"])):l("",!0)])])])]),s("div",fa,[s("h3",null,"Configurations ("+y(t.trial.configurationSnapshots.length)+")",1),v(x,{columns:o,"data-source":t.trial.configurationSnapshots,pagination:!1,size:"small",scroll:{y:300},"row-key":"id"},{bodyCell:b(({column:e,record:t})=>["model"===e.key?(n(),a("div",va,[s("strong",null,y(t.provider),1),s("small",null,y(t.modelId),1)])):l("",!0),"params"===e.key?(n(),m(w,{key:1,code:"",class:"params-preview"},{default:b(()=>[C(y(d(t.parameters)),1)]),_:2},1024)):l("",!0),"cost"===e.key?(n(),a(f,{key:2},[(n(),a("span",ga," $"+y(.001.toFixed(4)),1))],64)):l("",!0)]),_:1},8,["data-source"])]),s("div",ba,[r[5]||(r[5]=s("h3",null,"Prompt Template",-1)),v(S,{code:"",class:"prompt-template"},{default:b(()=>[C(y(t.trial.designSnapshot.promptTemplate),1)]),_:1})]),t.trial.variableSnapshots?.length?(n(),a("div",ya,[r[6]||(r[6]=s("h3",null,"Variables",-1)),v(T,{"data-source":u(),size:"small",split:!1},{renderItem:b(({item:e})=>[v(P,null,{default:b(()=>[v(I,null,{title:b(()=>[v(p,{color:"blue"},{default:b(()=>[C(y(e.variable),1)]),_:2},1024)]),description:b(()=>[s("span",null,y(e.listName)+" ("+y(e.count)+" values)",1)]),_:2},1024)]),_:2},1024)]),_:1},8,["data-source"])])):l("",!0)]),_:1},8,["title"])}}});class _a{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new K({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>({provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:e.parameters})),l=new Set(n.map(e=>e.provider)),s={};for(const r of l){const e=U.getProvider(r);e&&(s[r]=this.buildProviderConfig(r,e))}return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerConfigs:s}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static buildProviderConfig(e,t){const a=t.requestTransform||{},n=t.auth||{type:"none"};let l="direct";"messages"===a.promptKey&&a.wrapPrompt?l="messages":"input"===a.promptKey&&(l="input");let s,r,o="root";"ollama-chat"===e?(o="options",s={max_tokens:"num_predict",max_completion_tokens:"num_predict"}):"ollama-generate"===e&&(o="mixed",r={root:["model","prompt","stream","format","raw"],options:["temperature","num_predict","top_k","top_p"]},s={max_tokens:"num_predict",max_completion_tokens:"num_predict"});const i=Object.values(t.responseModes||{})[0],c=this.parseResponsePath(i?.responseTransform?.contentPath),d=i?.responseTransform?.fallbackPaths?.map(e=>this.parseResponsePath(e)),u=t.api.baseUrl+(t.api.endpoints.chat||t.api.endpoints.generate||"");return{name:t.name,endpoint:u,auth:{type:n.type,header:n.header,prefix:"bearer"===n.type?"Bearer":void 0},headers:t.headers,request:{modelPrefixStrip:!0,promptFormat:l,messageRole:a.messageRole,paramLocation:o,paramRenames:s,mixedParams:r},response:{successPath:c,fallbackPaths:d,errorPath:["error","message"]}}}static parseResponsePath(e){return e?e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t}):["content"]}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),s=JSON.stringify(e.providerConfigs,null,4);return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Simple Mode\n=====================================\nGenerated by Auditomatic Lite v${G.short} on ${a}\n\nThis script reproduces your experiment by generating API calls from variables.\nPerfect for understanding, modifying, and extending your experiments.\n\nOriginal trial: ${t}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${Object.keys(e.providerConfigs).map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${e}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Provider configurations (how to talk to each API)\nPROVIDER_CONFIGS = ${s}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef make_api_call(provider_id: str, model: str, prompt: str, params: dict) -> dict:\n    """\n    Universal API caller that handles all provider quirks.\n    \n    Returns dict with 'success', 'content', 'error', and timing info.\n    """\n    config = PROVIDER_CONFIGS[provider_id]\n    \n    # Build headers\n    headers = {"Content-Type": "application/json"}\n    \n    # Add authentication\n    auth = config["auth"]\n    if auth["type"] == "bearer":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = f"{auth['prefix']} {api_key}"\n    elif auth["type"] == "header":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = api_key\n    \n    # Add provider-specific headers\n    if config.get("headers"):\n        headers.update(config["headers"])\n    \n    # Build request body\n    request = config["request"]\n    \n    # Strip provider prefix from model\n    if request.get("modelPrefixStrip"):\n        model = model.split(":", 1)[-1]\n    \n    body = {"model": model}\n    \n    # Format prompt\n    if request["promptFormat"] == "messages":\n        body["messages"] = [{"role": request.get("messageRole", "user"), "content": prompt}]\n    elif request["promptFormat"] == "direct":\n        body["prompt"] = prompt\n    elif request["promptFormat"] == "input":\n        body["input"] = prompt\n    \n    # Handle parameters\n    processed_params = params.copy()\n    \n    # Apply renames\n    if request.get("paramRenames"):\n        for old_key, new_key in request["paramRenames"].items():\n            if old_key in processed_params:\n                processed_params[new_key] = processed_params.pop(old_key)\n    \n    # Place parameters\n    if request["paramLocation"] == "root":\n        body.update(processed_params)\n    elif request["paramLocation"] == "options":\n        body["options"] = processed_params\n    elif request.get("mixedParams"):\n        mixed = request["mixedParams"]\n        for key, value in processed_params.items():\n            if key in mixed.get("root", []):\n                body[key] = value\n            else:\n                if "options" not in body:\n                    body["options"] = {}\n                body["options"][key] = value\n    \n    # Make request\n    start_time = time.time()\n    try:\n        response = requests.post(\n            config["endpoint"],\n            headers=headers,\n            json=body,\n            timeout=30\n        )\n        latency_ms = (time.time() - start_time) * 1000\n        \n        if response.ok:\n            data = response.json()\n            content = extract_from_path(data, config["response"]["successPath"])\n            \n            # Try fallback paths\n            if content is None and config["response"].get("fallbackPaths"):\n                for path in config["response"]["fallbackPaths"]:\n                    content = extract_from_path(data, path)\n                    if content is not None:\n                        break\n            \n            return {\n                "success": True,\n                "content": content or "",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n        else:\n            return {\n                "success": False,\n                "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n            \n    except Exception as e:\n        return {\n            "success": False,\n            "error": str(e),\n            "latency_ms": (time.time() - start_time) * 1000\n        }\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(\n                model_config["provider"],\n                model_config["modelId"],\n                prompt,\n                model_config["parameters"]\n            )\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": result.get("content", ""),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                "status_code": result.get("status_code", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {result['content'][:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_results_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider not in API_KEYS or not API_KEYS[provider]:\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(set(missing_keys)))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns:\n            print(f"Avg latency: {df['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class Ca{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=[],a=new J,n=new K({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),l=Y(e);let s=0;for(const o of e.configurationSnapshots){const i=U.getProvider(o.provider);if(i)for(const c of n){const n=l>1?H():void 0;let d=e.designSnapshot.promptTemplate;for(const[e,t]of Object.entries(c.variables))d=d.replace(new RegExp(`{{${e}}}`,"g"),t);for(let e=0;e<l;e++){s++;try{const r={id:"export-config",name:o.name,provider:o.provider,model:o.modelId,params:o.parameters,created_at:new Date},u=a.buildAPIRequest(r,d),p={};for(const[e,t]of Object.entries(u.headers))"Authorization"===e&&t.startsWith("Bearer ")?p[e]=`Bearer $${o.provider.split("-")[0].toUpperCase()}_API_KEY`:e===i.auth.header&&"header"===i.auth.type?p[e]=`$${o.provider.split("-")[0].toUpperCase()}_API_KEY`:p[e]=t;const m=this.parseResponsePath(this.getDefaultResponsePath(o.provider));t.push({id:`call_${String(s).padStart(3,"0")}`,provider:o.provider,endpoint:u.url,headers:p,body:u.body,responsePath:m,metadata:{variables:c.variables,modelName:o.modelId,configName:o.name,...l>1&&{repeatIndex:e,repeatGroupId:n}}})}catch(r){q.warn("Failed to build API call for config",{configName:o.name,error:r})}}}}return{apiCalls:t,...e.repeatConfig&&{repeatConfig:{callsPerPrompt:e.repeatConfig.callsPerPrompt,delayBetweenRepeats:e.repeatConfig.delayBetweenRepeats}}}}static parseResponsePath(e){return e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t})}static getDefaultResponsePath(e){switch(e){case"openai-chat":case"openrouter":return"choices[0].message.content";case"openai-responses":return"output[0].content[0].text";case"anthropic":return"content[0].text";case"ollama-chat":return"message.content";case"ollama-generate":return"response";default:return"content"}}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.apiCalls,null,4),l=[...new Set(e.apiCalls.map(e=>e.provider))],s=e.repeatConfig?`\nRepeat configuration: ${e.repeatConfig.callsPerPrompt} calls per prompt${e.repeatConfig.delayBetweenRepeats?`, ${e.repeatConfig.delayBetweenRepeats}ms delay`:""}`:"";return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Literal Mode\n======================================\nGenerated by Auditomatic Lite v${G.short} on ${a}\n\nThis script contains the EXACT API calls from your experiment.\nPerfect for bit-for-bit reproduction, debugging, and comparing results.\n\nOriginal trial: ${t}\nTotal API calls: ${e.apiCalls.length}${s}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${l.map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${t}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Pre-computed API calls from your experiment\nAPI_CALLS = ${n}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef execute_literal_calls():\n    """Execute pre-serialized API calls exactly as specified"""\n    results = []\n    total = len(API_CALLS)\n    \n    print(f"Executing {total} pre-computed API calls...")\n    print("=" * 60)\n    \n    for i, call in enumerate(API_CALLS):\n        print(f"[{i+1}/{total}] {call['metadata']['configName']} - ", end="")\n        \n        # Replace API key placeholders in headers\n        headers = {}\n        for key, value in call["headers"].items():\n            if "\\$" in str(value):\n                # Extract provider name from placeholder\n                for provider_key, api_key in API_KEYS.items():\n                    placeholder = f"\\\${provider_key}_API_KEY"\n                    if placeholder in value:\n                        headers[key] = value.replace(placeholder, api_key)\n                        break\n                else:\n                    headers[key] = value\n            else:\n                headers[key] = value\n        \n        # Check if we have required API key\n        provider_base = call["provider"].split("-")[0].upper()\n        if provider_base in ["OPENAI", "ANTHROPIC", "OPENROUTER"] and not API_KEYS.get(provider_base):\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": f"No API key for {provider_base}",\n                "latency_ms": 0,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ No API key")\n            continue\n        \n        # Make the exact API call\n        start_time = time.time()\n        try:\n            response = requests.post(\n                call["endpoint"],\n                headers=headers,\n                json=call["body"],\n                timeout=30\n            )\n            latency_ms = (time.time() - start_time) * 1000\n            \n            if response.ok:\n                data = response.json()\n                content = extract_from_path(data, call["responsePath"])\n                \n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": content or "",\n                    "success": True,\n                    "error": "",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    "full_response": json.dumps(data)[:500],  # First 500 chars\n                    **call["metadata"]["variables"]\n                })\n                print(f"✓ {(content or '')[:30]}")\n            else:\n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": "",\n                    "success": False,\n                    "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    **call["metadata"]["variables"]\n                })\n                print(f"✗ HTTP {response.status_code}")\n                \n        except Exception as e:\n            latency_ms = (time.time() - start_time) * 1000\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": str(e)[:200],\n                "latency_ms": latency_ms,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ {str(e)[:30]}")\n        \n        # Handle repeat delays if configured\n        if "repeatIndex" in call["metadata"] and call["metadata"]["repeatIndex"] > 0:\n            # Check if there's a repeat delay configured\n            delay_ms = ${e.repeatConfig?.delayBetweenRepeats||0}\n            if delay_ms > 0:\n                time.sleep(delay_ms / 1000.0)\n        \n        # Rate limiting\n        time.sleep(0.1)\n    \n    return results\n\ndef extract_prompt_from_body(body: dict) -> str:\n    """Extract the prompt from various request body formats"""\n    # Messages format (OpenAI, Anthropic, etc)\n    if "messages" in body and isinstance(body["messages"], list):\n        for msg in body["messages"]:\n            if msg.get("role") == "user":\n                return msg.get("content", "")\n    \n    # Direct prompt format (Ollama generate)\n    if "prompt" in body:\n        return body["prompt"]\n    \n    # Input format (OpenAI responses)\n    if "input" in body:\n        return body["input"]\n    \n    return ""\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    # Drop full_response column for cleaner output (except JSON)\n    if format != "json" and "full_response" in df.columns:\n        df = df.drop(columns=["full_response"])\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_literal_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    required_providers = set(call["provider"].split("-")[0].upper() for call in API_CALLS)\n    missing_keys = []\n    for provider in required_providers:\n        if provider not in ["OLLAMA"] and not API_KEYS.get(provider):\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(missing_keys))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Execute all calls\n    results = execute_literal_calls()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if df['success'].any():\n            print(f"Avg latency (successful): {df[df['success']]['latency_ms'].mean():.1f}ms")\n        \n        # Group by model\n        print(f"\\nBy Model:")\n        model_summary = df.groupby('config_name')['success'].agg(['count', 'sum', 'mean'])\n        model_summary.columns = ['total', 'successful', 'success_rate']\n        print(model_summary)\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class ka{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new K({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>{let t,a="text";return e.parameters.response_format?(a="json_mode",t={response_format:e.parameters.response_format}):e.parameters.tools&&(a="function_calling",t={tools:e.parameters.tools,tool_choice:e.parameters.tool_choice}),{provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:this.filterCoreParams(e.parameters),responseMode:a,responseModeParams:t}}),l=new Set(n.map(e=>e.provider)),s={"openai-chat":"openai","openai-responses":"openai",anthropic:"anthropic",openrouter:"openai","ollama-chat":"ollama","ollama-generate":"ollama"},r=[...new Set(Array.from(l).map(e=>s[e]).filter(Boolean))],o={"openai-chat":"OPENAI","openai-responses":"OPENAI",anthropic:"ANTHROPIC",openrouter:"OPENROUTER","ollama-chat":"","ollama-generate":""},i=[...new Set(Array.from(l).map(e=>o[e]).filter(Boolean))];return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerLibraries:{required:r,apiKeys:i}}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static filterCoreParams(e){const t={...e};return delete t.response_format,delete t.tools,delete t.tool_choice,t}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),s=["import os","import json","import time","import pandas as pd","from datetime import datetime"];return e.providerLibraries.required.includes("openai")&&s.push("from openai import OpenAI"),e.providerLibraries.required.includes("anthropic")&&s.push("from anthropic import Anthropic"),e.providerLibraries.required.includes("ollama")&&s.push("import ollama"),`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Native Mode\n=====================================\nGenerated by Auditomatic Lite v${G.short} on ${a}\n\nThis script uses native Python libraries for each provider.\nCleanest code, best for production use.\n\nOriginal trial: ${t}\nRequired packages: ${e.providerLibraries.required.join(", ")}\n"""\n\n${s.join("\n")}\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\n${e.providerLibraries.apiKeys.map(e=>`os.environ.setdefault("${e}_API_KEY", "")  # Set your ${e} API key`).join("\n")}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\n# Initialize clients\nclients = {}\n\ndef get_client(provider):\n    """Get or create client for provider"""\n    if provider not in clients:\n        if provider in ["openai-chat", "openai-responses"]:\n            clients[provider] = OpenAI()\n        elif provider == "anthropic":\n            clients[provider] = Anthropic()\n        elif provider == "openrouter":\n            clients[provider] = OpenAI(\n                api_key=os.environ.get("OPENROUTER_API_KEY"),\n                base_url="https://openrouter.ai/api/v1"\n            )\n        # Ollama doesn't need a client\n    return clients.get(provider)\n\ndef make_api_call(model_config: dict, prompt: str) -> dict:\n    """Make API call using native provider library"""\n    provider = model_config["provider"]\n    model = model_config["modelId"]\n    params = model_config["parameters"].copy()\n    \n    try:\n        start_time = time.time()\n        \n        if provider == "openai-chat" or provider == "openrouter":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["response_format"] = {"type": "json_object"}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content based on response mode\n            if model_config["responseMode"] == "function_calling" and response.choices[0].message.tool_calls:\n                content = response.choices[0].message.tool_calls[0].function.arguments\n                if isinstance(content, str):\n                    content = json.loads(content)\n            else:\n                content = response.choices[0].message.content\n            \n        elif provider == "openai-responses":\n            client = get_client(provider)\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["text"] = {"format": {"type": "json_object"}}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.responses.create(\n                model=model,\n                input=prompt,\n                **params\n            )\n            \n            # Extract content\n            output = response.output\n            if isinstance(output, list) and len(output) > 0:\n                if hasattr(output[0], 'content') and isinstance(output[0].content, list):\n                    content = output[0].content[0].text if hasattr(output[0].content[0], 'text') else str(output[0].content[0])\n                else:\n                    content = str(output[0])\n            else:\n                content = str(output)\n            \n        elif provider == "anthropic":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.messages.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content\n            if model_config["responseMode"] == "function_calling" and hasattr(response.content[0], 'input'):\n                content = response.content[0].input\n            else:\n                content = response.content[0].text\n            \n        elif provider == "ollama-chat":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.chat(\n                model=model,\n                messages=[{"role": "user", "content": prompt}],\n                **params\n            )\n            \n            # Extract content\n            content = response["message"]["content"]\n            \n        elif provider == "ollama-generate":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.generate(\n                model=model,\n                prompt=prompt,\n                **params\n            )\n            \n            # Extract content\n            content = response["response"]\n        \n        else:\n            raise ValueError(f"Unknown provider: {provider}")\n        \n        latency_ms = (time.time() - start_time) * 1000\n        \n        return {\n            "success": True,\n            "content": content,\n            "latency_ms": latency_ms\n        }\n        \n    except Exception as e:\n        latency_ms = (time.time() - start_time) * 1000\n        return {\n            "success": False,\n            "content": "",\n            "error": str(e),\n            "latency_ms": latency_ms\n        }\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(model_config, prompt)\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": str(result.get("content", "")),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {str(result['content'])[:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: list, format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_native_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for required packages\n    required = ${JSON.stringify(e.providerLibraries.required)}\n    missing = []\n    for lib in required:\n        try:\n            __import__(lib)\n        except ImportError:\n            missing.append(lib)\n    \n    if missing:\n        print(f"ERROR: Missing required packages: {', '.join(missing)}")\n        print(f"Install with: pip install {' '.join(missing)}")\n        return\n    \n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider in ["openai-chat", "openai-responses"] and not os.environ.get("OPENAI_API_KEY"):\n            missing_keys.append("OPENAI_API_KEY")\n        elif provider == "anthropic" and not os.environ.get("ANTHROPIC_API_KEY"):\n            missing_keys.append("ANTHROPIC_API_KEY")\n        elif provider == "openrouter" and not os.environ.get("OPENROUTER_API_KEY"):\n            missing_keys.append("OPENROUTER_API_KEY")\n    \n    if missing_keys:\n        print(f"WARNING: Missing API keys: {', '.join(set(missing_keys))}")\n        print("Set them in the script or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns and df['success'].any():\n            print(f"Avg latency: {df[df['success']]['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class wa{static async generatePythonScript(e,t){try{const a=t||this.getDefaultOptions(),n=this.validateTrialForExport(e);if(!n.valid)throw new Error(`Trial validation failed: ${n.errors.join(", ")}`);switch(a.mode){case"simple":return _a.generate(e);case"literal":return Ca.generate(e);case"native":return ka.generate(e);default:throw new Error(`Unknown export mode: ${a.mode}`)}}catch(a){throw new Error(`Failed to generate Python export: ${a instanceof Error?a.message:String(a)}`)}}static async downloadPythonScript(e,t){const a=await this.generatePythonScript(e,t),n=t||this.getDefaultOptions(),l=new Blob([a],{type:"text/x-python"}),s=URL.createObjectURL(l),r=document.createElement("a");r.href=s,r.download=this.generateFilename(e,n.mode),document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(s)}static validateTrialForExport(e){const t=[];return e.designSnapshot?e.designSnapshot.promptTemplate||t.push("Design missing prompt template"):t.push("Trial missing design snapshot"),e.configurationSnapshots&&0!==e.configurationSnapshots.length?e.configurationSnapshots.forEach((e,a)=>{e.provider||t.push(`Configuration ${a+1} missing provider`),e.modelId||t.push(`Configuration ${a+1} missing model`),e.parameters||t.push(`Configuration ${a+1} missing parameters`)}):t.push("Trial missing model configurations"),e.variableSnapshots||t.push("Trial missing variable snapshots"),{valid:0===t.length,errors:t}}static getExportSummary(e){const t=new Set(e.configurationSnapshots.map(e=>e.provider)),a=e.totalCombinations||0;return{apiCallCount:e.configurationSnapshots.length*a,providersUsed:Array.from(t),variableCombinations:a,configurations:e.configurationSnapshots.length}}static getDefaultOptions(){return{mode:"simple"}}static generateFilename(e,t){const a=e.name||`trial_${e.id}`,n=(new Date).toISOString().split("T")[0];return`${a.toLowerCase().replace(/[^a-z0-9]/g,"_")}_${t}_${n}.py`}}const xa=Object.freeze(Object.defineProperty({__proto__:null,PythonExportService:wa},Symbol.toStringTag,{value:"Module"})),Sa={class:"trial-info"},Ia={class:"trial-stats"},Pa={class:"export-section"},Ta={class:"mode-content"},Ma={class:"mode-content"},Ea={class:"mode-content"},Aa={class:"export-section"},Na={class:"preview-content"},$a={class:"preview-info"},Oa=t({__name:"PythonExportModal",props:{trial:{}},emits:["close","exported"],setup(t,{emit:a}){const l=t,r=a,c=o("simple"),d=o(!1),u=i(()=>l.trial.progress.total),p=i(()=>l.trial.configurationSnapshots?.length||0),f=i(()=>l.trial.totalCombinations||0),h=i(()=>{const e=.05*f.value+.3*p.value;return Math.round(15+e)}),_=i(()=>{const e=.5*u.value;return Math.round(10+e)}),k=i(()=>{const e=.05*f.value+.2*p.value;return Math.round(12+e)}),w=i(()=>{const e=l.trial.name.toLowerCase().replace(/\s+/g,"_"),t=(new Date).toISOString().split("T")[0];return`${e}_${c.value}_${t}.py`}),x=i(()=>{if("simple"===c.value){return 300+(f.value+10*p.value)}if("native"===c.value){return 250+(f.value+8*p.value)}return 200+15*u.value});async function S(){d.value=!0;try{const e={mode:c.value};await wa.downloadPythonScript(l.trial,e),r("exported",w.value),r("close")}catch(e){q.error("Export failed",e),alert("Export failed: "+(e instanceof Error?e.message:"Unknown error"))}finally{d.value=!1}}return(t,a)=>{const l=g("a-button"),r=g("a-tag"),o=g("a-radio"),i=g("a-radio-group"),I=g("a-typography-text");return n(),m(e,{"model-value":!0,title:"Export Python Script",size:"full","onUpdate:modelValue":a[2]||(a[2]=e=>t.$emit("close"))},{footer:b(()=>[v(l,{onClick:a[0]||(a[0]=e=>t.$emit("close")),size:"large","data-testid":"btn-cancel-python-export","aria-label":"Cancel Python export"},{default:b(()=>a[3]||(a[3]=[C(" Cancel ")])),_:1,__:[3]}),v(l,{type:"primary",onClick:S,loading:d.value,size:"large","data-testid":"btn-confirm-python-export","data-mode":c.value,"aria-label":`Export Python script in ${c.value} mode`},{default:b(()=>a[4]||(a[4]=[C(" Export Script ")])),_:1,__:[4]},8,["loading","data-mode","aria-label"])]),default:b(()=>[s("div",Sa,[s("h3",null,y(t.trial.name),1),s("div",Ia,[v(r,null,{default:b(()=>[C(y(u.value)+" API calls",1)]),_:1}),v(r,null,{default:b(()=>[C(y(p.value)+" configurations",1)]),_:1}),v(r,null,{default:b(()=>[C(y(f.value)+" variable combinations",1)]),_:1})])]),s("div",Pa,[a[11]||(a[11]=s("h4",null,"Export Mode",-1)),v(i,{value:c.value,"onUpdate:value":a[1]||(a[1]=e=>c.value=e),class:"mode-options","data-testid":"radiogroup-export-mode","aria-label":"Select Python export mode"},{default:b(()=>[v(o,{value:"simple",class:"mode-radio","data-testid":"radio-mode-simple","aria-label":"Simple script mode"},{default:b(()=>[s("div",Ta,[a[5]||(a[5]=s("div",{class:"mode-title"},"Simple Script",-1)),a[6]||(a[6]=s("div",{class:"mode-description"}," Educational script with variables as lists. Easy to understand, modify, and extend. Perfect for learning how AI APIs work. ",-1)),v(r,{color:"blue",size:"small"},{default:b(()=>[C("~"+y(h.value)+"KB",1)]),_:1})])]),_:1}),v(o,{value:"literal",class:"mode-radio","data-testid":"radio-mode-literal","aria-label":"Literal reproduction mode"},{default:b(()=>[s("div",Ma,[a[7]||(a[7]=s("div",{class:"mode-title"},"Literal Reproduction",-1)),a[8]||(a[8]=s("div",{class:"mode-description"}," Exact API calls pre-computed. Bit-for-bit reproduction of your experiment. Best for debugging and comparing results. ",-1)),v(r,{color:"blue",size:"small"},{default:b(()=>[C("~"+y(_.value)+"KB",1)]),_:1})])]),_:1}),v(o,{value:"native",class:"mode-radio","data-testid":"radio-mode-native","aria-label":"Native libraries mode"},{default:b(()=>[s("div",Ea,[a[9]||(a[9]=s("div",{class:"mode-title"},"Native Libraries",-1)),a[10]||(a[10]=s("div",{class:"mode-description"}," Uses official Python SDKs (openai, anthropic, ollama). Cleanest code, best for production use. Requires: pip install openai anthropic ollama ",-1)),v(r,{color:"green",size:"small"},{default:b(()=>[C("~"+y(k.value)+"KB",1)]),_:1})])]),_:1})]),_:1},8,["value"])]),a[13]||(a[13]=s("div",{class:"export-section"},[s("h4",null,"Output Format"),s("div",{class:"format-info"},[s("p",null,"Both scripts save results using pandas in your choice of format:"),s("ul",null,[s("li",null,[s("strong",null,"CSV"),C(" - Universal format, opens in Excel/Google Sheets")]),s("li",null,[s("strong",null,"Excel"),C(" - Native Excel format")]),s("li",null,[s("strong",null,"JSON"),C(" - For programmatic access")]),s("li",null,[s("strong",null,"Parquet"),C(" - Efficient compressed format")]),s("li",null,[s("strong",null,"HTML"),C(" - For web viewing")]),s("li",null,[s("strong",null,"Markdown"),C(" - For documentation")]),s("li",null,[s("strong",null,"Stata"),C(" - For statistical analysis")]),s("li",null,[s("strong",null,"Pickle"),C(" - Python native format")])])])],-1)),s("div",Aa,[a[12]||(a[12]=s("h4",null,"Script Preview",-1)),s("div",Na,[v(I,{code:"",class:"preview-filename"},{default:b(()=>[C(y(w.value),1)]),_:1}),s("div",$a,[v(r,{size:"small"},{default:b(()=>[C(y(x.value)+" lines",1)]),_:1}),v(r,{size:"small"},{default:b(()=>[C(y(c.value)+" mode",1)]),_:1})])])])]),_:1,__:[13]})}}}),Fa={class:"api-call-modal"},Ra={class:"modal-header"},Da={class:"modal-content"},ja={class:"section"},Ua={class:"info-grid"},La={class:"info-item"},qa={class:"call-id"},Ba={class:"info-item"},za={class:"info-item"},Va={class:"info-item"},Ka={key:0,class:"info-item"},Ga={key:1,class:"info-item"},Ya={key:2,class:"info-item"},Ha={class:"section"},Ja={class:"variables-detail"},Wa={class:"variable-value"},Xa={key:0,class:"attributes-section"},Qa={class:"attribute-items"},Za={class:"section"},en={class:"prompt-display"},tn={key:0,class:"section"},an={key:0,class:"response-info"},nn={class:"info-grid"},ln={class:"info-item"},sn={class:"info-item"},rn={key:1,class:"result-content"},on={key:0,class:"error-result"},cn={class:"error-message"},dn={key:0,class:"error-raw"},un={class:"error-response"},pn={key:1,class:"content-result"},mn={class:"content-display"},fn={class:"section"},vn={class:"raw-data"},gn={key:1,class:"section"},bn={class:"raw-data"},yn={class:"modal-footer"},hn=N(t({__name:"APICallDetailModal",props:{apiCall:{},trial:{}},emits:["close"],setup(e){const t=e,r=i(()=>{if(!t.apiCall.request)return"No request data";const e=JSON.parse(JSON.stringify(t.apiCall.request));return e.headers&&Object.keys(e.headers).forEach(t=>{const a=t.toLowerCase();(a.includes("authorization")||a.includes("api-key")||a.includes("x-api-key")||a.includes("bearer"))&&(e.headers[t]="[REDACTED]")}),JSON.stringify(e,null,2)});function o(){return t.trial&&t.trial.configurationSnapshots[t.apiCall.configurationIndex]&&t.trial.configurationSnapshots[t.apiCall.configurationIndex].name||`Configuration ${t.apiCall.configurationIndex+1}`}function c(e){const t="string"==typeof e?new Date(e):e;return isNaN(t.getTime())?"Invalid date":t.toLocaleString()}async function d(){const e={id:t.apiCall.id,status:t.apiCall.status,configuration:o(),variables:t.apiCall.variables,variableAttributes:t.apiCall.variableAttributes,prompt:t.apiCall.prompt,request:JSON.parse(r.value),response:t.apiCall.response,result:t.apiCall.result,created:t.apiCall.created,completed:t.apiCall.completed},a=JSON.stringify(e,null,2);try{if(navigator.clipboard&&navigator.clipboard.writeText)return await navigator.clipboard.writeText(a),void L.success("Details copied to clipboard!");const e=document.createElement("textarea");e.value=a,e.style.position="fixed",e.style.left="-999999px",e.style.top="-999999px",document.body.appendChild(e),e.focus(),e.select();const t=document.execCommand("copy");if(document.body.removeChild(e),!t)throw new Error("execCommand failed");L.success("Details copied to clipboard!")}catch(n){q.error("Failed to copy to clipboard",n),prompt("Copy this text manually:",a)}}return(e,t)=>{const i=g("a-button");return n(),a("div",{class:"modal-overlay",onClick:t[2]||(t[2]=I(t=>e.$emit("close"),["self"]))},[s("div",Fa,[s("div",Ra,[t[3]||(t[3]=s("h2",null,"API Call Details",-1)),s("button",{class:"close-btn",onClick:t[0]||(t[0]=t=>e.$emit("close")),"data-testid":"btn-close-api-call-modal","aria-label":"Close API call details"},"×")]),s("div",Da,[s("div",ja,[t[11]||(t[11]=s("h3",null,"Overview",-1)),s("div",Ua,[s("div",La,[t[4]||(t[4]=s("label",null,"Call ID:",-1)),s("span",qa,y(e.apiCall.id),1)]),s("div",Ba,[t[5]||(t[5]=s("label",null,"Status:",-1)),s("span",{class:p(["status-badge",e.apiCall.status])},y(e.apiCall.status),3)]),s("div",za,[t[6]||(t[6]=s("label",null,"Configuration:",-1)),s("span",null,y(o()),1)]),s("div",Va,[t[7]||(t[7]=s("label",null,"Created:",-1)),s("span",null,y(c(e.apiCall.created)),1)]),e.apiCall.completed?(n(),a("div",Ka,[t[8]||(t[8]=s("label",null,"Completed:",-1)),s("span",null,y(c(e.apiCall.completed)),1)])):l("",!0),e.apiCall.completed?(n(),a("div",Ga,[t[9]||(t[9]=s("label",null,"Duration:",-1)),s("span",null,y((u=e.apiCall.completed.getTime()-e.apiCall.created.getTime(),u<1e3?`${u}ms`:`${(u/1e3).toFixed(1)}s`)),1)])):l("",!0),e.apiCall.response?.latencyMs?(n(),a("div",Ya,[t[10]||(t[10]=s("label",null,"API Latency:",-1)),s("span",null,y(e.apiCall.response.latencyMs)+"ms",1)])):l("",!0)])]),s("div",Ha,[t[13]||(t[13]=s("h3",null,"Variables",-1)),s("div",Ja,[(n(!0),a(f,null,_(Object.entries(e.apiCall.variables),([e,t])=>(n(),a("div",{key:e,class:"variable-item"},[s("label",null,y(e)+":",1),s("span",Wa,y(t),1)]))),128))]),e.apiCall.variableAttributes&&Object.keys(e.apiCall.variableAttributes).length>0?(n(),a("div",Xa,[t[12]||(t[12]=s("h4",null,"Variable Attributes",-1)),(n(!0),a(f,null,_(Object.entries(e.apiCall.variableAttributes),([e,t])=>(n(),a("div",{key:e,class:"attribute-group"},[s("h5",null,y(e),1),s("div",Qa,[(n(!0),a(f,null,_(Object.entries(t),([e,t])=>(n(),a("div",{key:e,class:"attribute-item"},[s("label",null,y(e)+":",1),s("span",null,y(t),1)]))),128))])]))),128))])):l("",!0)]),s("div",Za,[t[14]||(t[14]=s("h3",null,"Resolved Prompt",-1)),s("div",en,y(e.apiCall.prompt),1)]),e.apiCall.response||e.apiCall.result?(n(),a("div",tn,[t[20]||(t[20]=s("h3",null,"Response",-1)),e.apiCall.response?(n(),a("div",an,[s("div",nn,[s("div",ln,[t[15]||(t[15]=s("label",null,"HTTP Status:",-1)),s("span",null,y(e.apiCall.response.status),1)]),s("div",sn,[t[16]||(t[16]=s("label",null,"Latency:",-1)),s("span",null,y(e.apiCall.response.latencyMs)+"ms",1)])])])):l("",!0),e.apiCall.result?(n(),a("div",rn,[!1===e.apiCall.result.success?(n(),a("div",on,[t[18]||(t[18]=s("h4",null,"Error",-1)),s("div",cn,y(e.apiCall.result.error),1),e.apiCall.response?(n(),a("div",dn,[t[17]||(t[17]=s("h5",null,"Raw Response:",-1)),s("pre",un,y(JSON.stringify(e.apiCall.response,null,2)),1)])):l("",!0)])):l("",!0),e.apiCall.result.content?(n(),a("div",pn,[t[19]||(t[19]=s("h4",null,"Content",-1)),s("div",mn,y(e.apiCall.result.content),1)])):l("",!0)])):l("",!0)])):l("",!0),s("div",fn,[t[21]||(t[21]=s("h3",null,"Raw Request",-1)),s("pre",vn,y(r.value),1)]),e.apiCall.response?(n(),a("div",gn,[t[22]||(t[22]=s("h3",null,"Raw Response",-1)),s("pre",bn,y(JSON.stringify(e.apiCall.response,null,2)),1)])):l("",!0)]),s("div",yn,[v(i,{onClick:t[1]||(t[1]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-close-modal-footer","aria-label":"Close modal"},{default:b(()=>t[23]||(t[23]=[C(" Close ")])),_:1,__:[23]}),v(i,{type:"primary",onClick:d,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-copy-api-call-details","aria-label":"Copy API call details to clipboard"},{default:b(()=>t[24]||(t[24]=[C(" Copy Details ")])),_:1,__:[24]})])])]);var u}}}),[["__scopeId","data-v-d79e18d5"]]);function _n(e,t){const a=new Set,n=new Set,l=new Set;e.forEach(e=>{e.variables&&Object.keys(e.variables).forEach(e=>a.add(e)),e.variableAttributes&&Object.values(e.variableAttributes).forEach(e=>{e&&Object.keys(e).forEach(e=>n.add(e))})});const s=Array.from(a).sort(),r=Array.from(n).sort(),o=Array.from(l).sort(),i=[];t?.designSnapshot?.extractPattern&&i.push("extracted_value");const c=["success","refused",...i,...o];return{categorical:[...s,...r,"model","status","error_type"],numeric:["response_time","total_tokens","prompt_tokens","completion_tokens","extracted_value",...i].sort(),extracted:c}}function Cn(e,t,a){switch(t){case"model":if(a&&e.configurationIndex<a.configurationSnapshots.length){return a.configurationSnapshots[e.configurationIndex].modelId||"Unknown"}return"Unknown";case"status":return e.status;case"response_time":return e.response?.latencyMs||0;case"total_tokens":if(e.response?.body?.usage){const t=e.response.body.usage;return t.total_tokens||t.prompt_tokens+t.completion_tokens||0}return 0;case"prompt_tokens":return e.response?.body?.usage?.prompt_tokens||e.response?.body?.usage?.input_tokens||0;case"completion_tokens":return e.response?.body?.usage?.completion_tokens||e.response?.body?.usage?.output_tokens||0;case"error_type":return e.result?.errorType||(!1===e.result?.success?"api_error":"success");case"success":return e.result?.success?1:0;case"refused":return e.result?.refused?1:0;case"extracted_value":if(e.result?.success&&void 0!==e.result?.content){const t=String(e.result.content),a=parseFloat(t);return isNaN(a)||t.trim()!==String(a)?t:a}return null}if(void 0!==e.variables?.[t])return e.variables[t];if(e.variableAttributes)for(const n of Object.keys(e.variableAttributes)){const a=e.variableAttributes[n];if(a&&void 0!==a[t])return a[t]}return null}const kn={count:{label:"Count",calculate:e=>e.length,format:e=>e.toString(),needsNumeric:!1},sum:{label:"Sum",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mean:{label:"Mean",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0)/t.length:null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},median:{label:"Median",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(0===t.length)return null;const a=[...t].sort((e,t)=>e-t),n=Math.floor(a.length/2);return a.length%2==0?(a[n-1]+a[n])/2:a[n]},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mode:{label:"Mode",calculate:e=>{if(0===e.length)return null;const t=new Map;e.forEach(e=>t.set(e,(t.get(e)||0)+1));let a=0,n=null;return t.forEach((e,t)=>{e>a&&(a=e,n=t)}),{value:n,count:a,total:e.length}},format:e=>e?`${e.value} (${e.count}/${e.total})`:"-",needsNumeric:!1},variance:{label:"Variance",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(t.length<=1)return null;const a=t.reduce((e,t)=>e+t,0)/t.length;return t.reduce((e,t)=>e+Math.pow(t-a,2),0)/(t.length-1)},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},std_dev:{label:"Std Dev",calculate:e=>{const t=kn.variance.calculate(e);return null!==t?Math.sqrt(t):null},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},min:{label:"Min",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.min(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},max:{label:"Max",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.max(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},success_rate:{label:"Success Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.success).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},refusal_rate:{label:"Refusal Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.refused).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},avg_time:{label:"Avg Time (ms)",calculate:(e,t)=>{const a=t.filter(e=>e.response?.latencyMs).map(e=>e.response.latencyMs);return a.length>0?a.reduce((e,t)=>e+t,0)/a.length:null},format:e=>e?`${Math.round(e)}ms`:"-",needsNumeric:!1,usesApiCalls:!0}};function wn(e,t){if(!e||null===e.value)return"-";return kn[t].format(e.value)}const xn={"blue-subtle":{name:"Blue (Subtle)",colors:["rgba(59, 130, 246, 0.1)","rgba(59, 130, 246, 0.3)","rgba(59, 130, 246, 0.7)"]},"green-red":{name:"Green-Red",colors:["#dc2626","#fbbf24","#10b981"]},"blue-yellow":{name:"Blue-Yellow",colors:["#1e40af","#3b82f6","#fbbf24"]},"purple-orange":{name:"Purple-Orange",colors:["#7c3aed","#a855f7","#ff9500"]},grayscale:{name:"Grayscale",colors:["#f3f4f6","#9ca3af","#374151"]},viridis:{name:"Viridis",colors:["#440154","#482878","#3e4989","#31688e","#26828e","#1f9e89","#35b779","#6ece58","#b5de2b","#fde725"]},inferno:{name:"Inferno",colors:["#000004","#1b0c41","#4a0c6b","#781c6d","#a52c60","#cf4446","#ed6925","#fb9b06","#f7d13d","#fcffa4"]},magma:{name:"Magma",colors:["#000004","#180f3d","#440f76","#721f81","#9e2f7f","#cd4071","#f1605d","#fd9668","#feca8d","#fcfdbf"]},plasma:{name:"Plasma",colors:["#0d0887","#46039f","#7201a8","#9c179e","#bd3786","#d8576b","#ed7953","#fb9f3a","#fdca26","#f0f921"]}};function Sn(e,t){if(0===t.length)return"transparent";if(1===t.length)return t[0];e=Math.max(0,Math.min(1,e));const a=1/(t.length-1),n=Math.floor(e/a),l=e%a/a;return In(t[Math.min(n,t.length-1)],t[Math.min(n+1,t.length-1)],l)}function In(e,t,a){if(e.startsWith("rgba")&&t.startsWith("rgba")){const n=e=>{const t=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);return t?{r:parseInt(t[1]),g:parseInt(t[2]),b:parseInt(t[3]),a:t[4]?parseFloat(t[4]):1}:null},l=n(e),s=n(t);if(l&&s){return`rgba(${Math.round(l.r+(s.r-l.r)*a)}, ${Math.round(l.g+(s.g-l.g)*a)}, ${Math.round(l.b+(s.b-l.b)*a)}, ${(l.a+(s.a-l.a)*a).toFixed(2)})`}}if(e.startsWith("rgba")||t.startsWith("rgba"))return a<.5?e:t;const n=e.replace("#",""),l=t.replace("#",""),s=parseInt(n.substr(0,2),16),r=parseInt(n.substr(2,2),16),o=parseInt(n.substr(4,2),16),i=parseInt(l.substr(0,2),16),c=parseInt(l.substr(2,2),16),d=parseInt(l.substr(4,2),16),u=Math.round(s+(i-s)*a),p=Math.round(r+(c-r)*a),m=Math.round(o+(d-o)*a);return`#${u.toString(16).padStart(2,"0")}${p.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}`}function Pn(e){let t,a,n;if(e.startsWith("rgba")){const l=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);if(!l)return!1;t=parseInt(l[1]),a=parseInt(l[2]),n=parseInt(l[3])}else{const l="#"===e.charAt(0)?e.substring(1,7):e;t=parseInt(l.substring(0,2),16),a=parseInt(l.substring(2,4),16),n=parseInt(l.substring(4,6),16)}const l=[t/255,a/255,n/255].map(e=>e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4));return.2126*l[0]+.7152*l[1]+.0722*l[2]<=.179}function Tn(e){return Pn(e)?"#FFFFFF":"#000000"}function Mn(e,t,a){const{colorScales:n,interpolateColor:l,getContrastColor:s}={colorScales:xn,interpolateColor:Sn,interpolateBetweenColors:In,colorIsDarkAdvanced:Pn,getContrastColor:Tn};function r(e){if("number"==typeof e)return e;if("string"==typeof e){const t=parseFloat(e);return isNaN(t)?null:t}return null}return{getCellStyle:function(o,i,c){if(!o||null===o.value||"number"!=typeof o.value)return{};const d=n[t.value];if(!d)return{};const u=function(t,n,l){const s=r(t.value);if(null===s)return.5;if("global"===a.value){const t=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(s-e)/(a-e)}}else if("column"===a.value){const t=e.value.rows.map(e=>e.cells[l]).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(s-e)/(a-e)}}else if("row"===a.value){const t=e.value.rows.find(e=>e.label===n);if(t){const e=t.cells.filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(e.length>0){const t=Math.min(...e),a=Math.max(...e);if(a!==t)return(s-t)/(a-t)}}}return.5}(o,i,c),p=l(u,d.colors);return{backgroundColor:`${p} !important`,color:`${s(p)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},getSummaryStyle:function(a){if(!a||null===a.value||"number"!=typeof a.value)return{};const o=n[t.value];if(!o)return{};let i=.5;const c=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(c.length>0){const e=Math.min(...c),t=Math.max(...c),n=r(a.value);null!==n&&(i=t!==e?(n-e)/(t-e):.5)}const d=l(i,o.colors);return{backgroundColor:`${d} !important`,color:`${s(d)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},styleKey:i(()=>`${t.value}-${a.value}`)}}const En={class:"pivot-config"},An={class:"config-row"},Nn={class:"config-group"},$n=["value","aria-label"],On={label:"Categorical"},Fn=["value"],Rn={class:"config-group"},Dn=["value","aria-label"],jn={label:"Categorical"},Un=["value"],Ln={class:"config-group"},qn=["value","aria-label"],Bn={label:"Extracted Values"},zn=["value"],Vn={label:"Numeric Fields"},Kn=["value"],Gn={class:"config-group"},Yn=["value","aria-label"],Hn=N(t({__name:"PivotConfiguration",props:{config:{},availableFields:{}},emits:["update-config"],setup(e,{emit:t}){const l=t;function r(e,t){l("update-config",e,t)}function o(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}return(e,t)=>(n(),a("div",En,[s("div",An,[s("div",Nn,[t[4]||(t[4]=s("label",{for:"pivot-row-field"},"Rows (Group by):",-1)),s("select",{id:"pivot-row-field",value:e.config.rowField,"aria-label":"Group rows by "+o(e.config.rowField),onChange:t[0]||(t[0]=e=>r("rowField",e.target.value))},[s("optgroup",On,[(n(!0),a(f,null,_(e.availableFields.categorical,e=>(n(),a("option",{key:e,value:e},y(o(e)),9,Fn))),128))])],40,$n)]),s("div",Rn,[t[5]||(t[5]=s("label",{for:"pivot-column-field"},"Columns (Group by):",-1)),s("select",{id:"pivot-column-field",value:e.config.columnField,"aria-label":"Group columns by "+o(e.config.columnField),onChange:t[1]||(t[1]=e=>r("columnField",e.target.value))},[s("optgroup",jn,[(n(!0),a(f,null,_(e.availableFields.categorical,e=>(n(),a("option",{key:e,value:e},y(o(e)),9,Un))),128))])],40,Dn)]),s("div",Ln,[t[6]||(t[6]=s("label",{for:"pivot-value-field"},"Values (Aggregate):",-1)),s("select",{id:"pivot-value-field",value:e.config.valueField,"aria-label":"Aggregate "+e.config.valueField+" values",onChange:t[2]||(t[2]=e=>r("valueField",e.target.value))},[s("optgroup",Bn,[(n(!0),a(f,null,_(e.availableFields.extracted,e=>(n(),a("option",{key:e,value:e},y(e),9,zn))),128))]),s("optgroup",Vn,[(n(!0),a(f,null,_(e.availableFields.numeric,e=>(n(),a("option",{key:e,value:e},y(o(e)),9,Kn))),128))])],40,qn)]),s("div",Gn,[t[8]||(t[8]=s("label",{for:"pivot-aggregation"},"Aggregation:",-1)),s("select",{id:"pivot-aggregation",value:e.config.aggregation,"aria-label":"Aggregation method: "+e.config.aggregation,onChange:t[3]||(t[3]=e=>r("aggregation",e.target.value))},t[7]||(t[7]=[x('<optgroup label="Statistical" data-v-efb8a7c2><option value="mean" data-v-efb8a7c2>Mean</option><option value="median" data-v-efb8a7c2>Median</option><option value="variance" data-v-efb8a7c2>Variance</option><option value="std_dev" data-v-efb8a7c2>Std Dev</option><option value="min" data-v-efb8a7c2>Min</option><option value="max" data-v-efb8a7c2>Max</option></optgroup><optgroup label="Frequency" data-v-efb8a7c2><option value="count" data-v-efb8a7c2>Count</option><option value="mode" data-v-efb8a7c2>Mode</option></optgroup><optgroup label="Performance" data-v-efb8a7c2><option value="success_rate" data-v-efb8a7c2>Success Rate</option><option value="refusal_rate" data-v-efb8a7c2>Refusal Rate</option><option value="avg_time" data-v-efb8a7c2>Avg Time</option></optgroup>',3)]),40,Yn)])])]))}}),[["__scopeId","data-v-efb8a7c2"]]),Jn={class:"heatmap-controls"},Wn={class:"color-scale-selector"},Xn=["value","aria-label"],Qn={class:"gradient-mode-selector"},Zn={class:"gradient-toggle",role:"group","aria-label":"Gradient mode selector"},el=["aria-pressed"],tl=["aria-pressed"],al=["aria-pressed"],nl=["title","aria-label"],ll=N(t({__name:"PivotHeatmapControls",props:{selectedColorScale:{},gradientMode:{},isFullscreen:{type:Boolean}},emits:["update-color-scale","update-gradient-mode","toggle-fullscreen"],setup(e,{emit:t}){const l=t;function r(e){const t=e.target.value;l("update-color-scale",t)}function o(e){l("update-gradient-mode",e)}return(e,t)=>(n(),a("div",Jn,[s("div",Wn,[t[5]||(t[5]=s("label",{for:"heatmap-color-scale"},"Color Scale:",-1)),s("select",{id:"heatmap-color-scale",value:e.selectedColorScale,"aria-label":"Color scale: "+e.selectedColorScale,onChange:r},t[4]||(t[4]=[x('<option value="blue-subtle" data-v-4b4f9d62>Blue (Subtle)</option><option value="green-red" data-v-4b4f9d62>Green-Red (Success)</option><option value="blue-yellow" data-v-4b4f9d62>Blue-Yellow (Performance)</option><option value="purple-orange" data-v-4b4f9d62>Purple-Orange (General)</option><option value="viridis" data-v-4b4f9d62>Viridis</option><option value="inferno" data-v-4b4f9d62>Inferno</option><option value="magma" data-v-4b4f9d62>Magma</option><option value="plasma" data-v-4b4f9d62>Plasma</option><option value="grayscale" data-v-4b4f9d62>Grayscale</option>',9)]),40,Xn)]),s("div",Qn,[t[6]||(t[6]=s("label",null,"Gradient Mode:",-1)),s("div",Zn,[s("button",{type:"button",class:p(["toggle-btn",{active:"global"===e.gradientMode}]),"aria-pressed":"global"===e.gradientMode,onClick:t[0]||(t[0]=e=>o("global"))}," Global ",10,el),s("button",{type:"button",class:p(["toggle-btn",{active:"column"===e.gradientMode}]),"aria-pressed":"column"===e.gradientMode,onClick:t[1]||(t[1]=e=>o("column"))}," Per Column ",10,tl),s("button",{type:"button",class:p(["toggle-btn",{active:"row"===e.gradientMode}]),"aria-pressed":"row"===e.gradientMode,onClick:t[2]||(t[2]=e=>o("row"))}," Per Row ",10,al)])]),s("button",{type:"button",class:"fullscreen-btn",title:e.isFullscreen?"Exit Fullscreen":"Enter Fullscreen","aria-label":e.isFullscreen?"Exit fullscreen mode":"Enter fullscreen mode",onClick:t[3]||(t[3]=t=>e.$emit("toggle-fullscreen"))},y(e.isFullscreen?"⊟":"⊞"),9,nl)]))}}),[["__scopeId","data-v-4b4f9d62"]]),sl={class:"filters-row"},rl={key:0,class:"filter-group"},ol=["value"],il=["for"],cl=["id","onUpdate:modelValue","aria-label"],dl={value:""},ul=["value"],pl={key:1,class:"filter-group"},ml=["value"],fl={class:"table-view"},vl={key:0,class:"empty-state","data-testid":"empty-data-message"},gl={key:1,class:"error-state","data-testid":"invalid-aggregation-error"},bl={key:2,class:"pivot-table-container"},yl={class:"pivot-table-grid responsive-table",role:"table"},hl={role:"row"},_l={class:"corner-cell",role:"columnheader"},Cl={key:0,class:"total-header",role:"columnheader"},kl={class:"row-header",role:"rowheader"},wl=["data-testid","title","aria-label","role","onClick","onKeydown"],xl={key:0,class:"cell-content"},Sl=["title"],Il={class:"cell-value"},Pl={class:"error-message"},Tl={key:1},Ml=N(t({__name:"PivotTableCore",props:{apiCalls:{},trial:{default:null},config:{},maxTableRows:{default:1e4},showTotals:{type:Boolean,default:!0}},emits:["config-change","cell-click"],setup(e,{emit:t}){const r=e,d=t,m=o(!1),g=o("viridis"),b=o("global"),C=o({rowField:r.config?.rowField||"",columnField:r.config?.columnField||"",valueField:r.config?.valueField||"",aggregation:r.config?.aggregation||"mean"});c(()=>r.config,e=>{e&&Object.assign(C.value,e)},{deep:!0});const w=o({}),x=o([]),S=i(()=>Object.values(w.value).some(e=>""!==e)),N=P(_n(r.apiCalls,r.trial));let $=0;c(()=>r.apiCalls,e=>{if(0===e.length||0===$||e.length-$>=10){const t=x.value.length>0||S.value?x.value:e;N.value=_n(t,r.trial),$=e.length}},{immediate:!0});const O=P({});let F=0;c(()=>r.apiCalls.length,e=>{(0===e||0===F||e-F>=5)&&((()=>{if(0===r.apiCalls.length)return void(O.value={});const e={};r.apiCalls.forEach(t=>{if(r.trial&&t.configurationIndex<r.trial.configurationSnapshots.length){const a=r.trial.configurationSnapshots[t.configurationIndex].modelId||"Unknown";e.model||(e.model=new Set),e.model.add(a)}t.status&&(e.status||(e.status=new Set),e.status.add(t.status)),t.variables&&Object.entries(t.variables).forEach(([t,a])=>{a&&String(a).trim()&&(e[t]||(e[t]=new Set),e[t].add(String(a)))})});const t={};Object.entries(e).forEach(([e,a])=>{t[e]=Array.from(a).sort()}),O.value=t})(),F=e)},{immediate:!0});const R=i(()=>{const{model:e,status:t,...a}=O.value;return a});function D(){x.value=r.apiCalls.filter(e=>{if(w.value.model&&""!==w.value.model){if(!r.trial||e.configurationIndex>=r.trial.configurationSnapshots.length)return!1;if((r.trial.configurationSnapshots[e.configurationIndex].modelId||"Unknown")!==w.value.model)return!1}if(w.value.status&&""!==w.value.status&&e.status!==w.value.status)return!1;for(const[t,a]of Object.entries(w.value))if(a&&""!==a&&"model"!==t&&"status"!==t){const n=e.variables?.[t];if(n!==a)return!1}return!0})}function j(){w.value={},D()}c(()=>r.apiCalls,()=>{S.value?D():x.value=r.apiCalls},{immediate:!0});const U=i(()=>{const e=x.value.length>0||S.value?x.value:r.apiCalls;return 0===e.length?{rows:[],columns:[],totals:[],grandTotal:{value:0,count:0,apiCalls:[],rawValues:[]}}:function(e,t,a){const n=new Map,l=new Set,s=new Set;e.forEach(e=>{const r=String(Cn(e,t.rowField,a)||"Unknown"),o=String(Cn(e,t.columnField,a)||"Unknown");l.add(r),s.add(o),n.has(r)||n.set(r,new Map),n.get(r).has(o)||n.get(r).set(o,[]),n.get(r).get(o).push(e)});const r=e=>e.every(e=>!isNaN(Number(e))&&""!==e.trim())?e.sort((e,t)=>Number(e)-Number(t)):e.sort(),o=r(Array.from(l)),i=r(Array.from(s)),c=kn[t.aggregation];function d(e){const n=e.map(e=>Cn(e,t.valueField,a));if(!c||"function"!=typeof c.calculate)return q.error("Invalid aggregation function:",t.aggregation,c),{value:null,count:e.length,apiCalls:e,rawValues:n,error:"Invalid aggregation function"};const l={nonNumeric:0,nullUndefined:0};return c.needsNumeric&&(l.nonNumeric=n.filter(e=>"number"!=typeof e).length),l.nullUndefined=n.filter(e=>null==e).length,{value:c.usesApiCalls?c.calculate(n,e):c.calculate(n),count:e.length,apiCalls:e,rawValues:n,excludedCounts:l}}const u=o.map(e=>{const t=[],a=[];return i.forEach(l=>{const s=n.get(e)?.get(l)||[];t.push(s.length>0?d(s):null),a.push(...s)}),{label:e,cells:t,total:d(a)}}),p=i.map(e=>{const t=[];return o.forEach(a=>{const l=n.get(a)?.get(e)||[];t.push(...l)}),d(t)});return{rows:u,columns:i,totals:p,grandTotal:d(e)}}(e,C.value,r.trial)}),L=i(()=>U.value.rows),{getCellStyle:B,getSummaryStyle:z,styleKey:V}=Mn(U,g,b);function K(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}function G(e,t,a){if(!a)return`${e} × ${t}: No data`;let n=`${e} × ${t}: ${wn(a,C.value.aggregation)} (${a.count} calls)`;if(a.excludedCounts){const e=[];a.excludedCounts.nonNumeric>0&&e.push(`${a.excludedCounts.nonNumeric} non-numeric responses excluded`),a.excludedCounts.nullUndefined>0&&e.push(`${a.excludedCounts.nullUndefined} null/empty responses`),e.length>0&&(n+=` | ${e.join(", ")}`)}return a.error&&(n+=` - ERROR: ${a.error}`),n}function Y(e,t,a){if(!a)return`${e} by ${t}: No data`;const n=wn(a,C.value.aggregation);return a.error?`${e} by ${t}: ${n} with data integrity error: ${a.error}`:`${e} by ${t}: ${n} from ${a.count} API calls`}function H(e,t){"rowField"!==e&&"columnField"!==e&&"valueField"!==e&&"aggregation"!==e||(C.value[e]=t),d("config-change",{...C.value})}function J(e,t,a){a&&d("cell-click",{row:e,column:t,cell:a})}function W(){m.value=!m.value,m.value?document.body.style.overflow="hidden":document.body.style.overflow=""}return u(()=>{m.value&&(document.body.style.overflow="")}),c([N,()=>r.apiCalls.length],([e])=>{if(r.apiCalls.length>0&&(!C.value.rowField||""===C.value.rowField)&&e.categorical.length>0){if(C.value.rowField=e.categorical.find(e=>"model"!==e&&"status"!==e&&"error_type"!==e)||e.categorical[0]||"model",C.value.columnField=C.value.columnField||"model",C.value.valueField=C.value.valueField||"extracted_value",!C.value.aggregation||""===C.value.aggregation){const e=r.apiCalls.slice(0,3).map(e=>Cn(e,C.value.valueField,r.trial)).filter(e=>null!=e),t=e.length>0&&e.every(e=>"number"==typeof e);C.value.aggregation=t?"mean":"mode"}d("config-change",{...C.value})}},{immediate:!0}),(e,t)=>(n(),a("div",{class:p(["pivot-table-core",{fullscreen:m.value}])},[T([N.value,C.value],()=>(n(),a("div",null,[v(Hn,{config:C.value,"available-fields":N.value,onUpdateConfig:H},null,8,["config","available-fields"])])),t,0),v(ll,{"selected-color-scale":g.value,"gradient-mode":b.value,"is-fullscreen":m.value,onUpdateColorScale:t[1]||(t[1]=e=>g.value=e),onUpdateGradientMode:t[2]||(t[2]=e=>b.value=e),onToggleFullscreen:W},null,8,["selected-color-scale","gradient-mode","is-fullscreen"]),Object.keys(O.value).length>0?T([O.value,w.value],()=>(n(),a("div",{key:0,class:"data-filters"},[s("div",sl,[O.value.model&&O.value.model.length>1?(n(),a("div",rl,[t[7]||(t[7]=s("label",{for:"filter-model",class:"filter-label"},"Model:",-1)),E(s("select",{id:"filter-model","onUpdate:modelValue":t[3]||(t[3]=e=>w.value.model=e),class:"filter-select","aria-label":"Filter by model",onChange:D},[t[6]||(t[6]=s("option",{value:""},"All Models",-1)),(n(!0),a(f,null,_(O.value.model,e=>(n(),a("option",{key:e,value:e},y(e),9,ol))),128))],544),[[A,w.value.model]])])):l("",!0),(n(!0),a(f,null,_(R.value,(e,t)=>(n(),a("div",{key:t,class:"filter-group"},[s("label",{for:`filter-${t}`,class:"filter-label"},y(K(String(t)))+": ",9,il),E(s("select",{id:`filter-${t}`,"onUpdate:modelValue":e=>w.value[t]=e,class:"filter-select","aria-label":`Filter by ${K(String(t))}`,onChange:D},[s("option",dl,"All "+y(K(String(t))),1),(n(!0),a(f,null,_(e,e=>(n(),a("option",{key:e,value:e},y(e),9,ul))),128))],40,cl),[[A,w.value[t]]])]))),128)),O.value.status&&O.value.status.length>1?(n(),a("div",pl,[t[9]||(t[9]=s("label",{for:"filter-status",class:"filter-label"},"Status:",-1)),E(s("select",{id:"filter-status","onUpdate:modelValue":t[4]||(t[4]=e=>w.value.status=e),class:"filter-select","aria-label":"Filter by status",onChange:D},[t[8]||(t[8]=s("option",{value:""},"All Statuses",-1)),(n(!0),a(f,null,_(O.value.status,e=>(n(),a("option",{key:e,value:e},y(e),9,ml))),128))],544),[[A,w.value.status]])])):l("",!0),S.value?(n(),a("button",{key:2,type:"button",class:"clear-filters-btn",title:"Clear all filters","aria-label":"Clear all filters",onClick:j}," Clear Filters ")):l("",!0)])])),t,5):l("",!0),s("div",fl,[0===r.apiCalls.length?(n(),a("div",vl,t[10]||(t[10]=[s("p",null,"No data available for pivot table analysis.",-1)]))):C.value.aggregation in k(kn)?(n(),a("div",bl,[s("table",yl,[s("thead",null,[s("tr",hl,[s("th",_l,y(K(C.value.rowField)||"Items")+" / "+y(K(C.value.columnField)||"Aggregated"),1),(n(!0),a(f,null,_(U.value.columns,e=>(n(),a("th",{key:e,class:"column-header",role:"columnheader"},y(e),1))),128)),C.value.columnField&&e.showTotals?(n(),a("th",Cl," Total ")):l("",!0)])]),s("tbody",null,[(n(!0),a(f,null,_(L.value,t=>(n(),a("tr",{key:`${t.label}-${k(V)}`,class:"data-row",role:"row"},[s("td",kl,y(t.label),1),(n(!0),a(f,null,_(t.cells,(e,l)=>(n(),a("td",{key:`${l}-${k(V)}`,class:p(["data-cell",{"error-cell":e?.error}]),"data-testid":e?.error?"pivot-cell-error":"pivot-cell",style:h(k(B)(e,t.label,l)),title:G(t.label,U.value.columns[l],e),"aria-label":Y(t.label,U.value.columns[l],e),role:e?.error?"alert":"cell",tabindex:"0",onClick:a=>J(t.label,U.value.columns[l],e),onKeydown:[M(a=>J(t.label,U.value.columns[l],e),["enter"]),M(I(a=>J(t.label,U.value.columns[l],e),["prevent"]),["space"])]},[e?.error?(n(),a("div",xl,[s("span",{class:"error-indicator",title:e.error},"⚠️",8,Sl),s("span",Il,y(e?k(wn)(e,C.value.aggregation):"-"),1),s("div",Pl,y(e.error),1)])):(n(),a("span",Tl,y(e?k(wn)(e,C.value.aggregation):"-"),1))],46,wl))),128)),C.value.columnField&&e.showTotals?(n(),a("td",{key:0,class:"total-cell",style:h(k(z)(t.total)),role:"cell"},y(k(wn)(t.total,C.value.aggregation)),5)):l("",!0)]))),128)),C.value.rowField&&e.showTotals?(n(),a("tr",{key:`totals-${k(V)}`,class:"total-row",role:"row"},[t[12]||(t[12]=s("td",{class:"row-header",role:"rowheader"},"Total",-1)),(n(!0),a(f,null,_(U.value.totals,(e,t)=>(n(),a("td",{key:`total-${t}-${k(V)}`,class:"total-cell",style:h(k(z)(e)),role:"cell"},y(k(wn)(e,C.value.aggregation)),5))),128)),C.value.columnField?(n(),a("td",{key:0,class:"grand-total-cell",style:h(k(z)(U.value.grandTotal)),role:"cell"},y(k(wn)(U.value.grandTotal,C.value.aggregation)),5)):l("",!0)])):l("",!0)])])])):(n(),a("div",gl,[s("p",null,"Invalid aggregation function: "+y(C.value.aggregation),1),t[11]||(t[11]=s("p",null,"Please select a valid aggregation method.",-1))]))])],2))}}),[["__scopeId","data-v-6da58b58"]]);export{hn as A,Ml as P,ra as T,ha as _,Oa as a,xa as p};
