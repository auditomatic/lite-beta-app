import{d as e,c as t,a6 as a,B as n,_ as l,a1 as s,a0 as o,ab as r,F as i,a8 as c,k as d,W as u,Z as p,Y as m,G as f,a7 as v,f as g,w as b,s as y,b as h,al as _,u as C,ae as k,ad as w,q as x,aj as S,ag as I,o as P,V as T,H as M,n as E}from"./vendor-DImCB_rW.js";import{f as A,l as N,_ as O,k as $,m as F,q as R,s as D,a as j,u as q,p as U,E as L,v as B,d as V,N as z,A as K,O as G,Q as Y,V as H}from"./index-Dynr8V5n.js";import{_ as J}from"./BaseModal.vue_vue_type_style_index_0_lang-D3rbY83j.js";import{u as W}from"./designs-db-b5FxS9e9.js";import{u as X}from"./variables-db-DLw3DExB.js";import{u as Q}from"./models-db-ClcV8tSQ.js";import{u as Z}from"./useEnvironmentalCost-CfIURcPO.js";import{a as ee}from"./cost-formatting-Bv_drrqY.js";import{G as te}from"./GenericModelSelectorModal-B1wj_vmD.js";const ae={class:"api-call-modal"},ne={class:"modal-header"},le={class:"modal-content"},se={class:"section"},oe={class:"info-grid"},re={class:"info-item"},ie={class:"call-id"},ce={class:"info-item"},de={class:"info-item"},ue={class:"info-item"},pe={key:0,class:"info-item"},me={key:1,class:"info-item"},fe={key:2,class:"info-item"},ve={class:"section"},ge={class:"variables-detail"},be={class:"variable-value"},ye={key:0,class:"attributes-section"},he={class:"attribute-items"},_e={class:"section"},Ce={class:"prompt-display"},ke={key:0,class:"section"},we={key:0,class:"response-info"},xe={class:"info-grid"},Se={class:"info-item"},Ie={class:"info-item"},Pe={key:1,class:"result-content"},Te={key:0,class:"error-result"},Me={class:"error-message"},Ee={key:0,class:"error-raw"},Ae={class:"error-response"},Ne={key:1,class:"content-result"},Oe={class:"content-display"},$e={class:"section"},Fe={class:"raw-data"},Re={key:1,class:"section"},De={class:"raw-data"},je={class:"modal-footer"},qe=O(e({__name:"APICallDetailModal",props:{apiCall:{},trial:{}},emits:["close"],setup(e){const v=e,g=t(()=>{if(!v.apiCall.request)return"No request data";const e=JSON.parse(JSON.stringify(v.apiCall.request));return e.headers&&Object.keys(e.headers).forEach(t=>{const a=t.toLowerCase();(a.includes("authorization")||a.includes("api-key")||a.includes("x-api-key")||a.includes("bearer"))&&(e.headers[t]="[REDACTED]")}),JSON.stringify(e,null,2)});function b(){return v.trial&&v.trial.configurationSnapshots[v.apiCall.configurationIndex]&&v.trial.configurationSnapshots[v.apiCall.configurationIndex].name||`Configuration ${v.apiCall.configurationIndex+1}`}function y(e){const t="string"==typeof e?new Date(e):e;return isNaN(t.getTime())?"Invalid date":t.toLocaleString()}async function h(){const e={id:v.apiCall.id,status:v.apiCall.status,configuration:b(),variables:v.apiCall.variables,variableAttributes:v.apiCall.variableAttributes,prompt:v.apiCall.prompt,request:JSON.parse(g.value),response:v.apiCall.response,result:v.apiCall.result,created:v.apiCall.created,completed:v.apiCall.completed},t=JSON.stringify(e,null,2);try{if(navigator.clipboard&&navigator.clipboard.writeText)return await navigator.clipboard.writeText(t),void A.success("Details copied to clipboard!");const e=document.createElement("textarea");e.value=t,e.style.position="fixed",e.style.left="-999999px",e.style.top="-999999px",document.body.appendChild(e),e.focus(),e.select();const a=document.execCommand("copy");if(document.body.removeChild(e),!a)throw new Error("execCommand failed");A.success("Details copied to clipboard!")}catch(a){N.error("Failed to copy to clipboard",a),prompt("Copy this text manually:",t)}}return(e,t)=>{const v=u("a-button");return m(),a("div",{class:"modal-overlay",onClick:t[2]||(t[2]=n(t=>e.$emit("close"),["self"]))},[l("div",ae,[l("div",ne,[t[3]||(t[3]=l("h2",null,"API Call Details",-1)),l("button",{class:"close-btn",onClick:t[0]||(t[0]=t=>e.$emit("close")),"data-testid":"btn-close-api-call-modal","aria-label":"Close API call details"},"×")]),l("div",le,[l("div",se,[t[11]||(t[11]=l("h3",null,"Overview",-1)),l("div",oe,[l("div",re,[t[4]||(t[4]=l("label",null,"Call ID:",-1)),l("span",ie,o(e.apiCall.id),1)]),l("div",ce,[t[5]||(t[5]=l("label",null,"Status:",-1)),l("span",{class:r(["status-badge",e.apiCall.status])},o(e.apiCall.status),3)]),l("div",de,[t[6]||(t[6]=l("label",null,"Configuration:",-1)),l("span",null,o(b()),1)]),l("div",ue,[t[7]||(t[7]=l("label",null,"Created:",-1)),l("span",null,o(y(e.apiCall.created)),1)]),e.apiCall.completed?(m(),a("div",pe,[t[8]||(t[8]=l("label",null,"Completed:",-1)),l("span",null,o(y(e.apiCall.completed)),1)])):s("",!0),e.apiCall.completed?(m(),a("div",me,[t[9]||(t[9]=l("label",null,"Duration:",-1)),l("span",null,o((_=e.apiCall.completed.getTime()-e.apiCall.created.getTime(),_<1e3?`${_}ms`:`${(_/1e3).toFixed(1)}s`)),1)])):s("",!0),e.apiCall.response?.latencyMs?(m(),a("div",fe,[t[10]||(t[10]=l("label",null,"API Latency:",-1)),l("span",null,o(e.apiCall.response.latencyMs)+"ms",1)])):s("",!0)])]),l("div",ve,[t[13]||(t[13]=l("h3",null,"Variables",-1)),l("div",ge,[(m(!0),a(i,null,c(Object.entries(e.apiCall.variables),([e,t])=>(m(),a("div",{key:e,class:"variable-item"},[l("label",null,o(e)+":",1),l("span",be,o(t),1)]))),128))]),e.apiCall.variableAttributes&&Object.keys(e.apiCall.variableAttributes).length>0?(m(),a("div",ye,[t[12]||(t[12]=l("h4",null,"Variable Attributes",-1)),(m(!0),a(i,null,c(Object.entries(e.apiCall.variableAttributes),([e,t])=>(m(),a("div",{key:e,class:"attribute-group"},[l("h5",null,o(e),1),l("div",he,[(m(!0),a(i,null,c(Object.entries(t),([e,t])=>(m(),a("div",{key:e,class:"attribute-item"},[l("label",null,o(e)+":",1),l("span",null,o(t),1)]))),128))])]))),128))])):s("",!0)]),l("div",_e,[t[14]||(t[14]=l("h3",null,"Resolved Prompt",-1)),l("div",Ce,o(e.apiCall.prompt),1)]),e.apiCall.response||e.apiCall.result?(m(),a("div",ke,[t[20]||(t[20]=l("h3",null,"Response",-1)),e.apiCall.response?(m(),a("div",we,[l("div",xe,[l("div",Se,[t[15]||(t[15]=l("label",null,"HTTP Status:",-1)),l("span",null,o(e.apiCall.response.status),1)]),l("div",Ie,[t[16]||(t[16]=l("label",null,"Latency:",-1)),l("span",null,o(e.apiCall.response.latencyMs)+"ms",1)])])])):s("",!0),e.apiCall.result?(m(),a("div",Pe,[!1===e.apiCall.result.success?(m(),a("div",Te,[t[18]||(t[18]=l("h4",null,"Error",-1)),l("div",Me,o(e.apiCall.result.error),1),e.apiCall.response?(m(),a("div",Ee,[t[17]||(t[17]=l("h5",null,"Raw Response:",-1)),l("pre",Ae,o(JSON.stringify(e.apiCall.response,null,2)),1)])):s("",!0)])):s("",!0),e.apiCall.result.content?(m(),a("div",Ne,[t[19]||(t[19]=l("h4",null,"Content",-1)),l("div",Oe,o(e.apiCall.result.content),1)])):s("",!0)])):s("",!0)])):s("",!0),l("div",$e,[t[21]||(t[21]=l("h3",null,"Raw Request",-1)),l("pre",Fe,o(g.value),1)]),e.apiCall.response?(m(),a("div",Re,[t[22]||(t[22]=l("h3",null,"Raw Response",-1)),l("pre",De,o(JSON.stringify(e.apiCall.response,null,2)),1)])):s("",!0)]),l("div",je,[d(v,{onClick:t[1]||(t[1]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-close-modal-footer","aria-label":"Close modal"},{default:p(()=>t[23]||(t[23]=[f(" Close ")])),_:1,__:[23]}),d(v,{type:"primary",onClick:h,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-copy-api-call-details","aria-label":"Copy API call details to clipboard"},{default:p(()=>t[24]||(t[24]=[f(" Copy Details ")])),_:1,__:[24]})])])]);var _}}}),[["__scopeId","data-v-d79e18d5"]]);function Ue(e,t){const a=new Set,n=new Set,l=new Set;e.forEach(e=>{e.variables&&Object.keys(e.variables).forEach(e=>a.add(e)),e.variableAttributes&&Object.values(e.variableAttributes).forEach(e=>{e&&Object.keys(e).forEach(e=>n.add(e))})});const s=Array.from(a).sort(),o=Array.from(n).sort(),r=Array.from(l).sort(),i=[];t?.designSnapshot?.extractPattern&&i.push("extracted_value");const c=["success","refused",...i,...r];return{categorical:[...s,...o,"model","status","error_type"],numeric:["response_time","total_tokens","prompt_tokens","completion_tokens","extracted_value",...i].sort(),extracted:c}}function Le(e,t,a){switch(t){case"model":if(a&&e.configurationIndex<a.configurationSnapshots.length){return a.configurationSnapshots[e.configurationIndex].modelId||"Unknown"}return"Unknown";case"status":return e.status;case"response_time":return e.response?.latencyMs||0;case"total_tokens":if(e.response?.body?.usage){const t=e.response.body.usage;return t.total_tokens||t.prompt_tokens+t.completion_tokens||0}return 0;case"prompt_tokens":return e.response?.body?.usage?.prompt_tokens||e.response?.body?.usage?.input_tokens||0;case"completion_tokens":return e.response?.body?.usage?.completion_tokens||e.response?.body?.usage?.output_tokens||0;case"error_type":return e.result?.errorType||(!1===e.result?.success?"api_error":"success");case"success":return e.result?.success?1:0;case"refused":return e.result?.refused?1:0;case"extracted_value":if(e.result?.success&&void 0!==e.result?.content){const t=String(e.result.content),a=parseFloat(t);return isNaN(a)||t.trim()!==String(a)?t:a}return null}if(void 0!==e.variables?.[t])return e.variables[t];if(e.variableAttributes)for(const n of Object.keys(e.variableAttributes)){const a=e.variableAttributes[n];if(a&&void 0!==a[t])return a[t]}return null}const Be={count:{label:"Count",calculate:e=>e.length,format:e=>e.toString(),needsNumeric:!1},sum:{label:"Sum",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mean:{label:"Mean",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0)/t.length:null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},median:{label:"Median",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(0===t.length)return null;const a=[...t].sort((e,t)=>e-t),n=Math.floor(a.length/2);return a.length%2==0?(a[n-1]+a[n])/2:a[n]},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mode:{label:"Mode",calculate:e=>{if(0===e.length)return null;const t=new Map;e.forEach(e=>t.set(e,(t.get(e)||0)+1));let a=0,n=null;return t.forEach((e,t)=>{e>a&&(a=e,n=t)}),{value:n,count:a,total:e.length}},format:e=>e?`${e.value} (${e.count}/${e.total})`:"-",needsNumeric:!1},variance:{label:"Variance",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(t.length<=1)return null;const a=t.reduce((e,t)=>e+t,0)/t.length;return t.reduce((e,t)=>e+Math.pow(t-a,2),0)/(t.length-1)},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},std_dev:{label:"Std Dev",calculate:e=>{const t=Be.variance.calculate(e);return null!==t?Math.sqrt(t):null},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},min:{label:"Min",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.min(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},max:{label:"Max",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.max(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},success_rate:{label:"Success Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.success).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},refusal_rate:{label:"Refusal Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.refused).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},avg_time:{label:"Avg Time (ms)",calculate:(e,t)=>{const a=t.filter(e=>e.response?.latencyMs).map(e=>e.response.latencyMs);return a.length>0?a.reduce((e,t)=>e+t,0)/a.length:null},format:e=>e?`${Math.round(e)}ms`:"-",needsNumeric:!1,usesApiCalls:!0}};function Ve(e,t){if(!e||null===e.value)return"-";return Be[t].format(e.value)}const ze={"blue-subtle":{name:"Blue (Subtle)",colors:["rgba(59, 130, 246, 0.1)","rgba(59, 130, 246, 0.3)","rgba(59, 130, 246, 0.7)"]},"green-red":{name:"Green-Red",colors:["#dc2626","#fbbf24","#10b981"]},"blue-yellow":{name:"Blue-Yellow",colors:["#1e40af","#3b82f6","#fbbf24"]},"purple-orange":{name:"Purple-Orange",colors:["#7c3aed","#a855f7","#ff9500"]},grayscale:{name:"Grayscale",colors:["#f3f4f6","#9ca3af","#374151"]},viridis:{name:"Viridis",colors:["#440154","#482878","#3e4989","#31688e","#26828e","#1f9e89","#35b779","#6ece58","#b5de2b","#fde725"]},inferno:{name:"Inferno",colors:["#000004","#1b0c41","#4a0c6b","#781c6d","#a52c60","#cf4446","#ed6925","#fb9b06","#f7d13d","#fcffa4"]},magma:{name:"Magma",colors:["#000004","#180f3d","#440f76","#721f81","#9e2f7f","#cd4071","#f1605d","#fd9668","#feca8d","#fcfdbf"]},plasma:{name:"Plasma",colors:["#0d0887","#46039f","#7201a8","#9c179e","#bd3786","#d8576b","#ed7953","#fb9f3a","#fdca26","#f0f921"]}};function Ke(e,t){if(0===t.length)return"transparent";if(1===t.length)return t[0];e=Math.max(0,Math.min(1,e));const a=1/(t.length-1),n=Math.floor(e/a),l=e%a/a;return Ge(t[Math.min(n,t.length-1)],t[Math.min(n+1,t.length-1)],l)}function Ge(e,t,a){if(e.startsWith("rgba")&&t.startsWith("rgba")){const n=e=>{const t=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);return t?{r:parseInt(t[1]),g:parseInt(t[2]),b:parseInt(t[3]),a:t[4]?parseFloat(t[4]):1}:null},l=n(e),s=n(t);if(l&&s){return`rgba(${Math.round(l.r+(s.r-l.r)*a)}, ${Math.round(l.g+(s.g-l.g)*a)}, ${Math.round(l.b+(s.b-l.b)*a)}, ${(l.a+(s.a-l.a)*a).toFixed(2)})`}}if(e.startsWith("rgba")||t.startsWith("rgba"))return a<.5?e:t;const n=e.replace("#",""),l=t.replace("#",""),s=parseInt(n.substr(0,2),16),o=parseInt(n.substr(2,2),16),r=parseInt(n.substr(4,2),16),i=parseInt(l.substr(0,2),16),c=parseInt(l.substr(2,2),16),d=parseInt(l.substr(4,2),16),u=Math.round(s+(i-s)*a),p=Math.round(o+(c-o)*a),m=Math.round(r+(d-r)*a);return`#${u.toString(16).padStart(2,"0")}${p.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}`}function Ye(e){let t,a,n;if(e.startsWith("rgba")){const l=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);if(!l)return!1;t=parseInt(l[1]),a=parseInt(l[2]),n=parseInt(l[3])}else{const l="#"===e.charAt(0)?e.substring(1,7):e;t=parseInt(l.substring(0,2),16),a=parseInt(l.substring(2,4),16),n=parseInt(l.substring(4,6),16)}const l=[t/255,a/255,n/255].map(e=>e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4));return.2126*l[0]+.7152*l[1]+.0722*l[2]<=.179}function He(e){return Ye(e)?"#FFFFFF":"#000000"}function Je(e,a,n){const{colorScales:l,interpolateColor:s,getContrastColor:o}={colorScales:ze,interpolateColor:Ke,interpolateBetweenColors:Ge,colorIsDarkAdvanced:Ye,getContrastColor:He};function r(e){if("number"==typeof e)return e;if("string"==typeof e){const t=parseFloat(e);return isNaN(t)?null:t}return null}return{getCellStyle:function(t,i,c){if(!t||null===t.value||"number"!=typeof t.value)return{};const d=l[a.value];if(!d)return{};const u=function(t,a,l){const s=r(t.value);if(null===s)return.5;if("global"===n.value){const t=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(s-e)/(a-e)}}else if("column"===n.value){const t=e.value.rows.map(e=>e.cells[l]).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(s-e)/(a-e)}}else if("row"===n.value){const t=e.value.rows.find(e=>e.label===a);if(t){const e=t.cells.filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(e.length>0){const t=Math.min(...e),a=Math.max(...e);if(a!==t)return(s-t)/(a-t)}}}return.5}(t,i,c),p=s(u,d.colors);return{backgroundColor:`${p} !important`,color:`${o(p)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},getSummaryStyle:function(t){if(!t||null===t.value||"number"!=typeof t.value)return{};const n=l[a.value];if(!n)return{};let i=.5;const c=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>r(e.value)).filter(e=>null!==e);if(c.length>0){const e=Math.min(...c),a=Math.max(...c),n=r(t.value);null!==n&&(i=a!==e?(n-e)/(a-e):.5)}const d=s(i,n.colors);return{backgroundColor:`${d} !important`,color:`${o(d)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},styleKey:t(()=>`${a.value}-${n.value}`)}}const We={class:"pivot-config"},Xe={class:"config-row"},Qe={class:"config-group"},Ze=["value","aria-label"],et={label:"Categorical"},tt=["value"],at={class:"config-group"},nt=["value","aria-label"],lt={label:"Categorical"},st=["value"],ot={class:"config-group"},rt=["value","aria-label"],it={label:"Extracted Values"},ct=["value"],dt={label:"Numeric Fields"},ut=["value"],pt={class:"config-group"},mt=["value","aria-label"],ft=O(e({__name:"PivotConfiguration",props:{config:{},availableFields:{}},emits:["update-config"],setup(e,{emit:t}){const n=t;function s(e,t){n("update-config",e,t)}function r(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}return(e,t)=>(m(),a("div",We,[l("div",Xe,[l("div",Qe,[t[4]||(t[4]=l("label",{for:"pivot-row-field"},"Rows (Group by):",-1)),l("select",{id:"pivot-row-field",value:e.config.rowField,"aria-label":"Group rows by "+r(e.config.rowField),onChange:t[0]||(t[0]=e=>s("rowField",e.target.value))},[l("optgroup",et,[(m(!0),a(i,null,c(e.availableFields.categorical,e=>(m(),a("option",{key:e,value:e},o(r(e)),9,tt))),128))])],40,Ze)]),l("div",at,[t[5]||(t[5]=l("label",{for:"pivot-column-field"},"Columns (Group by):",-1)),l("select",{id:"pivot-column-field",value:e.config.columnField,"aria-label":"Group columns by "+r(e.config.columnField),onChange:t[1]||(t[1]=e=>s("columnField",e.target.value))},[l("optgroup",lt,[(m(!0),a(i,null,c(e.availableFields.categorical,e=>(m(),a("option",{key:e,value:e},o(r(e)),9,st))),128))])],40,nt)]),l("div",ot,[t[6]||(t[6]=l("label",{for:"pivot-value-field"},"Values (Aggregate):",-1)),l("select",{id:"pivot-value-field",value:e.config.valueField,"aria-label":"Aggregate "+e.config.valueField+" values",onChange:t[2]||(t[2]=e=>s("valueField",e.target.value))},[l("optgroup",it,[(m(!0),a(i,null,c(e.availableFields.extracted,e=>(m(),a("option",{key:e,value:e},o(e),9,ct))),128))]),l("optgroup",dt,[(m(!0),a(i,null,c(e.availableFields.numeric,e=>(m(),a("option",{key:e,value:e},o(r(e)),9,ut))),128))])],40,rt)]),l("div",pt,[t[8]||(t[8]=l("label",{for:"pivot-aggregation"},"Aggregation:",-1)),l("select",{id:"pivot-aggregation",value:e.config.aggregation,"aria-label":"Aggregation method: "+e.config.aggregation,onChange:t[3]||(t[3]=e=>s("aggregation",e.target.value))},t[7]||(t[7]=[v('<optgroup label="Statistical" data-v-efb8a7c2><option value="mean" data-v-efb8a7c2>Mean</option><option value="median" data-v-efb8a7c2>Median</option><option value="variance" data-v-efb8a7c2>Variance</option><option value="std_dev" data-v-efb8a7c2>Std Dev</option><option value="min" data-v-efb8a7c2>Min</option><option value="max" data-v-efb8a7c2>Max</option></optgroup><optgroup label="Frequency" data-v-efb8a7c2><option value="count" data-v-efb8a7c2>Count</option><option value="mode" data-v-efb8a7c2>Mode</option></optgroup><optgroup label="Performance" data-v-efb8a7c2><option value="success_rate" data-v-efb8a7c2>Success Rate</option><option value="refusal_rate" data-v-efb8a7c2>Refusal Rate</option><option value="avg_time" data-v-efb8a7c2>Avg Time</option></optgroup>',3)]),40,mt)])])]))}}),[["__scopeId","data-v-efb8a7c2"]]),vt={class:"heatmap-controls"},gt={class:"color-scale-selector"},bt=["value","aria-label"],yt={class:"gradient-mode-selector"},ht={class:"gradient-toggle",role:"group","aria-label":"Gradient mode selector"},_t=["aria-pressed"],Ct=["aria-pressed"],kt=["aria-pressed"],wt=["title","aria-label"],xt=O(e({__name:"PivotHeatmapControls",props:{selectedColorScale:{},gradientMode:{},isFullscreen:{type:Boolean}},emits:["update-color-scale","update-gradient-mode","toggle-fullscreen"],setup(e,{emit:t}){const n=t;function s(e){const t=e.target.value;n("update-color-scale",t)}function i(e){n("update-gradient-mode",e)}return(e,t)=>(m(),a("div",vt,[l("div",gt,[t[5]||(t[5]=l("label",{for:"heatmap-color-scale"},"Color Scale:",-1)),l("select",{id:"heatmap-color-scale",value:e.selectedColorScale,"aria-label":"Color scale: "+e.selectedColorScale,onChange:s},t[4]||(t[4]=[v('<option value="blue-subtle" data-v-4b4f9d62>Blue (Subtle)</option><option value="green-red" data-v-4b4f9d62>Green-Red (Success)</option><option value="blue-yellow" data-v-4b4f9d62>Blue-Yellow (Performance)</option><option value="purple-orange" data-v-4b4f9d62>Purple-Orange (General)</option><option value="viridis" data-v-4b4f9d62>Viridis</option><option value="inferno" data-v-4b4f9d62>Inferno</option><option value="magma" data-v-4b4f9d62>Magma</option><option value="plasma" data-v-4b4f9d62>Plasma</option><option value="grayscale" data-v-4b4f9d62>Grayscale</option>',9)]),40,bt)]),l("div",yt,[t[6]||(t[6]=l("label",null,"Gradient Mode:",-1)),l("div",ht,[l("button",{type:"button",class:r(["toggle-btn",{active:"global"===e.gradientMode}]),"aria-pressed":"global"===e.gradientMode,onClick:t[0]||(t[0]=e=>i("global"))}," Global ",10,_t),l("button",{type:"button",class:r(["toggle-btn",{active:"column"===e.gradientMode}]),"aria-pressed":"column"===e.gradientMode,onClick:t[1]||(t[1]=e=>i("column"))}," Per Column ",10,Ct),l("button",{type:"button",class:r(["toggle-btn",{active:"row"===e.gradientMode}]),"aria-pressed":"row"===e.gradientMode,onClick:t[2]||(t[2]=e=>i("row"))}," Per Row ",10,kt)])]),l("button",{type:"button",class:"fullscreen-btn",title:e.isFullscreen?"Exit Fullscreen":"Enter Fullscreen","aria-label":e.isFullscreen?"Exit fullscreen mode":"Enter fullscreen mode",onClick:t[3]||(t[3]=t=>e.$emit("toggle-fullscreen"))},o(e.isFullscreen?"⊟":"⊞"),9,wt)]))}}),[["__scopeId","data-v-4b4f9d62"]]),St={class:"filters-row"},It={key:0,class:"filter-group"},Pt=["value"],Tt=["for"],Mt=["id","onUpdate:modelValue","aria-label"],Et={value:""},At=["value"],Nt={key:1,class:"filter-group"},Ot=["value"],$t={class:"table-view"},Ft={key:0,class:"empty-state","data-testid":"empty-data-message"},Rt={key:1,class:"error-state","data-testid":"invalid-aggregation-error"},Dt={key:2,class:"pivot-table-container"},jt={class:"pivot-table-grid responsive-table",role:"table"},qt={role:"row"},Ut={class:"corner-cell",role:"columnheader"},Lt={key:0,class:"total-header",role:"columnheader"},Bt={class:"row-header",role:"rowheader"},Vt=["data-testid","title","aria-label","role","onClick","onKeydown"],zt={key:0,class:"cell-content"},Kt=["title"],Gt={class:"cell-value"},Yt={class:"error-message"},Ht={key:1},Jt=O(e({__name:"PivotTableCore",props:{apiCalls:{},trial:{default:null},config:{},maxTableRows:{default:1e4},showTotals:{type:Boolean,default:!0}},emits:["config-change","cell-click"],setup(e,{emit:u}){const p=e,f=u,v=g(!1),I=g("viridis"),P=g("global"),T=g({rowField:p.config?.rowField||"",columnField:p.config?.columnField||"",valueField:p.config?.valueField||"",aggregation:p.config?.aggregation||"mean"});b(()=>p.config,e=>{e&&Object.assign(T.value,e)},{deep:!0});const M=g({}),E=g([]),A=t(()=>Object.values(M.value).some(e=>""!==e)),O=y(Ue(p.apiCalls,p.trial));let $=0;b(()=>p.apiCalls,e=>{if(0===e.length||0===$||e.length-$>=10){const t=E.value.length>0||A.value?E.value:e;O.value=Ue(t,p.trial),$=e.length}},{immediate:!0});const F=y({});let R=0;b(()=>p.apiCalls.length,e=>{(0===e||0===R||e-R>=5)&&((()=>{if(0===p.apiCalls.length)return void(F.value={});const e={};p.apiCalls.forEach(t=>{if(p.trial&&t.configurationIndex<p.trial.configurationSnapshots.length){const a=p.trial.configurationSnapshots[t.configurationIndex].modelId||"Unknown";e.model||(e.model=new Set),e.model.add(a)}t.status&&(e.status||(e.status=new Set),e.status.add(t.status)),t.variables&&Object.entries(t.variables).forEach(([t,a])=>{a&&String(a).trim()&&(e[t]||(e[t]=new Set),e[t].add(String(a)))})});const t={};Object.entries(e).forEach(([e,a])=>{t[e]=Array.from(a).sort()}),F.value=t})(),R=e)},{immediate:!0});const D=t(()=>{const{model:e,status:t,...a}=F.value;return a});function j(){E.value=p.apiCalls.filter(e=>{if(M.value.model&&""!==M.value.model){if(!p.trial||e.configurationIndex>=p.trial.configurationSnapshots.length)return!1;if((p.trial.configurationSnapshots[e.configurationIndex].modelId||"Unknown")!==M.value.model)return!1}if(M.value.status&&""!==M.value.status&&e.status!==M.value.status)return!1;for(const[t,a]of Object.entries(M.value))if(a&&""!==a&&"model"!==t&&"status"!==t){const n=e.variables?.[t];if(n!==a)return!1}return!0})}function q(){M.value={},j()}b(()=>p.apiCalls,()=>{A.value?j():E.value=p.apiCalls},{immediate:!0});const U=t(()=>{const e=E.value.length>0||A.value?E.value:p.apiCalls;return 0===e.length?{rows:[],columns:[],totals:[],grandTotal:{value:0,count:0,apiCalls:[],rawValues:[]}}:function(e,t,a){const n=new Map,l=new Set,s=new Set;e.forEach(e=>{const o=String(Le(e,t.rowField,a)||"Unknown"),r=String(Le(e,t.columnField,a)||"Unknown");l.add(o),s.add(r),n.has(o)||n.set(o,new Map),n.get(o).has(r)||n.get(o).set(r,[]),n.get(o).get(r).push(e)});const o=e=>e.every(e=>!isNaN(Number(e))&&""!==e.trim())?e.sort((e,t)=>Number(e)-Number(t)):e.sort(),r=o(Array.from(l)),i=o(Array.from(s)),c=Be[t.aggregation];function d(e){const n=e.map(e=>Le(e,t.valueField,a));if(!c||"function"!=typeof c.calculate)return N.error("Invalid aggregation function:",t.aggregation,c),{value:null,count:e.length,apiCalls:e,rawValues:n,error:"Invalid aggregation function"};const l={nonNumeric:0,nullUndefined:0};return c.needsNumeric&&(l.nonNumeric=n.filter(e=>"number"!=typeof e).length),l.nullUndefined=n.filter(e=>null==e).length,{value:c.usesApiCalls?c.calculate(n,e):c.calculate(n),count:e.length,apiCalls:e,rawValues:n,excludedCounts:l}}const u=r.map(e=>{const t=[],a=[];return i.forEach(l=>{const s=n.get(e)?.get(l)||[];t.push(s.length>0?d(s):null),a.push(...s)}),{label:e,cells:t,total:d(a)}}),p=i.map(e=>{const t=[];return r.forEach(a=>{const l=n.get(a)?.get(e)||[];t.push(...l)}),d(t)});return{rows:u,columns:i,totals:p,grandTotal:d(e)}}(e,T.value,p.trial)}),L=t(()=>U.value.rows),{getCellStyle:B,getSummaryStyle:V,styleKey:z}=Je(U,I,P);function K(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}function G(e,t,a){if(!a)return`${e} × ${t}: No data`;let n=`${e} × ${t}: ${Ve(a,T.value.aggregation)} (${a.count} calls)`;if(a.excludedCounts){const e=[];a.excludedCounts.nonNumeric>0&&e.push(`${a.excludedCounts.nonNumeric} non-numeric responses excluded`),a.excludedCounts.nullUndefined>0&&e.push(`${a.excludedCounts.nullUndefined} null/empty responses`),e.length>0&&(n+=` | ${e.join(", ")}`)}return a.error&&(n+=` - ERROR: ${a.error}`),n}function Y(e,t,a){if(!a)return`${e} by ${t}: No data`;const n=Ve(a,T.value.aggregation);return a.error?`${e} by ${t}: ${n} with data integrity error: ${a.error}`:`${e} by ${t}: ${n} from ${a.count} API calls`}function H(e,t){"rowField"!==e&&"columnField"!==e&&"valueField"!==e&&"aggregation"!==e||(T.value[e]=t),f("config-change",{...T.value})}function J(e,t,a){a&&f("cell-click",{row:e,column:t,cell:a})}function W(){v.value=!v.value,v.value?document.body.style.overflow="hidden":document.body.style.overflow=""}return h(()=>{v.value&&(document.body.style.overflow="")}),b([O,()=>p.apiCalls.length],([e])=>{if(p.apiCalls.length>0&&(!T.value.rowField||""===T.value.rowField)&&e.categorical.length>0){if(T.value.rowField=e.categorical.find(e=>"model"!==e&&"status"!==e&&"error_type"!==e)||e.categorical[0]||"model",T.value.columnField=T.value.columnField||"model",T.value.valueField=T.value.valueField||"extracted_value",!T.value.aggregation||""===T.value.aggregation){const e=p.apiCalls.slice(0,3).map(e=>Le(e,T.value.valueField,p.trial)).filter(e=>null!=e),t=e.length>0&&e.every(e=>"number"==typeof e);T.value.aggregation=t?"mean":"mode"}f("config-change",{...T.value})}},{immediate:!0}),(e,t)=>(m(),a("div",{class:r(["pivot-table-core",{fullscreen:v.value}])},[_([O.value,T.value],()=>(m(),a("div",null,[d(ft,{config:T.value,"available-fields":O.value,onUpdateConfig:H},null,8,["config","available-fields"])])),t,0),d(xt,{"selected-color-scale":I.value,"gradient-mode":P.value,"is-fullscreen":v.value,onUpdateColorScale:t[1]||(t[1]=e=>I.value=e),onUpdateGradientMode:t[2]||(t[2]=e=>P.value=e),onToggleFullscreen:W},null,8,["selected-color-scale","gradient-mode","is-fullscreen"]),Object.keys(F.value).length>0?_([F.value,M.value],()=>(m(),a("div",{key:0,class:"data-filters"},[l("div",St,[F.value.model&&F.value.model.length>1?(m(),a("div",It,[t[7]||(t[7]=l("label",{for:"filter-model",class:"filter-label"},"Model:",-1)),x(l("select",{id:"filter-model","onUpdate:modelValue":t[3]||(t[3]=e=>M.value.model=e),class:"filter-select","aria-label":"Filter by model",onChange:j},[t[6]||(t[6]=l("option",{value:""},"All Models",-1)),(m(!0),a(i,null,c(F.value.model,e=>(m(),a("option",{key:e,value:e},o(e),9,Pt))),128))],544),[[S,M.value.model]])])):s("",!0),(m(!0),a(i,null,c(D.value,(e,t)=>(m(),a("div",{key:t,class:"filter-group"},[l("label",{for:`filter-${t}`,class:"filter-label"},o(K(String(t)))+": ",9,Tt),x(l("select",{id:`filter-${t}`,"onUpdate:modelValue":e=>M.value[t]=e,class:"filter-select","aria-label":`Filter by ${K(String(t))}`,onChange:j},[l("option",Et,"All "+o(K(String(t))),1),(m(!0),a(i,null,c(e,e=>(m(),a("option",{key:e,value:e},o(e),9,At))),128))],40,Mt),[[S,M.value[t]]])]))),128)),F.value.status&&F.value.status.length>1?(m(),a("div",Nt,[t[9]||(t[9]=l("label",{for:"filter-status",class:"filter-label"},"Status:",-1)),x(l("select",{id:"filter-status","onUpdate:modelValue":t[4]||(t[4]=e=>M.value.status=e),class:"filter-select","aria-label":"Filter by status",onChange:j},[t[8]||(t[8]=l("option",{value:""},"All Statuses",-1)),(m(!0),a(i,null,c(F.value.status,e=>(m(),a("option",{key:e,value:e},o(e),9,Ot))),128))],544),[[S,M.value.status]])])):s("",!0),A.value?(m(),a("button",{key:2,type:"button",class:"clear-filters-btn",title:"Clear all filters","aria-label":"Clear all filters",onClick:q}," Clear Filters ")):s("",!0)])])),t,5):s("",!0),l("div",$t,[0===p.apiCalls.length?(m(),a("div",Ft,t[10]||(t[10]=[l("p",null,"No data available for pivot table analysis.",-1)]))):T.value.aggregation in C(Be)?(m(),a("div",Dt,[l("table",jt,[l("thead",null,[l("tr",qt,[l("th",Ut,o(K(T.value.rowField)||"Items")+" / "+o(K(T.value.columnField)||"Aggregated"),1),(m(!0),a(i,null,c(U.value.columns,e=>(m(),a("th",{key:e,class:"column-header",role:"columnheader"},o(e),1))),128)),T.value.columnField&&e.showTotals?(m(),a("th",Lt," Total ")):s("",!0)])]),l("tbody",null,[(m(!0),a(i,null,c(L.value,t=>(m(),a("tr",{key:`${t.label}-${C(z)}`,class:"data-row",role:"row"},[l("td",Bt,o(t.label),1),(m(!0),a(i,null,c(t.cells,(e,s)=>(m(),a("td",{key:`${s}-${C(z)}`,class:r(["data-cell",{"error-cell":e?.error}]),"data-testid":e?.error?"pivot-cell-error":"pivot-cell",style:w(C(B)(e,t.label,s)),title:G(t.label,U.value.columns[s],e),"aria-label":Y(t.label,U.value.columns[s],e),role:e?.error?"alert":"cell",tabindex:"0",onClick:a=>J(t.label,U.value.columns[s],e),onKeydown:[k(a=>J(t.label,U.value.columns[s],e),["enter"]),k(n(a=>J(t.label,U.value.columns[s],e),["prevent"]),["space"])]},[e?.error?(m(),a("div",zt,[l("span",{class:"error-indicator",title:e.error},"⚠️",8,Kt),l("span",Gt,o(e?C(Ve)(e,T.value.aggregation):"-"),1),l("div",Yt,o(e.error),1)])):(m(),a("span",Ht,o(e?C(Ve)(e,T.value.aggregation):"-"),1))],46,Vt))),128)),T.value.columnField&&e.showTotals?(m(),a("td",{key:0,class:"total-cell",style:w(C(V)(t.total)),role:"cell"},o(C(Ve)(t.total,T.value.aggregation)),5)):s("",!0)]))),128)),T.value.rowField&&e.showTotals?(m(),a("tr",{key:`totals-${C(z)}`,class:"total-row",role:"row"},[t[12]||(t[12]=l("td",{class:"row-header",role:"rowheader"},"Total",-1)),(m(!0),a(i,null,c(U.value.totals,(e,t)=>(m(),a("td",{key:`total-${t}-${C(z)}`,class:"total-cell",style:w(C(V)(e)),role:"cell"},o(C(Ve)(e,T.value.aggregation)),5))),128)),T.value.columnField?(m(),a("td",{key:0,class:"grand-total-cell",style:w(C(V)(U.value.grandTotal)),role:"cell"},o(C(Ve)(U.value.grandTotal,T.value.aggregation)),5)):s("",!0)])):s("",!0)])])])):(m(),a("div",Rt,[l("p",null,"Invalid aggregation function: "+o(T.value.aggregation),1),t[11]||(t[11]=l("p",null,"Please select a valid aggregation method.",-1))]))])],2))}}),[["__scopeId","data-v-6da58b58"]]),Wt={class:"modal-footer"},Xt={key:0,class:"footer-left"},Qt={class:"footer-actions"},Zt=O(e({__name:"ModalFooter",setup:e=>(e,t)=>(m(),a("div",Wt,[e.$slots.left?(m(),a("div",Xt,[I(e.$slots,"left",{},void 0,!0)])):s("",!0),l("div",Qt,[I(e.$slots,"default",{},void 0,!0)])]))}),[["__scopeId","data-v-3a3879d0"]]),ea={key:0,class:"preview-controls"},ta={key:0,class:"cycle-info"},aa=["innerHTML"],na={key:1,class:"variable-legend"},la={class:"variable-value"},sa=O(e({__name:"TemplatePreview",props:{design:{},template:{},variables:{},cycling:{type:Boolean,default:!0},cyclingPaused:{type:Boolean,default:!1},cyclingSpeed:{default:1e3},showControls:{default:"none"},displayMode:{default:"block"},showLegend:{type:Boolean,default:!1},maxHeight:{default:"300px"},previewMode:{type:Boolean,default:!1}},emits:["update:cyclingPaused","update:previewMode"],setup(e,{emit:n}){const v=e,y=n,_=X(),k=g(0);let x=null;const S=["variable-highlight-blue","variable-highlight-green","variable-highlight-purple","variable-highlight-orange","variable-highlight-pink","variable-highlight-teal"],I=t(()=>v.design?v.design.promptTemplate:v.template||""),M=t(()=>{const e=[];if(v.design?.variableBindings){for(const[a,n]of Object.entries(v.design.variableBindings))if("direct"===n.type&&n.values)e.push({name:a,values:[...n.values]});else if("list"===n.type&&n.listId){const t=_.lists.find(e=>e.id===n.listId);t&&("simple"===t.category&&t.values?e.push({name:a,values:[...t.values]}):"attributed"===t.category&&t.items&&e.push({name:a,values:t.items.map(e=>e.value)}))}}else if(v.variables)for(const[a,n]of Object.entries(v.variables))n.length>0&&e.push({name:a,values:[...n]});if(0===e.length)return[];const t=e.map(e=>e.values);return t.reduce((e,t)=>e.flatMap(e=>t.map(t=>[...e,t])),[[]]).map(t=>{const a={};return e.forEach((e,n)=>{a[e.name]=t[n]}),a})}),E=t(()=>M.value.length),A=t(()=>0===M.value.length?{}:M.value[k.value%M.value.length]),N=t(()=>{let e=I.value;"inline"===v.displayMode&&(e=e.replace(/\s+/g," ").trim());let t=R(e);if(M.value.length>0&&(v.cycling||v.previewMode)){const e=A.value;Object.keys(e).forEach((a,n)=>{const l=e[a];if(void 0!==l){const e=new RegExp(`\\{\\{\\s*${s=a,s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}\\s*\\}\\}`,"g"),o=`<span class="${O(n)}">${R(l)}</span>`;t=t.replace(e,o)}var s})}return t});function O(e){return S[e%S.length]}function R(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function D(){y("update:cyclingPaused",!v.cyclingPaused)}function j(){y("update:previewMode",!v.previewMode)}function q(){!v.cycling||v.cyclingPaused||M.value.length<=1||(U(),x=setInterval(()=>{k.value=(k.value+1)%M.value.length},v.cyclingSpeed))}function U(){x&&(clearInterval(x),x=null)}return b([()=>v.cycling,()=>v.cyclingPaused],()=>{v.cycling&&!v.cyclingPaused?q():U()},{immediate:!0}),b(()=>v.template,()=>{k.value=0}),P(()=>{v.cycling&&!v.cyclingPaused&&q()}),h(()=>{U()}),(e,t)=>{const n=u("a-button");return m(),a("div",{class:r(["template-preview",[`preview-${e.displayMode}`,{"preview-cycling":e.cycling&&!e.cyclingPaused}]])},["none"!==e.showControls?(m(),a("div",ea,["pause-play"===e.showControls?(m(),a(i,{key:0},[d(n,{onClick:D,size:"small",type:e.cyclingPaused?"default":"primary",disabled:!e.cycling||E.value<=1},{default:p(()=>[f(o(e.cyclingPaused?"Start":"Pause")+" Variable Substitution ",1)]),_:1},8,["type","disabled"]),e.cycling&&E.value>1?(m(),a("span",ta,o(k.value+1)+" / "+o(E.value),1)):s("",!0)],64)):"editor-mode"===e.showControls?(m(),T(n,{key:1,type:e.previewMode?"default":"primary",onClick:j},{default:p(()=>[e.previewMode?(m(),T(C(F),{key:1})):(m(),T(C($),{key:0})),f(" "+o(e.previewMode?"Return to Editor":"Preview Filled-In Prompts"),1)]),_:1},8,["type"])):s("",!0)])):s("",!0),l("div",{class:"preview-content",innerHTML:N.value,style:w({maxHeight:e.maxHeight})},null,12,aa),e.showLegend&&A.value&&Object.keys(A.value).length>0?(m(),a("div",na,[(m(!0),a(i,null,c(A.value,(e,t,n)=>(m(),a("div",{key:t,class:"legend-item"},[l("span",{class:r(O(n))},o(t),3),l("span",la,o(e),1)]))),128))])):s("",!0)],2)}}}),[["__scopeId","data-v-a4d016f0"]]),oa={class:"design-selection-step"},ra={class:"step-body"},ia={class:"design-selector","data-testid":"design-selector"},ca={key:0,class:"no-designs-state"},da={class:"no-designs-content"},ua={key:1,class:"design-list","data-testid":"design-list"},pa=["data-design-id","data-design-name","onClick"],ma={class:"design-header"},fa={class:"design-title-section"},va={class:"design-name"},ga={key:0,class:"design-inline-description"},ba={class:"design-date"},ya={class:"design-stats"},ha={class:"stat-item"},_a={class:"stat-value"},Ca={class:"stat-item"},ka={class:"stat-value"},wa={class:"stat-item"},xa={class:"stat-value"},Sa=O(e({__name:"DesignSelectionStep",props:{designSearch:{},filteredDesigns:{},countVariables:{type:Function},formatLastEditDate:{type:Function},getOutputTypeColor:{type:Function},getCombinationCount:{type:Function}},emits:["select","create-new"],setup(e){const t=e,n=W(),{designSearch:r,filteredDesigns:v,countVariables:g,formatLastEditDate:b,getOutputTypeColor:y,getCombinationCount:h}=t;return(e,t)=>{const _=u("a-input"),k=u("a-button"),w=u("a-tag");return m(),a("div",oa,[t[11]||(t[11]=l("div",{class:"step-header"},[l("h3",null,"What are you testing?")],-1)),l("div",ra,[l("div",ia,[d(_,{value:C(r),"onUpdate:value":t[0]||(t[0]=e=>M(r)?r.value=e:null),placeholder:"Search designs...",size:"large",class:"design-search","data-testid":"input-design-search",allowClear:""},{prefix:p(()=>[d(C(D))]),_:1},8,["value"]),0===C(v).length?(m(),a("div",ca,[l("div",da,[t[4]||(t[4]=l("p",null,"No designs found",-1)),d(k,{onClick:t[1]||(t[1]=()=>C(n).initialize())},{default:p(()=>t[3]||(t[3]=[f("Refresh Designs")])),_:1,__:[3]})])])):(m(),a("div",ua,[(m(!0),a(i,null,c(C(v),n=>(m(),a("div",{key:n.id,class:"design-item","data-testid":"design-item","data-design-id":n.id,"data-design-name":n.name,onClick:t=>e.$emit("select",n)},[l("div",ma,[l("div",fa,[l("h4",va,[f(o(n.name)+" ",1),n.description?(m(),a("span",ga,"- "+o(n.description),1)):s("",!0)])]),l("span",ba,o(C(b)(n.updated)),1)]),d(sa,{design:n,cycling:!0,"show-controls":"none","display-mode":"inline","max-height":"none",class:"design-description"},null,8,["design"]),l("div",ya,[d(w,{size:"small",color:C(y)(n.outputType),class:"output-type-tag"},{default:p(()=>[f(o(n.outputType||"text"),1)]),_:2},1032,["color"]),l("span",ha,[l("span",_a,o(C(g)(n)),1),t[5]||(t[5]=l("span",{class:"stat-label"},"vars",-1))]),t[8]||(t[8]=l("span",{class:"stat-divider"},"•",-1)),l("span",Ca,[l("span",ka,o(C(h)(n)),1),t[6]||(t[6]=l("span",{class:"stat-label"},"combos",-1))]),t[9]||(t[9]=l("span",{class:"stat-divider"},"•",-1)),l("span",wa,[l("span",xa,o(n.tokenEstimate?.avgTokens||"?"),1),t[7]||(t[7]=l("span",{class:"stat-label"},"tokens",-1))])])],8,pa))),128)),l("div",{class:"design-card design-card-create","data-testid":"btn-create-design",onClick:t[2]||(t[2]=t=>e.$emit("create-new"))},[d(C(R),{style:{"font-size":"24px"}}),t[10]||(t[10]=l("span",null,"Create New Design",-1))])]))])])])}}}),[["__scopeId","data-v-a52dcf0e"]]),Ia={class:"trial-metadata-form"},Pa={class:"form-section"},Ta={class:"trial-name-section"},Ma={class:"repeat-section"},Ea={class:"form-stats"},Aa={class:"stat-item"},Na={class:"stat-value"},Oa={class:"stat-item"},$a={class:"stat-value"},Fa=O(e({__name:"TrialMetadataForm",props:{modelValue:{},totalCombinations:{}},emits:["update:modelValue"],setup(e,{emit:t}){const n=e,s=t;function r(e){s("update:modelValue",{...n.modelValue,trialName:e})}function i(e){s("update:modelValue",{...n.modelValue,repeatCount:e||1})}return(e,t)=>{const n=u("a-input"),s=u("a-input-number");return m(),a("div",Ia,[l("div",Pa,[l("div",Ta,[t[0]||(t[0]=l("label",{class:"form-label"},"Trial Name:",-1)),d(n,{value:e.modelValue.trialName,"onUpdate:value":r,placeholder:"Enter trial name",class:"trial-name-input","data-testid":"input-trial-name",size:"large"},null,8,["value"])]),l("div",Ma,[t[1]||(t[1]=l("label",{class:"form-label"},"Repeat Each Prompt:",-1)),d(s,{value:e.modelValue.repeatCount,"onUpdate:value":i,min:1,max:10,size:"large",class:"repeat-count-input"},null,8,["value"]),t[2]||(t[2]=l("span",{class:"repeat-suffix"},"times",-1))])]),l("div",Ea,[l("div",Aa,[t[3]||(t[3]=l("span",{class:"stat-label"},"Total Combinations:",-1)),l("span",Na,o(e.totalCombinations),1)]),l("div",Oa,[t[4]||(t[4]=l("span",{class:"stat-label"},"API Calls per Model:",-1)),l("span",$a,o(e.totalCombinations*e.modelValue.repeatCount),1)])])])}}}),[["__scopeId","data-v-50707609"]]),Ra={class:"model-configuration-section"},Da={class:"quick-add-row"},ja={class:"quick-add-section"},qa={class:"quick-add-buttons"},Ua={key:0,class:"quick-cost"},La={key:0,class:"config-table","data-testid":"model-config-table"},Ba=["data-config-index","data-provider","data-model"],Va={class:"col-model"},za={class:"model-name"},Ka={class:"model-provider"},Ga={class:"col-params"},Ya={class:"params-text"},Ha={class:"col-calls"},Ja={class:"calls-breakdown"},Wa={class:"calls-value"},Xa={class:"col-cost"},Qa={class:"cost-breakdown"},Za={key:0,class:"cost-value"},en={key:1,class:"env-cost"},tn={class:"col-total"},an={class:"cost-breakdown"},nn={key:0,class:"cost-value total-cost"},ln={key:1,class:"env-cost"},sn={class:"col-actions"},on={key:0,class:"table-summary-row"},rn={class:"col-model"},cn={class:"summary-label"},dn={class:"col-calls"},un={class:"summary-calls"},pn={class:"col-total"},mn={key:0,class:"summary-cost"},fn={key:1,class:"empty-config-state"},vn=O(e({__name:"ModelConfigurationSection",props:{configurations:{},design:{},totalCombinations:{},repeatCount:{}},emits:["show-model-selector","add","remove"],setup(e,{emit:n}){const r=e,g=n,b=Q(),y=j(),h=q(),{hasDataForModel:_}=Z(),k=t(()=>y.financialCostsEnabled),w=t(()=>y.environmentalCostsEnabled),x=t(()=>r.totalCombinations*r.configurations.length*r.repeatCount),S=t(()=>{let e=0;for(const t of r.configurations)e+=N(t)*r.totalCombinations*r.repeatCount;return e}),I=t(()=>{const e=e=>y.hasApiKey(e),t=(e,t)=>!!b.enabledModels.find(a=>a.provider===e&&a.modelId===t&&a.enabled),a=[],n=new Set,l=[...h.trials].sort((e,t)=>new Date(t.created).getTime()-new Date(e.created).getTime());for(const d of l){if(a.length>=5)break;for(const l of d.configurationSnapshots||[]){if(a.length>=5)break;const s=`${l.provider}:${l.modelId}:${JSON.stringify(l.parameters)}`;if(!n.has(s)&&e(l.provider)&&t(l.provider,l.modelId)){const e=U.getParametersForModel(l.provider,l.modelId);if(!e)continue;if(Object.keys(l.parameters).some(t=>!(t in e)))continue;n.add(s),a.push({provider:l.provider,modelId:l.modelId,displayName:l.modelId,parameters:l.parameters,outputType:"text"})}}}const s=(e,t)=>{const a=U.getParametersForModel(e,t),n={},l=(e,t)=>{Object.entries(e).forEach(([e,a])=>{"object"===a.type&&a.properties?(t[e]={},l(a.properties,t[e])):void 0!==a.default&&(t[e]=a.default)})};l(a,n),n.temperature||!n.options||n.options.temperature||(n.options?n.options.temperature=0:n.temperature=0);const s=(e,t)=>{for(const[a,n]of Object.entries(e))"object"===n.type&&n.properties?(t[a]||(t[a]={}),s(n.properties,t[a])):n.is_output_length&&void 0===t[a]&&(t[a]=128)};return s(a,n),n},o=[{provider:"openai-chat",modelId:"gpt-4.1-nano",displayName:"gpt-4.1-nano",parameters:s("openai-chat","gpt-4.1-nano"),outputType:"text"},{provider:"anthropic",modelId:"claude-3-haiku-20240307",displayName:"claude-3-haiku-20240307",parameters:s("anthropic","claude-3-haiku-20240307"),outputType:"text"}],r=new Set(a.map(e=>`${e.provider}:${e.modelId}:${JSON.stringify(e.parameters)}`));for(const d of o){const n=`${d.provider}:${d.modelId}:${JSON.stringify(d.parameters)}`;!r.has(n)&&e(d.provider)&&t(d.provider,d.modelId)&&a.push(d)}const i=[],c=new Set;for(const d of a){const e=`${d.provider}:${d.modelId}`;c.has(e)||(c.add(e),i.push(d))}return i.slice(0,7)});function P(e){const t=[];for(const[a,n]of Object.entries(e))null!=n&&t.push(`${a}=${n}`);return t.join(", ")||"Default settings"}function M(e){return r.configurations.some(t=>t.provider===e.provider&&t.modelId===e.modelId&&JSON.stringify(t.parameters)===JSON.stringify(e.parameters))}function A(e){const t=b.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t||!r.design)return 0;const a=r.design.tokenEstimate?.avgTokens||0,n=U.getParametersForModel(e.provider,e.modelId);let l=0;for(const[s,o]of Object.entries(n))if(o.is_output_length&&e.parameters[s]){l=e.parameters[s];break}if(0===a||0===l)return 0;return((t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*l)*r.totalCombinations*r.repeatCount}function N(e){const t=b.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t||!r.design)return 0;const a=r.design.tokenEstimate?.avgTokens||0,n=U.getParametersForModel(e.provider,e.modelId);let l=0;for(const[s,o]of Object.entries(n))if(o.is_output_length&&e.parameters[s]){l=e.parameters[s];break}if(0===a||0===l)return 0;return(t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*l}function O(e){return N(e)*r.totalCombinations*r.repeatCount}function $(e){return _(e.provider,e.modelId)}function F(e,t){return"per-call"===t?"<1mg CO₂e":"~10mg CO₂e"}return(e,t)=>{const n=u("a-button");return m(),a("div",Ra,[l("div",Da,[d(n,{onClick:t[0]||(t[0]=t=>e.$emit("show-model-selector")),type:"primary",size:"large",class:"big-add-model-btn","data-testid":"btn-add-model","aria-label":"Add Model Configuration"},{default:p(()=>[d(C(R)),t[1]||(t[1]=f(" Add Model "))]),_:1,__:[1]}),t[3]||(t[3]=l("div",{class:"separator-bar"},null,-1)),l("div",ja,[t[2]||(t[2]=l("div",{class:"quick-add-label"},"Quick add recent/popular models (with default temperature=0, max response length = 128):",-1)),l("div",qa,[(m(!0),a(i,null,c(I.value,e=>(m(),T(n,{key:`${e.provider}:${e.modelId}:${JSON.stringify(e.parameters)}`,onClick:t=>function(e){M(e)||(g("add",{name:e.displayName,provider:e.provider,modelId:e.modelId,parameters:e.parameters}),E(()=>{const e=document.querySelector(".ant-modal-body");e&&e.scrollTo({top:e.scrollHeight,behavior:"smooth"})}))}(e),size:"small",class:"quick-preset-btn",disabled:M(e),"data-testid":"quick-add-model","data-provider":e.provider,"data-model":e.modelId,"aria-label":`Quick add ${e.displayName} model`},{default:p(()=>[f(o(e.displayName)+" ",1),k.value?(m(),a("span",Ua,o(C(ee)(A(e))),1)):s("",!0)]),_:2},1032,["onClick","disabled","data-provider","data-model","aria-label"]))),128))])])]),e.configurations.length>0?(m(),a("div",La,[t[8]||(t[8]=v('<div class="table-header" data-v-82ddd342><div class="col-model" data-v-82ddd342>Model</div><div class="col-params" data-v-82ddd342>Parameters</div><div class="col-calls" data-v-82ddd342>API Calls</div><div class="col-cost" data-v-82ddd342>Cost per Call</div><div class="col-total" data-v-82ddd342>Total Cost</div><div class="col-actions" data-v-82ddd342>Actions</div></div>',1)),(m(!0),a(i,null,c(e.configurations,(r,i)=>(m(),a("div",{key:i,class:"table-row","data-testid":"model-config-row","data-config-index":i,"data-provider":r.provider,"data-model":r.modelId},[l("div",Va,[l("div",za,o(r.provider)+":"+o(r.modelId),1),l("div",Ka,o(r.provider),1)]),l("div",Ga,[l("span",Ya,o(P(r.parameters)),1)]),l("div",Ha,[l("span",Ja,o(e.totalCombinations)+" × "+o(e.repeatCount)+" = ",1),l("span",Wa,o(e.totalCombinations*e.repeatCount),1)]),l("div",Xa,[l("div",Qa,[k.value?(m(),a("span",Za,o(C(ee)(N(r))),1)):s("",!0),w.value&&$(r)?(m(),a("small",en,o(F(0,"per-call")),1)):s("",!0)])]),l("div",tn,[l("div",an,[k.value?(m(),a("span",nn,o(C(ee)(O(r))),1)):s("",!0),w.value&&$(r)?(m(),a("small",ln,o(F(0,"total")),1)):s("",!0)])]),l("div",sn,[d(n,{type:"text",size:"small",danger:"",onClick:t=>e.$emit("remove",i),class:"remove-btn","data-testid":"remove-model-config","data-config-index":i,"aria-label":`Remove ${r.provider} ${r.modelId} configuration`},{default:p(()=>t[4]||(t[4]=[f("Remove")])),_:2,__:[4]},1032,["onClick","data-config-index","aria-label"])])],8,Ba))),128)),e.configurations.length>1?(m(),a("div",on,[l("div",rn,[l("div",cn,"TOTAL ("+o(e.configurations.length)+" models)",1)]),t[5]||(t[5]=l("div",{class:"col-params"},null,-1)),l("div",dn,[l("span",un,o(x.value),1)]),t[6]||(t[6]=l("div",{class:"col-cost"},null,-1)),l("div",pn,[k.value?(m(),a("span",mn,o(C(ee)(S.value)),1)):s("",!0)]),t[7]||(t[7]=l("div",{class:"col-actions"},null,-1))])):s("",!0)])):(m(),a("div",fn,t[9]||(t[9]=[l("p",null,"No models configured yet. Add at least one model to continue.",-1)])))])}}}),[["__scopeId","data-v-82ddd342"]]);const gn={key:0,class:"trial-creation-form"},bn={class:"streamlined-content"},yn={class:"content-section"},hn={class:"section-header"},_n={class:"section-body"},Cn={key:1,class:"selected-design-with-template"},kn={class:"unified-header"},wn={class:"combinations-count"},xn={class:"header-controls"},Sn={class:"design-stats"},In={class:"stat-item"},Pn={class:"stat-value"},Tn={class:"stat-item"},Mn={class:"stat-value"},En={class:"stat-item"},An={class:"stat-value"},Nn={key:0,class:"content-section","data-testid":"trial-config-section"},On={class:"section-body"},$n={class:"model-section"},Fn={class:"tab-footer"},Rn={class:"footer-actions"},Dn={class:"streamlined-content"},jn={class:"content-section"},qn={class:"section-header"},Un={class:"section-body"},Ln={key:1,class:"selected-design-with-template"},Bn={class:"unified-header"},Vn={class:"combinations-count"},zn={class:"header-controls"},Kn={class:"design-stats"},Gn={class:"stat-item"},Yn={class:"stat-value"},Hn={class:"stat-item"},Jn={class:"stat-value"},Wn={class:"stat-item"},Xn={class:"stat-value"},Qn={key:0,class:"content-section","data-testid":"trial-config-section"},Zn={class:"section-body"},el={class:"model-section"},tl=O(e({__name:"TrialCreationModalNew",props:{initialDesignId:{},trialToDuplicate:{},isEditMode:{type:Boolean},isTabMode:{type:Boolean}},emits:["close","created","created-and-started","export-trial"],setup(e,{emit:n}){const r=e,i=n,c=t(()=>({type:r.isEditMode?"edit":r.trialToDuplicate?"duplicate":"create",initialDesignId:r.initialDesignId,sourceTrial:r.trialToDuplicate||void 0})),v=X(),y=function(e){const a=W(),n=X(),l=Q(),s=q(),o=j(),r=g(null),i=g(""),c=g(1),d=g([]),u=g(!1),p=g(!1),m=g(!1),f=g(!1),v=t(()=>{if(!r.value)return 0;let e=1;for(const t of Object.values(r.value.variableBindings))if("direct"===t.type)e*=t.values?.length||1;else if(t.listId){const a=n.lists.find(e=>e.id===t.listId);e*=a?.itemCount||1}return e}),b=t(()=>v.value*d.value.length*c.value),y=t(()=>{let e=0;for(const t of d.value)e+=k(t)*v.value*c.value;return e}),h=t(()=>null!==r.value&&d.value.length>0);function _(e){r.value=e,i.value=C(e),m.value=!0}function C(e){return e||r.value?`${e?.name||r.value?.name||"Trial"} - ${(new Date).toLocaleString("en-US",{month:"short",day:"numeric",hour:"2-digit",minute:"2-digit"})}`:"New Trial"}function k(e){const t=l.enabledModels.find(t=>t.provider===e.provider&&t.modelId===e.modelId);if(!t)return 0;const a=r.value?.tokenEstimate?.avgTokens||0,n=U.getParametersForModel(e.provider,e.modelId);let s=0;for(const[l,o]of Object.entries(n))if(o.is_output_length&&e.parameters[l]){s=e.parameters[l];break}return 0===a||0===s?0:(t.capabilities?.inputCostPerToken||0)*a+(t.capabilities?.outputCostPerToken||0)*s}return{selectedDesign:r,trialName:i,repeatCount:c,configurations:d,creating:u,showModelSelector:p,liveUpdatePaused:m,showPlaceholders:f,totalCombinations:v,totalExperiments:b,totalCost:y,canProceed:h,selectDesign:_,generateTrialName:C,addConfiguration:function(e){d.value.push(e)},removeConfiguration:function(e){d.value.splice(e,1)},getConfigCostPerCall:k,createDraftTrial:async function(){if(r.value&&0!==d.value.length){u.value="draft";try{const e=await s.createTrial({name:i.value||C(),designId:r.value.id,configurations:d.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:c.value>1?{callsPerPrompt:c.value,strategy:"sequential"}:void 0});return A.success("Trial created as draft!"),e}catch(e){throw N.error("Failed to create draft trial",e),A.error("Failed to create draft trial"),e}finally{u.value=!1}}},createAndStartTrial:async function(){if(r.value&&0!==d.value.length){u.value="start";try{const e=await s.createTrial({name:i.value||C(),designId:r.value.id,configurations:d.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:c.value>1?{callsPerPrompt:c.value,strategy:"sequential"}:void 0});return A.success("Trial created! Starting execution..."),setTimeout(async()=>{try{await s.executeTrial(e)}catch(t){N.error("Failed to start trial",t),A.error("Failed to start trial execution")}},100),e}catch(e){throw N.error("Failed to create trial",e),A.error("Failed to create trial"),e}finally{u.value=!1}}},createAndExportTrial:async function(){if(r.value&&0!==d.value.length){u.value="export";try{const e=await s.createTrial({name:i.value||C(),designId:r.value.id,configurations:d.value.map(e=>({name:e.name,provider:e.provider,modelId:e.modelId,parameters:JSON.parse(JSON.stringify(e.parameters||{}))})),repeatConfig:c.value>1?{callsPerPrompt:c.value,strategy:"sequential"}:void 0}),t=await s.getTrial(e);if(!t)throw new Error("Trial not found after creation");return A.success("Trial created! Opening export options..."),t}catch(e){throw N.error("Failed to create trial for export",e),A.error("Failed to create trial for export"),e}finally{u.value=!1}}},initialize:async function(){await Promise.all([a.initialize(),n.initialize(),s.initialize()]);const t=e.value;if(t.initialDesignId){const e=a.designs.find(e=>e.id===t.initialDesignId);e&&_(e)}if(t.sourceTrial){const e=t.sourceTrial,n=a.designs.find(t=>t.id===e.designSnapshot.originalId);n&&(r.value=n,i.value="edit"===t.type?e.name:`Copy of ${e.name}`,e.repeatConfig?.callsPerPrompt&&(c.value=e.repeatConfig.callsPerPrompt),e.configurationSnapshots&&e.configurationSnapshots.length>0&&(d.value=e.configurationSnapshots.map(e=>({name:e.name||e.modelId,provider:e.provider,modelId:e.modelId,parameters:e.parameters||{}}))),m.value=!0)}},designsStore:a,variableListsStore:n,modelsStore:l,settingsStore:o}}(c),_=function(){const e=W(),a=X(),n=g(""),l=g(0);let s=null;const o=t(()=>{const t=e.designs;if(!n.value)return t;const a=n.value.toLowerCase();return t.filter(e=>e.name.toLowerCase().includes(a)||e.promptTemplate.toLowerCase().includes(a))});function r(e){return e.replace(/\n+/g," ").replace(/\s+/g," ").trim()}function i(e){if(!e.variableBindings)return[{}];const t=[];for(const[l,s]of Object.entries(e.variableBindings))if("direct"===s.type&&s.values)t.push({name:l,values:[...s.values]});else if("list"===s.type&&s.listId){const e=a.lists.find(e=>e.id===s.listId);if(e){let a=[];a="simple"===e.category&&e.values?e.values:"attributed"===e.category&&e.items?e.items.map(e=>e.value):[`${l}_sample`],t.push({name:l,values:a})}}if(0===t.length)return[{}];const n=[...t.map(e=>e.values).reduce((e,t)=>e.flatMap(e=>t.map(t=>[...e,t])),[[]])];for(let a=n.length-1;a>0;a--){const e=Math.floor(Math.random()*(a+1));[n[a],n[e]]=[n[e],n[a]]}return n.map(e=>{const a={};return t.forEach((t,n)=>{a[t.name]=e[n]}),a})}function c(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function d(){s||(s=setInterval(()=>{l.value++},1e3))}function u(){s&&(clearInterval(s),s=null)}return P(()=>{d()}),h(()=>{u()}),{designSearch:n,previewCycleIndex:l,filteredDesigns:o,countVariables:function(e){return Object.keys(e.variableBindings).length},truncateTemplate:r,formatLastEditDate:function(e){const t=new Date,a=t.getTime()-e.getTime(),n=Math.floor(a/864e5);if(0===n)return"Today";if(1===n)return"Yesterday";if(n<7)return`${n} days ago`;if(n<30){const e=Math.floor(n/7);return`${e} week${e>1?"s":""} ago`}return e.toLocaleDateString("en-US",{month:"short",day:"numeric",year:e.getFullYear()!==t.getFullYear()?"numeric":void 0})},getOutputTypeColor:function(e){return{text:"blue",number:"green",boolean:"purple",json:"orange"}[e]||"default"},getCombinationCount:function(e){if(!e.variableBindings)return"1";let t=1;for(const n of Object.values(e.variableBindings))if("direct"===n.type&&n.values)t*=n.values.length;else if("list"===n.type&&n.listId){const e=a.lists.find(e=>e.id===n.listId);t*=e?.itemCount||1}return t>1e3?`${(t/1e3).toFixed(1)}k`:t.toString()},generateVariableCombinations:i,getPreviewTemplateHTML:function(e){const t=i(e);if(t.length<=1)return c(r(e.promptTemplate));const a=t[l.value%t.length],n=["variable-highlight-blue","variable-highlight-green","variable-highlight-purple","variable-highlight-orange","variable-highlight-pink","variable-highlight-teal"];let s=e.promptTemplate;Object.keys(e.variableBindings||{}).forEach((e,t)=>{if(void 0!==a[e]){const l=new RegExp(`\\{\\{\\s*${e}\\s*\\}\\}`,"g"),o=`<span class="${n[t%n.length]}">${c(String(a[e]))}</span>`;s=s.replace(l,o)}});let o=c(s);return n.forEach(e=>{o=o.replace(new RegExp(`&lt;span class="${e}"&gt;`,"g"),`<span class="${e}">`).replace(/&lt;\/span&gt;/g,"</span>")}),r(o)},escapeHtml:c,startCycling:d,stopCycling:u}}(),k=g(!0),w=t(()=>y.selectedDesign.value),x=t({get:()=>y.trialName.value,set:e=>{y.trialName.value=e}}),S=t({get:()=>y.repeatCount.value,set:e=>{y.repeatCount.value=e}}),I=t(()=>y.configurations.value),M=t({get:()=>y.showModelSelector.value,set:e=>{y.showModelSelector.value=e}}),E=t(()=>y.creating.value),O=t(()=>y.totalCombinations.value),{countVariables:$,getOutputTypeColor:F}=_,R=t(()=>r.isEditMode&&r.trialToDuplicate?`Edit Trial: ${r.trialToDuplicate.name}`:r.trialToDuplicate?`Duplicate Trial: ${r.trialToDuplicate.name}`:"Create New Trial"),D=t(()=>y.canProceed.value);async function z(e){0===v.lists.length&&await v.initialize();const t={...e,variableBindings:Object.entries(e.variableBindings).reduce((e,[t,a])=>(e[t]={type:a.type,values:a.values?[...a.values]:void 0,listId:a.listId,listName:a.listName,source:a.source?{...a.source}:void 0},e),{}),tokenEstimate:e.tokenEstimate?{...e.tokenEstimate}:void 0,refusalWords:e.refusalWords?[...e.refusalWords]:void 0};y.selectDesign(t),k.value=!0,_.stopCycling()}async function K(e){try{const t=await V.designs.get(e);t&&y.selectDesign(t)}catch(t){N.error("Failed to load design",t),B.error({title:"Failed to load design",content:t instanceof Error?t.message:"Unknown error"})}}function G(){y.selectedDesign.value=null,y.configurations.value=[]}async function Y(){i("close"),window.location.href="#/designs"}function H(e){y.trialName.value=e.trialName,y.repeatCount.value=e.repeatCount}function Z(e){y.addConfiguration(e)}function ee(e){y.removeConfiguration(e)}function ae(e){Z(e),y.showModelSelector.value=!1}async function ne(){try{const e=await y.createDraftTrial();e&&(i("created",e),i("close"))}catch(e){}}async function le(){try{const e=await y.createAndExportTrial();e&&(i("export-trial",e),i("close"))}catch(e){}}async function se(){try{const e=await y.createAndStartTrial();e&&(i("created-and-started",e),i("close"))}catch(e){}}function oe(){k.value=!k.value,k.value?_.stopCycling():_.startCycling()}return P(async()=>{await y.initialize(),0===v.lists.length&&await v.initialize()}),b(()=>r.trialToDuplicate,()=>{r.trialToDuplicate&&async function(){if(r.trialToDuplicate)try{r.trialToDuplicate.designSnapshot?.originalId&&await K(r.trialToDuplicate.designSnapshot.originalId),r.isEditMode?y.trialName.value=r.trialToDuplicate.name:y.trialName.value=`${r.trialToDuplicate.name} (Copy)`,y.repeatCount.value=r.trialToDuplicate.repeatConfig?.callsPerPrompt||1,y.configurations.value=r.trialToDuplicate.configurationSnapshots||[]}catch(e){N.error("Failed to initialize duplication",e),B.error({title:"Failed to load trial data",content:e instanceof Error?e.message:"Unknown error"})}}()},{immediate:!0}),b(()=>r.initialDesignId,()=>{r.initialDesignId&&!r.trialToDuplicate&&async function(){r.initialDesignId&&await K(r.initialDesignId)}()},{immediate:!0}),(e,t)=>{const n=u("a-button"),r=u("a-tag");return e.isTabMode?(m(),a("div",gn,[l("div",bn,[l("section",yn,[l("div",hn,[t[8]||(t[8]=l("h3",null,"What are you testing?",-1)),w.value?(m(),T(n,{key:0,onClick:G,size:"small",class:"back-button",style:{"margin-left":"2em"}},{default:p(()=>t[7]||(t[7]=[f(" ← Back to Select Design ")])),_:1,__:[7]})):s("",!0)]),l("div",_n,[w.value?(m(),a("div",Cn,[l("div",kn,[l("h4",null,o(w.value.name),1),l("span",wn,o(O.value)+" combinations",1),l("div",xn,[d(n,{onClick:oe,size:"small",type:k.value?"default":"primary",class:"pause-btn"},{default:p(()=>[f(o(k.value?"Start Variable Substitution":"Pause Variable Substitution"),1)]),_:1},8,["type"])])]),d(sa,{design:w.value,cycling:!0,"cycling-paused":k.value,"show-controls":"none","display-mode":"inline","max-height":"none",class:"step2-preview","onUpdate:cyclingPaused":t[0]||(t[0]=e=>k.value=e)},null,8,["design","cycling-paused"]),l("div",Sn,[d(r,{size:"small",color:C(F)(w.value.outputType),class:"output-type-tag"},{default:p(()=>[f(o(w.value.outputType||"text"),1)]),_:1},8,["color"]),l("span",In,[l("span",Pn,o(C($)(w.value)),1),t[9]||(t[9]=l("span",{class:"stat-label"},"vars",-1))]),t[12]||(t[12]=l("span",{class:"stat-divider"},"•",-1)),l("span",Tn,[l("span",Mn,o(O.value),1),t[10]||(t[10]=l("span",{class:"stat-label"},"combos",-1))]),t[13]||(t[13]=l("span",{class:"stat-divider"},"•",-1)),l("span",En,[l("span",An,o(w.value.tokenEstimate?.avgTokens||"?"),1),t[11]||(t[11]=l("span",{class:"stat-label"},"tokens",-1))])])])):(m(),T(Sa,{key:0,"design-search":C(_).designSearch,"filtered-designs":C(_).filteredDesigns,"count-variables":C(_).countVariables,"format-last-edit-date":C(_).formatLastEditDate,"get-output-type-color":C(_).getOutputTypeColor,"get-combination-count":C(_).getCombinationCount,onSelect:z,onCreateNew:Y},null,8,["design-search","filtered-designs","count-variables","format-last-edit-date","get-output-type-color","get-combination-count"]))])]),w.value?(m(),a("section",Nn,[t[15]||(t[15]=l("h3",null,"Trial Configuration",-1)),l("div",On,[d(Fa,{"model-value":{trialName:x.value,repeatCount:S.value},"total-combinations":O.value,"onUpdate:modelValue":H},null,8,["model-value","total-combinations"]),l("div",$n,[t[14]||(t[14]=l("h4",null,"Model Configuration",-1)),d(vn,{configurations:I.value,design:w.value,"total-combinations":O.value,"repeat-count":S.value,onShowModelSelector:t[1]||(t[1]=e=>M.value=!0),onAdd:Z,onRemove:ee},null,8,["configurations","design","total-combinations","repeat-count"])])])])):s("",!0)]),l("div",Fn,[l("div",Rn,[d(n,{size:"large",onClick:ne,loading:"draft"===E.value,disabled:!D.value,"data-testid":"btn-create-draft-tab","aria-label":"Create trial as draft"},{default:p(()=>t[16]||(t[16]=[f(" Create as Draft ")])),_:1,__:[16]},8,["loading","disabled"]),d(n,{size:"large",onClick:le,loading:"export"===E.value,disabled:!D.value,"data-testid":"btn-export-python-tab","aria-label":"Export trial to Python"},{default:p(()=>t[17]||(t[17]=[f(" Export to Python ")])),_:1,__:[17]},8,["loading","disabled"]),d(n,{type:"primary",size:"large",onClick:se,loading:"start"===E.value,disabled:!D.value,"data-testid":"btn-create-and-start-tab","aria-label":"Create and start trial execution"},{default:p(()=>[d(C(L)),t[18]||(t[18]=f(" Create and Start "))]),_:1,__:[18]},8,["loading","disabled"])])]),d(te,{open:M.value&&!!w.value,mode:"trial",design:w.value||void 0,"existing-configurations":I.value,onClose:t[2]||(t[2]=e=>M.value=!1),onAddConfiguration:ae},null,8,["open","design","existing-configurations"])])):(m(),T(J,{key:1,"model-value":!0,title:R.value,size:"full","data-testid":"modal-trial-creation","onUpdate:modelValue":t[6]||(t[6]=t=>e.$emit("close"))},{footer:p(()=>[d(Zt,null,{default:p(()=>[d(n,{size:"large",onClick:ne,loading:"draft"===E.value,disabled:!D.value,"data-testid":"btn-create-draft","aria-label":"Create trial as draft"},{default:p(()=>t[28]||(t[28]=[f(" Create as Draft ")])),_:1,__:[28]},8,["loading","disabled"]),d(n,{size:"large",onClick:le,loading:"export"===E.value,disabled:!D.value,"data-testid":"btn-export-python","aria-label":"Export trial to Python"},{default:p(()=>t[29]||(t[29]=[f(" Export to Python ")])),_:1,__:[29]},8,["loading","disabled"]),d(n,{type:"primary",size:"large",onClick:se,loading:"start"===E.value,disabled:!D.value,"data-testid":"btn-create-and-start","aria-label":"Create and start trial execution"},{default:p(()=>[d(C(L)),t[30]||(t[30]=f(" Create and Start "))]),_:1,__:[30]},8,["loading","disabled"])]),_:1})]),default:p(()=>[l("div",Dn,[l("section",jn,[l("div",qn,[t[20]||(t[20]=l("h3",null,"What are you testing?",-1)),w.value?(m(),T(n,{key:0,onClick:G,size:"small",class:"back-button",style:{"margin-left":"2em"}},{default:p(()=>t[19]||(t[19]=[f(" ← Back to Select Design ")])),_:1,__:[19]})):s("",!0)]),l("div",Un,[w.value?(m(),a("div",Ln,[l("div",Bn,[l("h4",null,o(w.value.name),1),l("span",Vn,o(O.value)+" combinations",1),l("div",zn,[d(n,{onClick:oe,size:"small",type:k.value?"default":"primary",class:"pause-btn"},{default:p(()=>[f(o(k.value?"Start Variable Substitution":"Pause Variable Substitution"),1)]),_:1},8,["type"])])]),d(sa,{design:w.value,cycling:!0,"cycling-paused":k.value,"show-controls":"none","display-mode":"inline","max-height":"none",class:"step2-preview","onUpdate:cyclingPaused":t[3]||(t[3]=e=>k.value=e)},null,8,["design","cycling-paused"]),l("div",Kn,[d(r,{size:"small",color:C(F)(w.value.outputType),class:"output-type-tag"},{default:p(()=>[f(o(w.value.outputType||"text"),1)]),_:1},8,["color"]),l("span",Gn,[l("span",Yn,o(C($)(w.value)),1),t[21]||(t[21]=l("span",{class:"stat-label"},"vars",-1))]),t[24]||(t[24]=l("span",{class:"stat-divider"},"•",-1)),l("span",Hn,[l("span",Jn,o(O.value),1),t[22]||(t[22]=l("span",{class:"stat-label"},"combos",-1))]),t[25]||(t[25]=l("span",{class:"stat-divider"},"•",-1)),l("span",Wn,[l("span",Xn,o(w.value.tokenEstimate?.avgTokens||"?"),1),t[23]||(t[23]=l("span",{class:"stat-label"},"tokens",-1))])])])):(m(),T(Sa,{key:0,"design-search":C(_).designSearch,"filtered-designs":C(_).filteredDesigns,"count-variables":C(_).countVariables,"format-last-edit-date":C(_).formatLastEditDate,"get-output-type-color":C(_).getOutputTypeColor,"get-combination-count":C(_).getCombinationCount,onSelect:z,onCreateNew:Y},null,8,["design-search","filtered-designs","count-variables","format-last-edit-date","get-output-type-color","get-combination-count"]))])]),w.value?(m(),a("section",Qn,[t[27]||(t[27]=l("h3",null,"Trial Configuration",-1)),l("div",Zn,[d(Fa,{"model-value":{trialName:x.value,repeatCount:S.value},"total-combinations":O.value,"onUpdate:modelValue":H},null,8,["model-value","total-combinations"]),l("div",el,[t[26]||(t[26]=l("h4",null,"Model Configuration",-1)),d(vn,{configurations:I.value,design:w.value,"total-combinations":O.value,"repeat-count":S.value,onShowModelSelector:t[4]||(t[4]=e=>M.value=!0),onAdd:Z,onRemove:ee},null,8,["configurations","design","total-combinations","repeat-count"])])])])):s("",!0)]),d(te,{open:M.value&&!!w.value,mode:"trial",design:w.value||void 0,"existing-configurations":I.value,onClose:t[5]||(t[5]=e=>M.value=!1),onAddConfiguration:ae},null,8,["open","design","existing-configurations"])]),_:1},8,["title"]))}}}),[["__scopeId","data-v-d9d0a3a2"]]);class al{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new z({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>({provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:e.parameters})),l=new Set(n.map(e=>e.provider)),s={};for(const o of l){const e=U.getProvider(o);e&&(s[o]=this.buildProviderConfig(o,e))}return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerConfigs:s}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static buildProviderConfig(e,t){const a=t.requestTransform||{},n=t.auth||{type:"none"};let l="direct";"messages"===a.promptKey&&a.wrapPrompt?l="messages":"input"===a.promptKey&&(l="input");let s,o,r="root";"ollama-chat"===e?(r="options",s={max_tokens:"num_predict",max_completion_tokens:"num_predict"}):"ollama-generate"===e&&(r="mixed",o={root:["model","prompt","stream","format","raw"],options:["temperature","num_predict","top_k","top_p"]},s={max_tokens:"num_predict",max_completion_tokens:"num_predict"});const i=Object.values(t.responseModes||{})[0],c=this.parseResponsePath(i?.responseTransform?.contentPath),d=i?.responseTransform?.fallbackPaths?.map(e=>this.parseResponsePath(e)),u=t.api.baseUrl+(t.api.endpoints.chat||t.api.endpoints.generate||"");return{name:t.name,endpoint:u,auth:{type:n.type,header:n.header,prefix:"bearer"===n.type?"Bearer":void 0},headers:t.headers,request:{modelPrefixStrip:!0,promptFormat:l,messageRole:a.messageRole,paramLocation:r,paramRenames:s,mixedParams:o},response:{successPath:c,fallbackPaths:d,errorPath:["error","message"]}}}static parseResponsePath(e){return e?e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t}):["content"]}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),s=JSON.stringify(e.providerConfigs,null,4);return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Simple Mode\n=====================================\nGenerated by Auditomatic Lite v${K.short} on ${a}\n\nThis script reproduces your experiment by generating API calls from variables.\nPerfect for understanding, modifying, and extending your experiments.\n\nOriginal trial: ${t}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${Object.keys(e.providerConfigs).map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${e}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Provider configurations (how to talk to each API)\nPROVIDER_CONFIGS = ${s}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef make_api_call(provider_id: str, model: str, prompt: str, params: dict) -> dict:\n    """\n    Universal API caller that handles all provider quirks.\n    \n    Returns dict with 'success', 'content', 'error', and timing info.\n    """\n    config = PROVIDER_CONFIGS[provider_id]\n    \n    # Build headers\n    headers = {"Content-Type": "application/json"}\n    \n    # Add authentication\n    auth = config["auth"]\n    if auth["type"] == "bearer":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = f"{auth['prefix']} {api_key}"\n    elif auth["type"] == "header":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = api_key\n    \n    # Add provider-specific headers\n    if config.get("headers"):\n        headers.update(config["headers"])\n    \n    # Build request body\n    request = config["request"]\n    \n    # Strip provider prefix from model\n    if request.get("modelPrefixStrip"):\n        model = model.split(":", 1)[-1]\n    \n    body = {"model": model}\n    \n    # Format prompt\n    if request["promptFormat"] == "messages":\n        body["messages"] = [{"role": request.get("messageRole", "user"), "content": prompt}]\n    elif request["promptFormat"] == "direct":\n        body["prompt"] = prompt\n    elif request["promptFormat"] == "input":\n        body["input"] = prompt\n    \n    # Handle parameters\n    processed_params = params.copy()\n    \n    # Apply renames\n    if request.get("paramRenames"):\n        for old_key, new_key in request["paramRenames"].items():\n            if old_key in processed_params:\n                processed_params[new_key] = processed_params.pop(old_key)\n    \n    # Place parameters\n    if request["paramLocation"] == "root":\n        body.update(processed_params)\n    elif request["paramLocation"] == "options":\n        body["options"] = processed_params\n    elif request.get("mixedParams"):\n        mixed = request["mixedParams"]\n        for key, value in processed_params.items():\n            if key in mixed.get("root", []):\n                body[key] = value\n            else:\n                if "options" not in body:\n                    body["options"] = {}\n                body["options"][key] = value\n    \n    # Make request\n    start_time = time.time()\n    try:\n        response = requests.post(\n            config["endpoint"],\n            headers=headers,\n            json=body,\n            timeout=30\n        )\n        latency_ms = (time.time() - start_time) * 1000\n        \n        if response.ok:\n            data = response.json()\n            content = extract_from_path(data, config["response"]["successPath"])\n            \n            # Try fallback paths\n            if content is None and config["response"].get("fallbackPaths"):\n                for path in config["response"]["fallbackPaths"]:\n                    content = extract_from_path(data, path)\n                    if content is not None:\n                        break\n            \n            return {\n                "success": True,\n                "content": content or "",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n        else:\n            return {\n                "success": False,\n                "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n            \n    except Exception as e:\n        return {\n            "success": False,\n            "error": str(e),\n            "latency_ms": (time.time() - start_time) * 1000\n        }\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(\n                model_config["provider"],\n                model_config["modelId"],\n                prompt,\n                model_config["parameters"]\n            )\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": result.get("content", ""),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                "status_code": result.get("status_code", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {result['content'][:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_results_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider not in API_KEYS or not API_KEYS[provider]:\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(set(missing_keys)))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns:\n            print(f"Avg latency: {df['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class nl{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=[],a=new H,n=new z({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),l=G(e);let s=0;for(const r of e.configurationSnapshots){const i=U.getProvider(r.provider);if(i)for(const c of n){const n=l>1?Y():void 0;let d=e.designSnapshot.promptTemplate;for(const[e,t]of Object.entries(c.variables))d=d.replace(new RegExp(`{{${e}}}`,"g"),t);for(let e=0;e<l;e++){s++;try{const o={id:"export-config",name:r.name,provider:r.provider,model:r.modelId,params:r.parameters,created_at:new Date},u=a.buildAPIRequest(o,d),p={};for(const[e,t]of Object.entries(u.headers))"Authorization"===e&&t.startsWith("Bearer ")?p[e]=`Bearer $${r.provider.split("-")[0].toUpperCase()}_API_KEY`:e===i.auth.header&&"header"===i.auth.type?p[e]=`$${r.provider.split("-")[0].toUpperCase()}_API_KEY`:p[e]=t;const m=this.parseResponsePath(this.getDefaultResponsePath(r.provider));t.push({id:`call_${String(s).padStart(3,"0")}`,provider:r.provider,endpoint:u.url,headers:p,body:u.body,responsePath:m,metadata:{variables:c.variables,modelName:r.modelId,configName:r.name,...l>1&&{repeatIndex:e,repeatGroupId:n}}})}catch(o){N.warn("Failed to build API call for config",{configName:r.name,error:o})}}}}return{apiCalls:t,...e.repeatConfig&&{repeatConfig:{callsPerPrompt:e.repeatConfig.callsPerPrompt,delayBetweenRepeats:e.repeatConfig.delayBetweenRepeats}}}}static parseResponsePath(e){return e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t})}static getDefaultResponsePath(e){switch(e){case"openai-chat":case"openrouter":return"choices[0].message.content";case"openai-responses":return"output[0].content[0].text";case"anthropic":return"content[0].text";case"ollama-chat":return"message.content";case"ollama-generate":return"response";default:return"content"}}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.apiCalls,null,4),l=[...new Set(e.apiCalls.map(e=>e.provider))],s=e.repeatConfig?`\nRepeat configuration: ${e.repeatConfig.callsPerPrompt} calls per prompt${e.repeatConfig.delayBetweenRepeats?`, ${e.repeatConfig.delayBetweenRepeats}ms delay`:""}`:"";return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Literal Mode\n======================================\nGenerated by Auditomatic Lite v${K.short} on ${a}\n\nThis script contains the EXACT API calls from your experiment.\nPerfect for bit-for-bit reproduction, debugging, and comparing results.\n\nOriginal trial: ${t}\nTotal API calls: ${e.apiCalls.length}${s}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${l.map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${t}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Pre-computed API calls from your experiment\nAPI_CALLS = ${n}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef execute_literal_calls():\n    """Execute pre-serialized API calls exactly as specified"""\n    results = []\n    total = len(API_CALLS)\n    \n    print(f"Executing {total} pre-computed API calls...")\n    print("=" * 60)\n    \n    for i, call in enumerate(API_CALLS):\n        print(f"[{i+1}/{total}] {call['metadata']['configName']} - ", end="")\n        \n        # Replace API key placeholders in headers\n        headers = {}\n        for key, value in call["headers"].items():\n            if "\\$" in str(value):\n                # Extract provider name from placeholder\n                for provider_key, api_key in API_KEYS.items():\n                    placeholder = f"\\\${provider_key}_API_KEY"\n                    if placeholder in value:\n                        headers[key] = value.replace(placeholder, api_key)\n                        break\n                else:\n                    headers[key] = value\n            else:\n                headers[key] = value\n        \n        # Check if we have required API key\n        provider_base = call["provider"].split("-")[0].upper()\n        if provider_base in ["OPENAI", "ANTHROPIC", "OPENROUTER"] and not API_KEYS.get(provider_base):\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": f"No API key for {provider_base}",\n                "latency_ms": 0,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ No API key")\n            continue\n        \n        # Make the exact API call\n        start_time = time.time()\n        try:\n            response = requests.post(\n                call["endpoint"],\n                headers=headers,\n                json=call["body"],\n                timeout=30\n            )\n            latency_ms = (time.time() - start_time) * 1000\n            \n            if response.ok:\n                data = response.json()\n                content = extract_from_path(data, call["responsePath"])\n                \n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": content or "",\n                    "success": True,\n                    "error": "",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    "full_response": json.dumps(data)[:500],  # First 500 chars\n                    **call["metadata"]["variables"]\n                })\n                print(f"✓ {(content or '')[:30]}")\n            else:\n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": "",\n                    "success": False,\n                    "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    **call["metadata"]["variables"]\n                })\n                print(f"✗ HTTP {response.status_code}")\n                \n        except Exception as e:\n            latency_ms = (time.time() - start_time) * 1000\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": str(e)[:200],\n                "latency_ms": latency_ms,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ {str(e)[:30]}")\n        \n        # Handle repeat delays if configured\n        if "repeatIndex" in call["metadata"] and call["metadata"]["repeatIndex"] > 0:\n            # Check if there's a repeat delay configured\n            delay_ms = ${e.repeatConfig?.delayBetweenRepeats||0}\n            if delay_ms > 0:\n                time.sleep(delay_ms / 1000.0)\n        \n        # Rate limiting\n        time.sleep(0.1)\n    \n    return results\n\ndef extract_prompt_from_body(body: dict) -> str:\n    """Extract the prompt from various request body formats"""\n    # Messages format (OpenAI, Anthropic, etc)\n    if "messages" in body and isinstance(body["messages"], list):\n        for msg in body["messages"]:\n            if msg.get("role") == "user":\n                return msg.get("content", "")\n    \n    # Direct prompt format (Ollama generate)\n    if "prompt" in body:\n        return body["prompt"]\n    \n    # Input format (OpenAI responses)\n    if "input" in body:\n        return body["input"]\n    \n    return ""\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    # Drop full_response column for cleaner output (except JSON)\n    if format != "json" and "full_response" in df.columns:\n        df = df.drop(columns=["full_response"])\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_literal_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    required_providers = set(call["provider"].split("-")[0].upper() for call in API_CALLS)\n    missing_keys = []\n    for provider in required_providers:\n        if provider not in ["OLLAMA"] and not API_KEYS.get(provider):\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(missing_keys))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Execute all calls\n    results = execute_literal_calls()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if df['success'].any():\n            print(f"Avg latency (successful): {df[df['success']]['latency_ms'].mean():.1f}ms")\n        \n        # Group by model\n        print(f"\\nBy Model:")\n        model_summary = df.groupby('config_name')['success'].agg(['count', 'sum', 'mean'])\n        model_summary.columns = ['total', 'successful', 'success_rate']\n        print(model_summary)\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class ll{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new z({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>{let t,a="text";return e.parameters.response_format?(a="json_mode",t={response_format:e.parameters.response_format}):e.parameters.tools&&(a="function_calling",t={tools:e.parameters.tools,tool_choice:e.parameters.tool_choice}),{provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:this.filterCoreParams(e.parameters),responseMode:a,responseModeParams:t}}),l=new Set(n.map(e=>e.provider)),s={"openai-chat":"openai","openai-responses":"openai",anthropic:"anthropic",openrouter:"openai","ollama-chat":"ollama","ollama-generate":"ollama"},o=[...new Set(Array.from(l).map(e=>s[e]).filter(Boolean))],r={"openai-chat":"OPENAI","openai-responses":"OPENAI",anthropic:"ANTHROPIC",openrouter:"OPENROUTER","ollama-chat":"","ollama-generate":""},i=[...new Set(Array.from(l).map(e=>r[e]).filter(Boolean))];return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerLibraries:{required:o,apiKeys:i}}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static filterCoreParams(e){const t={...e};return delete t.response_format,delete t.tools,delete t.tool_choice,t}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),s=["import os","import json","import time","import pandas as pd","from datetime import datetime"];return e.providerLibraries.required.includes("openai")&&s.push("from openai import OpenAI"),e.providerLibraries.required.includes("anthropic")&&s.push("from anthropic import Anthropic"),e.providerLibraries.required.includes("ollama")&&s.push("import ollama"),`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Native Mode\n=====================================\nGenerated by Auditomatic Lite v${K.short} on ${a}\n\nThis script uses native Python libraries for each provider.\nCleanest code, best for production use.\n\nOriginal trial: ${t}\nRequired packages: ${e.providerLibraries.required.join(", ")}\n"""\n\n${s.join("\n")}\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\n${e.providerLibraries.apiKeys.map(e=>`os.environ.setdefault("${e}_API_KEY", "")  # Set your ${e} API key`).join("\n")}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\n# Initialize clients\nclients = {}\n\ndef get_client(provider):\n    """Get or create client for provider"""\n    if provider not in clients:\n        if provider in ["openai-chat", "openai-responses"]:\n            clients[provider] = OpenAI()\n        elif provider == "anthropic":\n            clients[provider] = Anthropic()\n        elif provider == "openrouter":\n            clients[provider] = OpenAI(\n                api_key=os.environ.get("OPENROUTER_API_KEY"),\n                base_url="https://openrouter.ai/api/v1"\n            )\n        # Ollama doesn't need a client\n    return clients.get(provider)\n\ndef make_api_call(model_config: dict, prompt: str) -> dict:\n    """Make API call using native provider library"""\n    provider = model_config["provider"]\n    model = model_config["modelId"]\n    params = model_config["parameters"].copy()\n    \n    try:\n        start_time = time.time()\n        \n        if provider == "openai-chat" or provider == "openrouter":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["response_format"] = {"type": "json_object"}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content based on response mode\n            if model_config["responseMode"] == "function_calling" and response.choices[0].message.tool_calls:\n                content = response.choices[0].message.tool_calls[0].function.arguments\n                if isinstance(content, str):\n                    content = json.loads(content)\n            else:\n                content = response.choices[0].message.content\n            \n        elif provider == "openai-responses":\n            client = get_client(provider)\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["text"] = {"format": {"type": "json_object"}}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.responses.create(\n                model=model,\n                input=prompt,\n                **params\n            )\n            \n            # Extract content\n            output = response.output\n            if isinstance(output, list) and len(output) > 0:\n                if hasattr(output[0], 'content') and isinstance(output[0].content, list):\n                    content = output[0].content[0].text if hasattr(output[0].content[0], 'text') else str(output[0].content[0])\n                else:\n                    content = str(output[0])\n            else:\n                content = str(output)\n            \n        elif provider == "anthropic":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.messages.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content\n            if model_config["responseMode"] == "function_calling" and hasattr(response.content[0], 'input'):\n                content = response.content[0].input\n            else:\n                content = response.content[0].text\n            \n        elif provider == "ollama-chat":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.chat(\n                model=model,\n                messages=[{"role": "user", "content": prompt}],\n                **params\n            )\n            \n            # Extract content\n            content = response["message"]["content"]\n            \n        elif provider == "ollama-generate":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.generate(\n                model=model,\n                prompt=prompt,\n                **params\n            )\n            \n            # Extract content\n            content = response["response"]\n        \n        else:\n            raise ValueError(f"Unknown provider: {provider}")\n        \n        latency_ms = (time.time() - start_time) * 1000\n        \n        return {\n            "success": True,\n            "content": content,\n            "latency_ms": latency_ms\n        }\n        \n    except Exception as e:\n        latency_ms = (time.time() - start_time) * 1000\n        return {\n            "success": False,\n            "content": "",\n            "error": str(e),\n            "latency_ms": latency_ms\n        }\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(model_config, prompt)\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": str(result.get("content", "")),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {str(result['content'])[:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: list, format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_native_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for required packages\n    required = ${JSON.stringify(e.providerLibraries.required)}\n    missing = []\n    for lib in required:\n        try:\n            __import__(lib)\n        except ImportError:\n            missing.append(lib)\n    \n    if missing:\n        print(f"ERROR: Missing required packages: {', '.join(missing)}")\n        print(f"Install with: pip install {' '.join(missing)}")\n        return\n    \n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider in ["openai-chat", "openai-responses"] and not os.environ.get("OPENAI_API_KEY"):\n            missing_keys.append("OPENAI_API_KEY")\n        elif provider == "anthropic" and not os.environ.get("ANTHROPIC_API_KEY"):\n            missing_keys.append("ANTHROPIC_API_KEY")\n        elif provider == "openrouter" and not os.environ.get("OPENROUTER_API_KEY"):\n            missing_keys.append("OPENROUTER_API_KEY")\n    \n    if missing_keys:\n        print(f"WARNING: Missing API keys: {', '.join(set(missing_keys))}")\n        print("Set them in the script or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns and df['success'].any():\n            print(f"Avg latency: {df[df['success']]['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class sl{static async generatePythonScript(e,t){try{const a=t||this.getDefaultOptions(),n=this.validateTrialForExport(e);if(!n.valid)throw new Error(`Trial validation failed: ${n.errors.join(", ")}`);switch(a.mode){case"simple":return al.generate(e);case"literal":return nl.generate(e);case"native":return ll.generate(e);default:throw new Error(`Unknown export mode: ${a.mode}`)}}catch(a){throw new Error(`Failed to generate Python export: ${a instanceof Error?a.message:String(a)}`)}}static async downloadPythonScript(e,t){const a=await this.generatePythonScript(e,t),n=t||this.getDefaultOptions(),l=new Blob([a],{type:"text/x-python"}),s=URL.createObjectURL(l),o=document.createElement("a");o.href=s,o.download=this.generateFilename(e,n.mode),document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(s)}static validateTrialForExport(e){const t=[];return e.designSnapshot?e.designSnapshot.promptTemplate||t.push("Design missing prompt template"):t.push("Trial missing design snapshot"),e.configurationSnapshots&&0!==e.configurationSnapshots.length?e.configurationSnapshots.forEach((e,a)=>{e.provider||t.push(`Configuration ${a+1} missing provider`),e.modelId||t.push(`Configuration ${a+1} missing model`),e.parameters||t.push(`Configuration ${a+1} missing parameters`)}):t.push("Trial missing model configurations"),e.variableSnapshots||t.push("Trial missing variable snapshots"),{valid:0===t.length,errors:t}}static getExportSummary(e){const t=new Set(e.configurationSnapshots.map(e=>e.provider)),a=e.totalCombinations||0;return{apiCallCount:e.configurationSnapshots.length*a,providersUsed:Array.from(t),variableCombinations:a,configurations:e.configurationSnapshots.length}}static getDefaultOptions(){return{mode:"simple"}}static generateFilename(e,t){const a=e.name||`trial_${e.id}`,n=(new Date).toISOString().split("T")[0];return`${a.toLowerCase().replace(/[^a-z0-9]/g,"_")}_${t}_${n}.py`}}const ol=Object.freeze(Object.defineProperty({__proto__:null,PythonExportService:sl},Symbol.toStringTag,{value:"Module"})),rl={class:"trial-info"},il={class:"trial-stats"},cl={class:"export-section"},dl={class:"mode-content"},ul={class:"mode-content"},pl={class:"mode-content"},ml={class:"export-section"},fl={class:"preview-content"},vl={class:"preview-info"},gl=e({__name:"PythonExportModal",props:{trial:{}},emits:["close","exported"],setup(e,{emit:a}){const n=e,s=a,r=g("simple"),i=g(!1),c=t(()=>n.trial.progress.total),v=t(()=>n.trial.configurationSnapshots?.length||0),b=t(()=>n.trial.totalCombinations||0),y=t(()=>{const e=.05*b.value+.3*v.value;return Math.round(15+e)}),h=t(()=>{const e=.5*c.value;return Math.round(10+e)}),_=t(()=>{const e=.05*b.value+.2*v.value;return Math.round(12+e)}),C=t(()=>{const e=n.trial.name.toLowerCase().replace(/\s+/g,"_"),t=(new Date).toISOString().split("T")[0];return`${e}_${r.value}_${t}.py`}),k=t(()=>{if("simple"===r.value){return 300+(b.value+10*v.value)}if("native"===r.value){return 250+(b.value+8*v.value)}return 200+15*c.value});async function w(){i.value=!0;try{const e={mode:r.value};await sl.downloadPythonScript(n.trial,e),s("exported",C.value),s("close")}catch(e){N.error("Export failed",e),alert("Export failed: "+(e instanceof Error?e.message:"Unknown error"))}finally{i.value=!1}}return(e,t)=>{const a=u("a-button"),n=u("a-tag"),s=u("a-radio"),g=u("a-radio-group"),x=u("a-typography-text");return m(),T(J,{"model-value":!0,title:"Export Python Script",size:"full","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("close"))},{footer:p(()=>[d(a,{onClick:t[0]||(t[0]=t=>e.$emit("close")),size:"large","data-testid":"btn-cancel-python-export","aria-label":"Cancel Python export"},{default:p(()=>t[3]||(t[3]=[f(" Cancel ")])),_:1,__:[3]}),d(a,{type:"primary",onClick:w,loading:i.value,size:"large","data-testid":"btn-confirm-python-export","data-mode":r.value,"aria-label":`Export Python script in ${r.value} mode`},{default:p(()=>t[4]||(t[4]=[f(" Export Script ")])),_:1,__:[4]},8,["loading","data-mode","aria-label"])]),default:p(()=>[l("div",rl,[l("h3",null,o(e.trial.name),1),l("div",il,[d(n,null,{default:p(()=>[f(o(c.value)+" API calls",1)]),_:1}),d(n,null,{default:p(()=>[f(o(v.value)+" configurations",1)]),_:1}),d(n,null,{default:p(()=>[f(o(b.value)+" variable combinations",1)]),_:1})])]),l("div",cl,[t[11]||(t[11]=l("h4",null,"Export Mode",-1)),d(g,{value:r.value,"onUpdate:value":t[1]||(t[1]=e=>r.value=e),class:"mode-options","data-testid":"radiogroup-export-mode","aria-label":"Select Python export mode"},{default:p(()=>[d(s,{value:"simple",class:"mode-radio","data-testid":"radio-mode-simple","aria-label":"Simple script mode"},{default:p(()=>[l("div",dl,[t[5]||(t[5]=l("div",{class:"mode-title"},"Simple Script",-1)),t[6]||(t[6]=l("div",{class:"mode-description"}," Educational script with variables as lists. Easy to understand, modify, and extend. Perfect for learning how AI APIs work. ",-1)),d(n,{color:"blue",size:"small"},{default:p(()=>[f("~"+o(y.value)+"KB",1)]),_:1})])]),_:1}),d(s,{value:"literal",class:"mode-radio","data-testid":"radio-mode-literal","aria-label":"Literal reproduction mode"},{default:p(()=>[l("div",ul,[t[7]||(t[7]=l("div",{class:"mode-title"},"Literal Reproduction",-1)),t[8]||(t[8]=l("div",{class:"mode-description"}," Exact API calls pre-computed. Bit-for-bit reproduction of your experiment. Best for debugging and comparing results. ",-1)),d(n,{color:"blue",size:"small"},{default:p(()=>[f("~"+o(h.value)+"KB",1)]),_:1})])]),_:1}),d(s,{value:"native",class:"mode-radio","data-testid":"radio-mode-native","aria-label":"Native libraries mode"},{default:p(()=>[l("div",pl,[t[9]||(t[9]=l("div",{class:"mode-title"},"Native Libraries",-1)),t[10]||(t[10]=l("div",{class:"mode-description"}," Uses official Python SDKs (openai, anthropic, ollama). Cleanest code, best for production use. Requires: pip install openai anthropic ollama ",-1)),d(n,{color:"green",size:"small"},{default:p(()=>[f("~"+o(_.value)+"KB",1)]),_:1})])]),_:1})]),_:1},8,["value"])]),t[13]||(t[13]=l("div",{class:"export-section"},[l("h4",null,"Output Format"),l("div",{class:"format-info"},[l("p",null,"Both scripts save results using pandas in your choice of format:"),l("ul",null,[l("li",null,[l("strong",null,"CSV"),f(" - Universal format, opens in Excel/Google Sheets")]),l("li",null,[l("strong",null,"Excel"),f(" - Native Excel format")]),l("li",null,[l("strong",null,"JSON"),f(" - For programmatic access")]),l("li",null,[l("strong",null,"Parquet"),f(" - Efficient compressed format")]),l("li",null,[l("strong",null,"HTML"),f(" - For web viewing")]),l("li",null,[l("strong",null,"Markdown"),f(" - For documentation")]),l("li",null,[l("strong",null,"Stata"),f(" - For statistical analysis")]),l("li",null,[l("strong",null,"Pickle"),f(" - Python native format")])])])],-1)),l("div",ml,[t[12]||(t[12]=l("h4",null,"Script Preview",-1)),l("div",fl,[d(x,{code:"",class:"preview-filename"},{default:p(()=>[f(o(C.value),1)]),_:1}),l("div",vl,[d(n,{size:"small"},{default:p(()=>[f(o(k.value)+" lines",1)]),_:1}),d(n,{size:"small"},{default:p(()=>[f(o(r.value)+" mode",1)]),_:1})])])])]),_:1,__:[13]})}}});export{qe as A,Jt as P,tl as T,gl as _,ol as p};
