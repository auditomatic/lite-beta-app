var e=Object.defineProperty,r=(r,t,o)=>((r,t,o)=>t in r?e(r,t,{enumerable:!0,configurable:!0,writable:!0,value:o}):r[t]=o)(r,"symbol"!=typeof t?t+"":t,o);import{a as t}from"./index-JPKDQHeA.js";const o=new class{constructor(){r(this,"providers",new Map),r(this,"loadingPromise"),this.loadingPromise=this.loadProviders()}async waitForReady(){await this.loadingPromise}async loadProviders(){try{const e=Object.assign({"../../config/providers/anthropic.json":()=>t(()=>import("./anthropic-dqNXL4LK.js"),[],import.meta.url),"../../config/providers/ollama-chat.json":()=>t(()=>import("./ollama-chat-CHnP3YIr.js"),[],import.meta.url),"../../config/providers/ollama-generate.json":()=>t(()=>import("./ollama-generate-mCUkLmBV.js"),[],import.meta.url),"../../config/providers/openai-chat.json":()=>t(()=>import("./openai-chat-eY-Cg38n.js"),[],import.meta.url),"../../config/providers/openai-responses.json":()=>t(()=>import("./openai-responses-BjJ7UWlf.js"),[],import.meta.url),"../../config/providers/openrouter.json":()=>t(()=>import("./openrouter-C_xeOKP9.js"),[],import.meta.url)});for(const r in e){const t=(await e[r]()).default;this.providers.set(t.id,t)}this.providers.size}catch(e){console.error("Failed to load provider configs:",e)}}getProvider(e){return this.providers.get(e)}getAllProviders(){return Array.from(this.providers.values())}getParametersForModel(e,r){const t=this.providers.get(e);if(!t)return{};for(const o of t.modelRules){if(new RegExp(o.pattern).test(r)){if(o.forbidden){const e={...o.params};return o.forbidden.forEach(r=>delete e[r]),e}return o.params}}return{}}getBasicParameters(e,r){const t=this.getParametersForModel(e,r),o={},s=(e,r="")=>{Object.entries(e).forEach(([e,t])=>{const i=r?`${r}.${e}`:e;t.basic&&("object"===t.type&&t.properties?s(t.properties,i):o[i]=t)})};return s(t),o}getAdvancedParameters(e,r){const t=this.getParametersForModel(e,r),o={},s=(e,r="")=>{Object.entries(e).forEach(([e,t])=>{const i=r?`${r}.${e}`:e;t.basic?"object"===t.type&&t.properties&&s(t.properties,i):"object"===t.type&&t.properties?s(t.properties,i):o[i]=t})};return s(t),o}validateParameters(e,r,t){const o=this.getParametersForModel(e,r),s=[];return Object.entries(o).forEach(([e,r])=>{r.required&&!(e in t)&&s.push(`Missing required parameter: ${e}`)}),Object.entries(t).forEach(([e,r])=>{const t=o[e];if(!t)return;const i=Array.isArray(r)?"array":typeof r;i===t.type||"integer"===t.type&&"number"===i||s.push(`Parameter ${e} must be of type ${t.type}, got ${i}`),"number"!==t.type&&"integer"!==t.type||"number"!=typeof r||(void 0!==t.min&&r<t.min&&s.push(`Parameter ${e} must be >= ${t.min}, got ${r}`),void 0!==t.max&&r>t.max&&s.push(`Parameter ${e} must be <= ${t.max}, got ${r}`)),t.enum&&!t.enum.includes(r)&&s.push(`Parameter ${e} must be one of: ${t.enum.join(", ")}`)}),{valid:0===s.length,errors:s}}requiresApiKey(e){const r=this.providers.get(e);return!r||"none"!==r.auth.type}getResponseModes(e){const r=this.providers.get(e);return r?.responseModes||{text:{id:"text",label:"Text",description:"Standard text response",parameters:{}}}}applyResponseMode(e,r,t){const o=this.getResponseModes(e)[r];return o?{...t,...o.parameters}:(console.warn(`Response mode ${r} not found for provider ${e}`),t)}};export{o as p};
