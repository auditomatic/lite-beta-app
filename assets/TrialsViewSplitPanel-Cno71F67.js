var e=Object.defineProperty,t=(t,a,n)=>((t,a,n)=>a in t?e(t,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[a]=n)(t,"symbol"!=typeof a?a+"":a,n);import{k as a,S as n,f as l,c as r,W as s,V as o,d as i,w as c,o as u,b as d,a9 as p,a0 as m,$ as f,X as v,u as g,Y as h,_ as y,F as b,aa as _,Z as w,G as k,ab as x,a2 as C,H as S,ah as O,ad as I,ag as T,ai as E,aj as P,B as A,g as M,s as R,h as N,a5 as $,ak as F,al as j,ae as D,q as L,am as U,l as z,z as q,af as V,an as B,a1 as H}from"./vendor-BePovdhV.js";import{I as K,b as G,l as W,J,G as Y,R as X,K as Z,_ as Q,L as ee,j as te,N as ae,O as ne,h as le,f as re,T as se,V as oe,W as ie,F as ce,X as ue,v as de,E as pe,k as me,Y as fe,Z as ve,m as ge,$ as he,p as ye,A as be,a0 as _e,a1 as we,a2 as ke,d as xe}from"./index-usdRBVPx.js";import{F as Ce}from"./FilterOutlined-DfIo-k-k.js";import{l as Se}from"./db-CL8uhZCz.js";import{T as Oe}from"./TrialCreationModalNew-D8c2DWdm.js";import{_ as Ie}from"./BaseModal.vue_vue_type_style_index_0_lang-Bs7DwrLe.js";import"./useEnvironmentalCost-R7W_l3H_.js";import"./cost-formatting-Bv_drrqY.js";import"./GenericModelSelectorModal-F286-aIC.js";var Te={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M516 673c0 4.4 3.4 8 7.5 8h185c4.1 0 7.5-3.6 7.5-8v-48c0-4.4-3.4-8-7.5-8h-185c-4.1 0-7.5 3.6-7.5 8v48zm-194.9 6.1l192-161c3.8-3.2 3.8-9.1 0-12.3l-192-160.9A7.95 7.95 0 00308 351v62.7c0 2.4 1 4.6 2.9 6.1L420.7 512l-109.8 92.2a8.1 8.1 0 00-2.9 6.1V673c0 6.8 7.9 10.5 13.1 6.1zM880 112H144c-17.7 0-32 14.3-32 32v736c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V144c0-17.7-14.3-32-32-32zm-40 728H184V184h656v656z"}}]},name:"code",theme:"outlined"};function Ee(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Pe(e,t,a[t])})}return e}function Pe(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ae=function(e,t){var n=Ee({},e,t.attrs);return a(K,Ee({},n,{icon:Te}),null)};Ae.displayName="CodeOutlined",Ae.inheritAttrs=!1;var Me={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm47.7-395.2l-25.4-5.9V348.6c38 5.2 61.5 29 65.5 58.2.5 4 3.9 6.9 7.9 6.9h44.9c4.7 0 8.4-4.1 8-8.8-6.1-62.3-57.4-102.3-125.9-109.2V263c0-4.4-3.6-8-8-8h-28.1c-4.4 0-8 3.6-8 8v33c-70.8 6.9-126.2 46-126.2 119 0 67.6 49.8 100.2 102.1 112.7l24.7 6.3v142.7c-44.2-5.9-69-29.5-74.1-61.3-.6-3.8-4-6.6-7.9-6.6H363c-4.7 0-8.4 4-8 8.7 4.5 55 46.2 105.6 135.2 112.1V761c0 4.4 3.6 8 8 8h28.4c4.4 0 8-3.6 8-8.1l-.2-31.7c78.3-6.9 134.3-48.8 134.3-124-.1-69.4-44.2-100.4-109-116.4zm-68.6-16.2c-5.6-1.6-10.3-3.1-15-5-33.8-12.2-49.5-31.9-49.5-57.3 0-36.3 27.5-57 64.5-61.7v124zM534.3 677V543.3c3.1.9 5.9 1.6 8.8 2.2 47.3 14.4 63.2 34.4 63.2 65.1 0 39.1-29.4 62.6-72 66.4z"}}]},name:"dollar",theme:"outlined"};function Re(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Ne(e,t,a[t])})}return e}function Ne(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var $e=function(e,t){var n=Re({},e,t.attrs);return a(K,Re({},n,{icon:Me}),null)};$e.displayName="DollarOutlined",$e.inheritAttrs=!1;var Fe={icon:{tag:"svg",attrs:{"fill-rule":"evenodd",viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M880 912H144c-17.7 0-32-14.3-32-32V144c0-17.7 14.3-32 32-32h360c4.4 0 8 3.6 8 8v56c0 4.4-3.6 8-8 8H184v656h656V520c0-4.4 3.6-8 8-8h56c4.4 0 8 3.6 8 8v360c0 17.7-14.3 32-32 32zM770.87 199.13l-52.2-52.2a8.01 8.01 0 014.7-13.6l179.4-21c5.1-.6 9.5 3.7 8.9 8.9l-21 179.4c-.8 6.6-8.9 9.4-13.6 4.7l-52.4-52.4-256.2 256.2a8.03 8.03 0 01-11.3 0l-42.4-42.4a8.03 8.03 0 010-11.3l256.1-256.3z"}}]},name:"export",theme:"outlined"};function je(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){De(e,t,a[t])})}return e}function De(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Le=function(e,t){var n=je({},e,t.attrs);return a(K,je({},n,{icon:Fe}),null)};Le.displayName="ExportOutlined",Le.inheritAttrs=!1;var Ue={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"defs",attrs:{},children:[{tag:"style",attrs:{}}]},{tag:"path",attrs:{d:"M945 412H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h256c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM811 548H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h122c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM477.3 322.5H434c-6.2 0-11.2 5-11.2 11.2v248c0 3.6 1.7 6.9 4.6 9l148.9 108.6c5 3.6 12 2.6 15.6-2.4l25.7-35.1v-.1c3.6-5 2.5-12-2.5-15.6l-126.7-91.6V333.7c.1-6.2-5-11.2-11.1-11.2z"}},{tag:"path",attrs:{d:"M804.8 673.9H747c-5.6 0-10.9 2.9-13.9 7.7a321 321 0 01-44.5 55.7 317.17 317.17 0 01-101.3 68.3c-39.3 16.6-81 25-124 25-43.1 0-84.8-8.4-124-25-37.9-16-72-39-101.3-68.3s-52.3-63.4-68.3-101.3c-16.6-39.2-25-80.9-25-124 0-43.1 8.4-84.7 25-124 16-37.9 39-72 68.3-101.3 29.3-29.3 63.4-52.3 101.3-68.3 39.2-16.6 81-25 124-25 43.1 0 84.8 8.4 124 25 37.9 16 72 39 101.3 68.3a321 321 0 0144.5 55.7c3 4.8 8.3 7.7 13.9 7.7h57.8c6.9 0 11.3-7.2 8.2-13.3-65.2-129.7-197.4-214-345-215.7-216.1-2.7-395.6 174.2-396 390.1C71.6 727.5 246.9 903 463.2 903c149.5 0 283.9-84.6 349.8-215.8a9.18 9.18 0 00-8.2-13.3z"}}]},name:"field-time",theme:"outlined"};function ze(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){qe(e,t,a[t])})}return e}function qe(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ve=function(e,t){var n=ze({},e,t.attrs);return a(K,ze({},n,{icon:Ue}),null)};Ve.displayName="FieldTimeOutlined",Ve.inheritAttrs=!1;var Be={icon:{tag:"svg",attrs:{viewBox:"0 0 1024 1024",focusable:"false"},children:[{tag:"path",attrs:{d:"M885.2 446.3l-.2-.8-112.2-285.1c-5-16.1-19.9-27.2-36.8-27.2H281.2c-17 0-32.1 11.3-36.9 27.6L139.4 443l-.3.7-.2.8c-1.3 4.9-1.7 9.9-1 14.8-.1 1.6-.2 3.2-.2 4.8V830a60.9 60.9 0 0060.8 60.8h627.2c33.5 0 60.8-27.3 60.9-60.8V464.1c0-1.3 0-2.6-.1-3.7.4-4.9 0-9.6-1.3-14.1zm-295.8-43l-.3 15.7c-.8 44.9-31.8 75.1-77.1 75.1-22.1 0-41.1-7.1-54.8-20.6S436 441.2 435.6 419l-.3-15.7H229.5L309 210h399.2l81.7 193.3H589.4zm-375 76.8h157.3c24.3 57.1 76 90.8 140.4 90.8 33.7 0 65-9.4 90.3-27.2 22.2-15.6 39.5-37.4 50.7-63.6h156.5V814H214.4V480.1z"}}]},name:"inbox",theme:"outlined"};function He(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Ke(e,t,a[t])})}return e}function Ke(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Ge=function(e,t){var n=He({},e,t.attrs);return a(K,He({},n,{icon:Be}),null)};Ge.displayName="InboxOutlined",Ge.inheritAttrs=!1;var We={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M832 464h-68V240c0-70.7-57.3-128-128-128H388c-70.7 0-128 57.3-128 128v224h-68c-17.7 0-32 14.3-32 32v384c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V496c0-17.7-14.3-32-32-32zM332 240c0-30.9 25.1-56 56-56h248c30.9 0 56 25.1 56 56v224H332V240zm460 600H232V536h560v304zM484 701v53c0 4.4 3.6 8 8 8h40c4.4 0 8-3.6 8-8v-53a48.01 48.01 0 10-56 0z"}}]},name:"lock",theme:"outlined"};function Je(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){Ye(e,t,a[t])})}return e}function Ye(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var Xe=function(e,t){var n=Je({},e,t.attrs);return a(K,Je({},n,{icon:We}),null)};Xe.displayName="LockOutlined",Xe.inheritAttrs=!1;var Ze={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372zm-88-532h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8zm224 0h-48c-4.4 0-8 3.6-8 8v304c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V360c0-4.4-3.6-8-8-8z"}}]},name:"pause-circle",theme:"outlined"};function Qe(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){et(e,t,a[t])})}return e}function et(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var tt=function(e,t){var n=Qe({},e,t.attrs);return a(K,Qe({},n,{icon:Ze}),null)};tt.displayName="PauseCircleOutlined",tt.inheritAttrs=!1;var at={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M300 328a60 60 0 10120 0 60 60 0 10-120 0zM852 64H172c-17.7 0-32 14.3-32 32v660c0 17.7 14.3 32 32 32h680c17.7 0 32-14.3 32-32V96c0-17.7-14.3-32-32-32zm-32 660H204V128h616v596zM604 328a60 60 0 10120 0 60 60 0 10-120 0zm250.2 556H169.8c-16.5 0-29.8 14.3-29.8 32v36c0 4.4 3.3 8 7.4 8h729.1c4.1 0 7.4-3.6 7.4-8v-36c.1-17.7-13.2-32-29.7-32zM664 508H360c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h304c4.4 0 8-3.6 8-8v-60c0-4.4-3.6-8-8-8z"}}]},name:"robot",theme:"outlined"};function nt(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){lt(e,t,a[t])})}return e}function lt(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var rt=function(e,t){var n=nt({},e,t.attrs);return a(K,nt({},n,{icon:at}),null)};rt.displayName="RobotOutlined",rt.inheritAttrs=!1;var st={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372 0-89 31.3-170.8 83.5-234.8l523.3 523.3C682.8 852.7 601 884 512 884zm288.5-137.2L277.2 223.5C341.2 171.3 423 140 512 140c205.4 0 372 166.6 372 372 0 89-31.3 170.8-83.5 234.8z"}}]},name:"stop",theme:"outlined"};function ot(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){it(e,t,a[t])})}return e}function it(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var ct=function(e,t){var n=ot({},e,t.attrs);return a(K,ot({},n,{icon:st}),null)};ct.displayName="StopOutlined",ct.inheritAttrs=!1;var ut={icon:{tag:"svg",attrs:{viewBox:"64 64 896 896",focusable:"false"},children:[{tag:"path",attrs:{d:"M848 359.3H627.7L825.8 109c4.1-5.3.4-13-6.3-13H436c-2.8 0-5.5 1.5-6.9 4L170 547.5c-3.1 5.3.7 12 6.9 12h174.4l-89.4 357.6c-1.9 7.8 7.5 13.3 13.3 7.7L853.5 373c5.2-4.9 1.7-13.7-5.5-13.7zM378.2 732.5l60.3-241H281.1l189.6-327.4h224.6L487 427.4h211L378.2 732.5z"}}]},name:"thunderbolt",theme:"outlined"};function dt(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?Object(arguments[t]):{},n=Object.keys(a);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(a).filter(function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),n.forEach(function(t){pt(e,t,a[t])})}return e}function pt(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var mt=function(e,t){var n=dt({},e,t.attrs);return a(K,dt({},n,{icon:ut}),null)};mt.displayName="ThunderboltOutlined",mt.inheritAttrs=!1;const ft="auditomatic.trial-split-view",vt=n("trial-split-view",()=>{const e=s(),t=o(),a=G(),n=l(null),i=l("medium"),c=l(""),u=l("all"),d=l(-1),p=r(()=>n.value&&a.trials.find(e=>e.id===n.value)||null),m=r(()=>{switch(i.value){case"wide":return 400;case"medium":return 250;case"collapsed":return 100}}),f=r(()=>"collapsed"===i.value),v=r(()=>{let e=a.trials;if("all"!==u.value&&(e=e.filter(e=>e.status===u.value)),c.value){const t=c.value.toLowerCase();e=e.filter(e=>e.name.toLowerCase().includes(t)||e.designSnapshot?.originalName?.toLowerCase().includes(t)||!1)}return[...e].sort((e,t)=>{const a=e.completed||e.started||e.created;return(t.completed||t.started||t.created).getTime()-a.getTime()})}),g=r(()=>({running:v.value.filter(e=>"running"===e.status),recent:v.value.filter(e=>"running"!==e.status)})),h=r(()=>v.value.length),y=r(()=>{const e={all:a.trials.length,running:0,completed:0,failed:0,draft:0,paused:0};return a.trials.forEach(t=>{const a=t.status;a in e&&e[a]++}),e});function b(t){n.value=t,d.value=-1,t?e.push({name:"trials",params:{trialId:t}}):e.push({name:"trials"}),W.debug("Trial selected",{trialId:t})}function _(){try{const e={panelMode:i.value,statusFilter:u.value,searchQuery:c.value};localStorage.setItem(`${ft}.preferences`,JSON.stringify(e))}catch(e){W.warn("Failed to save split view preferences",{error:e})}}return function(){try{const e=localStorage.getItem(`${ft}.preferences`);if(e){const t=JSON.parse(e);t.panelMode&&(i.value=t.panelMode),t.statusFilter&&(u.value=t.statusFilter),t.searchQuery&&(c.value=t.searchQuery)}}catch(e){W.warn("Failed to load split view preferences",{error:e})}}(),{selectedTrialId:r(()=>n.value),selectedTrial:r(()=>p.value),panelMode:r(()=>i.value),effectiveWidth:r(()=>m.value),isCollapsed:r(()=>f.value),searchQuery:r(()=>c.value),statusFilter:r(()=>u.value),keyboardFocusIndex:r(()=>d.value),filteredTrials:r(()=>v.value),groupedTrials:r(()=>g.value),totalFilteredCount:r(()=>h.value),statusCounts:r(()=>y.value),selectTrial:b,setSearchQuery:function(e){c.value=e,_()},setStatusFilter:function(e){u.value=e,_()},navigateByKeyboard:function(e){const t=[...g.value.running,...g.value.recent];0!==t.length&&(d.value="down"===e?Math.min(d.value+1,t.length-1):Math.max(d.value-1,0),d.value>=0&&d.value<t.length&&b(t[d.value].id))},togglePanelMode:function(){switch(i.value){case"wide":i.value="medium";break;case"medium":i.value="collapsed";break;case"collapsed":i.value="wide"}_()},setPanelMode:function(e){i.value=e,_()},savePreferences:_,clearPreferences:function(){try{localStorage.removeItem(`${ft}.preferences`),i.value="medium",u.value="all",c.value=""}catch(e){W.warn("Failed to clear split view preferences",{error:e})}},syncWithRoute:function(){const e=t.params.trialId;e&&e!==n.value?n.value=e:e||(n.value=null)}}}),gt=["data-collapsed"],ht={class:"list-toolbar"},yt={class:"list-title"},bt={key:1},_t={key:0,class:"list-actions"},wt={key:0,class:"list-search"},kt={key:1,class:"status-tabs"},xt=["onClick"],Ct={class:"tab-icon"},St={class:"tab-label"},Ot={class:"tab-count"},It={key:0,class:"list-section"},Tt=["onClick","data-index"],Et={key:0,class:"collapsed-content"},Pt={class:"collapsed-info"},At={class:"collapsed-count"},Mt={key:1,class:"item-content"},Rt={class:"item-header"},Nt={class:"item-name"},$t={class:"item-meta"},Ft={class:"meta-text"},jt={class:"meta-text"},Dt={class:"meta-text"},Lt={key:1,class:"list-section"},Ut=["onClick","data-index"],zt={key:0,class:"collapsed-content"},qt={class:"collapsed-info"},Vt={class:"collapsed-count"},Bt={key:1,class:"item-content"},Ht={class:"item-header"},Kt={class:"item-name"},Gt={class:"item-meta"},Wt={class:"meta-text"},Jt={class:"meta-text"},Yt={class:"meta-text"},Xt={key:2,class:"empty-list"},Zt=Q(i({__name:"TrialListPanel",props:{collapsed:{type:Boolean,default:!1}},emits:["create-trial"],setup(e){const t=vt(),n=G(),s=l(),o=l(),i=l(t.searchQuery),S=r(()=>t.selectedTrialId),O=r(()=>t.statusFilter),I=r(()=>t.groupedTrials),T=r(()=>t.totalFilteredCount),E=r(()=>t.keyboardFocusIndex),P=r(()=>t.statusCounts),A=r(()=>[{key:"all",label:"All",icon:"📊",count:P.value.all},{key:"running",label:"Active",icon:"🟢",count:P.value.running+P.value.paused},{key:"completed",label:"Done",icon:"✅",count:P.value.completed}]);function M(e){t.selectTrial(e)}function R(e){return 0===e.progress.total?0:Math.round(e.progress.completed/e.progress.total*100)}function N(e){const t=(new Date).getTime()-e.getTime(),a=Math.floor(t/6e4),n=Math.floor(a/60),l=Math.floor(n/24);return a<1?"now":a<60?`${a}m`:n<24?`${n}h`:l<7?`${l}d`:e.toLocaleDateString()}function $(e){"ArrowDown"===e.key||"j"===e.key?(e.preventDefault(),t.navigateByKeyboard("down"),F()):"ArrowUp"!==e.key&&"k"!==e.key||(e.preventDefault(),t.navigateByKeyboard("up"),F())}function F(){const e=o.value?.querySelectorAll(".list-item"),t=E.value;e&&t>=0&&e[t]&&e[t].scrollIntoView({behavior:"smooth",block:"nearest"})}function j({key:e}){t.setStatusFilter(e)}async function D(){await n.initialize()}c(i,e=>{t.setSearchQuery(e)});const L=e=>{(e.metaKey||e.ctrlKey)&&"k"===e.key&&(e.preventDefault(),s.value?.focus())};return u(()=>{document.addEventListener("keydown",L)}),d(()=>{document.removeEventListener("keydown",L)}),(e,n)=>{const l=h("a-badge"),r=h("a-button"),c=h("a-tooltip"),u=h("a-menu-item"),d=h("a-menu-divider"),P=h("a-menu"),F=h("a-dropdown"),L=h("a-input"),U=h("a-progress"),z=h("a-tag");return w(),p("div",{class:"trial-list-panel","data-collapsed":e.collapsed},[m("div",ht,[m("div",yt,[e.collapsed?f("",!0):(w(),v(g(J),{key:0})),e.collapsed?f("",!0):(w(),p("span",bt,"Trials")),a(l,{count:T.value,showZero:!0,style:{"margin-left":"8px"}},null,8,["count"])]),e.collapsed?f("",!0):(w(),p("div",_t,[a(r,{type:"primary",size:"small",onClick:n[0]||(n[0]=t=>e.$emit("create-trial"))},{icon:y(()=>[a(g(Y))]),default:y(()=>[n[3]||(n[3]=k(" New Trial "))]),_:1,__:[3]}),a(c,{title:"Refresh"},{default:y(()=>[a(r,{type:"text",size:"small",onClick:D},{icon:y(()=>[a(g(X))]),_:1})]),_:1}),a(F,null,{overlay:y(()=>[a(P,{onClick:j},{default:y(()=>[a(u,{key:"all"},{default:y(()=>n[4]||(n[4]=[k("All Trials")])),_:1,__:[4]}),a(d),a(u,{key:"running"},{default:y(()=>n[5]||(n[5]=[m("span",{class:"status-dot running"},null,-1),k(" Running Only ")])),_:1,__:[5]}),a(u,{key:"completed"},{default:y(()=>n[6]||(n[6]=[m("span",{class:"status-dot completed"},null,-1),k(" Completed Only ")])),_:1,__:[6]}),a(u,{key:"failed"},{default:y(()=>n[7]||(n[7]=[m("span",{class:"status-dot failed"},null,-1),k(" Failed Only ")])),_:1,__:[7]}),a(u,{key:"paused"},{default:y(()=>n[8]||(n[8]=[m("span",{class:"status-dot paused"},null,-1),k(" Paused Only ")])),_:1,__:[8]}),a(u,{key:"draft"},{default:y(()=>n[9]||(n[9]=[m("span",{class:"status-dot draft"},null,-1),k(" Draft Only ")])),_:1,__:[9]})]),_:1})]),default:y(()=>[a(r,{type:"text",size:"small"},{icon:y(()=>[a(g(Ce))]),_:1})]),_:1})]))]),e.collapsed?f("",!0):(w(),p("div",wt,[a(L,{placeholder:"Filter trials...",size:"small",value:i.value,"onUpdate:value":n[1]||(n[1]=e=>i.value=e),onKeydown:$,ref_key:"searchInputRef",ref:s},{prefix:y(()=>[a(g(Z))]),_:1},8,["value"])])),e.collapsed?f("",!0):(w(),p("div",kt,[(w(!0),p(b,null,_(A.value,e=>(w(),p("div",{key:e.key,class:x(["status-tab",{active:O.value===e.key}]),onClick:a=>{return n=e.key,void t.setStatusFilter(n);var n}},[m("span",Ct,C(e.icon),1),m("span",St,C(e.label),1),m("span",Ot,C(e.count),1)],10,xt))),128))])),m("div",{class:"trial-list",ref_key:"trialListRef",ref:o},[I.value.running.length>0?(w(),p("div",It,[n[14]||(n[14]=m("div",{class:"section-header"},"RUNNING",-1)),(w(!0),p(b,null,_(I.value.running,(t,l)=>(w(),p("div",{key:t.id,class:x(["list-item running-item",{active:S.value===t.id,"keyboard-focus":E.value===l}]),onClick:e=>M(t.id),"data-index":l},[n[13]||(n[13]=m("div",{class:"item-indicator running"},null,-1)),e.collapsed?(w(),p("div",Et,[a(c,{title:`${t.name} - ${t.progress.completed}/${t.progress.total} tasks`},{default:y(()=>[m("div",Pt,[m("span",At,C(t.progress.completed),1),a(U,{type:"circle",percent:R(t),width:20,showInfo:!1,strokeWidth:3},null,8,["percent"])])]),_:2},1032,["title"])])):(w(),p("div",Mt,[m("div",Rt,[m("span",Nt,C(t.name),1),a(z,{color:"blue",size:"small"},{default:y(()=>n[10]||(n[10]=[k("RUNNING")])),_:1,__:[10]}),a(U,{percent:R(t),showInfo:!1,strokeWidth:3,style:{width:"80px"}},null,8,["percent"])]),m("div",$t,[m("span",Ft,C(t.progress.completed)+"/"+C(t.progress.total)+" tasks",1),n[11]||(n[11]=m("span",{class:"meta-separator"},"•",-1)),m("span",jt,C(N(t.completed||t.started||t.created)),1),n[12]||(n[12]=m("span",{class:"meta-separator"},"•",-1)),m("span",Dt,"$"+C((t.estimatedCost||0).toFixed(2)),1)])]))],10,Tt))),128))])):f("",!0),I.value.recent.length>0?(w(),p("div",Lt,[n[17]||(n[17]=m("div",{class:"section-header"},"RECENT",-1)),(w(!0),p(b,null,_(I.value.recent,(t,l)=>{return w(),p("div",{key:t.id,class:x(["list-item",{active:S.value===t.id,"keyboard-focus":E.value===I.value.running.length+l}]),onClick:e=>M(t.id),"data-index":I.value.running.length+l},[m("div",{class:x(["item-indicator",t.status])},null,2),e.collapsed?(w(),p("div",zt,[a(c,{title:`${t.name} - ${t.status} - ${t.progress.completed} tasks`},{default:y(()=>[m("div",qt,[m("span",Vt,C(t.progress.completed),1)])]),_:2},1032,["title"])])):(w(),p("div",Bt,[m("div",Ht,[m("span",Kt,C(t.name),1),a(z,{color:(r=t.status,{running:"blue",completed:"green",failed:"red",paused:"orange",draft:"default"}[r]||"default"),size:"small"},{default:y(()=>[k(C(t.status),1)]),_:2},1032,["color"])]),m("div",Gt,[m("span",Wt,C(t.progress.completed)+" tasks",1),n[15]||(n[15]=m("span",{class:"meta-separator"},"•",-1)),m("span",Jt,C(N(t.completed||t.started||t.created)),1),n[16]||(n[16]=m("span",{class:"meta-separator"},"•",-1)),m("span",Yt,"$"+C((t.estimatedCost||0).toFixed(2)),1)])]))],10,Ut);var r}),128))])):f("",!0),0===T.value?(w(),p("div",Xt,[a(g(Ge),{style:{"font-size":"32px",color:"#ccc"}}),n[19]||(n[19]=m("p",null,"No trials found",-1)),a(r,{type:"primary",onClick:n[2]||(n[2]=t=>e.$emit("create-trial"))},{default:y(()=>n[18]||(n[18]=[k(" Create New Trial ")])),_:1,__:[18]})])):f("",!0)],512)],8,gt)}}}),[["__scopeId","data-v-cba73fd3"]]);"undefined"!=typeof WorkerGlobalScope&&(globalThis,WorkerGlobalScope);const Qt=()=>{};function ea(e,t=200,a=!1,n=!0,l=!1){return function(e,t){return function(...a){return new Promise((n,l)=>{Promise.resolve(e(()=>t.apply(this,a),{fn:t,thisArg:this,args:a})).then(n).catch(l)})}}(function(...e){let t,a,n,l,r,s,o=0,i=!0,c=Qt;S(e[0])||"object"!=typeof e[0]?[n,l=!0,r=!0,s=!1]=e:({delay:n,trailing:l=!0,leading:r=!0,rejectOnCancel:s=!1}=e[0]);const u=()=>{t&&(clearTimeout(t),t=void 0,c(),c=Qt)};return e=>{const d=O(n),p=Date.now()-o,m=()=>a=e();return u(),d<=0?(o=Date.now(),m()):(p>d&&(r||!i)?(o=Date.now(),m()):l&&(a=new Promise((e,a)=>{c=s?a:e,t=setTimeout(()=>{o=Date.now(),i=!0,e(m()),u()},Math.max(0,d-p))})),r||t||(t=setTimeout(()=>i=!0,d)),i=!1,a)}}(t,a,n,l),e)}const ta={class:"virtual-table"},aa={class:"virtual-table"},na=["data-row-index","data-row-id","onClick"],la=Q(i({__name:"VirtualTable",props:{columns:{},dataSource:{},rowHeight:{default:48},rowKey:{type:[String,Function],default:"id"},overscan:{default:5},showHeader:{type:Boolean,default:!0},getRowClass:{},minHeight:{default:"300px"},maxHeight:{default:"calc(100vh - 250px)"}},emits:["row-click"],setup(e,{expose:t,emit:a}){E(e=>({"78c5e07f":e.minHeight,"4abaca11":e.maxHeight}));const n=e,s=a,o=l(),i=l(),v=l(0),h=l(0),y=l(0);let S=null;const O=r(()=>n.dataSource.length*n.rowHeight),P=r(()=>{const e=Math.floor(v.value/n.rowHeight),t=Math.ceil((v.value+h.value)/n.rowHeight);return{start:Math.max(0,e-n.overscan),end:Math.min(n.dataSource.length,t+n.overscan)}}),A=r(()=>P.value.start),M=r(()=>n.dataSource.slice(P.value.start,P.value.end)),R=r(()=>A.value*n.rowHeight);function N(e){return"function"==typeof n.rowKey?n.rowKey(e):e[n.rowKey]}function $(e,t){const a=t.key.split(".");let n=e;for(const l of a){if(!n||"object"!=typeof n)return;n=n[l]}return n}function F(e){const t={};return e.width&&(t.width="number"==typeof e.width?`${e.width}px`:e.width),e.align&&(t.textAlign=e.align),t}const j=ea(e=>{null!==S&&cancelAnimationFrame(S),S=requestAnimationFrame(()=>{const t=e.target;v.value=t.scrollTop,S=null})},16);let D=null;function L(){if(o.value){const e=o.value.querySelector(".virtual-content");h.value=e?e.clientHeight:o.value.clientHeight}i.value&&(y.value=i.value.offsetHeight)}function U(){if(o.value){const e=o.value.querySelector(".virtual-content");e&&(e.scrollTop=0)}}return u(()=>{L(),o.value&&(D=new ResizeObserver(()=>{L()}),D.observe(o.value))}),d(()=>{D&&D.disconnect(),null!==S&&cancelAnimationFrame(S)}),c(()=>n.dataSource.length,()=>{v.value>O.value&&U()}),t({scrollToRow:function(e){if(o.value){const t=o.value.querySelector(".virtual-content");if(t){const a=e*n.rowHeight;t.scrollTop=a}}},scrollToTop:U}),(e,t)=>(w(),p("div",{class:"virtual-table-container",ref_key:"containerRef",ref:o,"data-testid":"virtual-table",role:"table","aria-label":"Data table with virtual scrolling"},[e.showHeader?(w(),p("div",{key:0,class:"virtual-header",ref_key:"headerRef",ref:i},[m("table",ta,[m("thead",null,[m("tr",null,[(w(!0),p(b,null,_(e.columns,e=>(w(),p("th",{key:e.key,style:I(F(e)),class:x(e.className)},C(e.title),7))),128))])])])],512)):f("",!0),m("div",{class:"virtual-content",style:I({height:`calc(100% - ${y.value}px)`}),onScrollPassive:t[0]||(t[0]=(...e)=>g(j)&&g(j)(...e))},[m("div",{class:"virtual-spacer",style:I({height:O.value+"px"})},[m("div",{class:"virtual-viewport",style:I({transform:`translateY(${R.value}px)`})},[m("table",aa,[m("tbody",null,[(w(!0),p(b,null,_(M.value,(t,a)=>(w(),p("tr",{key:N(t),"data-row-index":A.value+a,"data-row-id":N(t),class:x(e.getRowClass?e.getRowClass(t):""),"data-testid":"table-row",role:"row",onClick:e=>function(e){s("row-click",e)}(t)},[(w(!0),p(b,null,_(e.columns,a=>(w(),p("td",{key:a.key,style:I(F(a)),class:x(a.className)},[T(e.$slots,"cell",{column:a,record:t,value:$(t,a)},()=>[k(C($(t,a)),1)],!0)],6))),128))],10,na))),128))])])],4)],4)],36)],512))}}),[["__scopeId","data-v-abacd51a"]]);const ra=new class{constructor(){t(this,"metrics",[]),t(this,"recording",!1),t(this,"recordingStartTime",null),t(this,"overlayElement",null),t(this,"rafId",null),t(this,"lastFrameTime",0),t(this,"fpsHistory",[]),t(this,"componentRenderCounts",{}),t(this,"measurementMap",new Map)}calculateFPS(){const e=performance.now();if(0===this.lastFrameTime)return this.lastFrameTime=e,60;const t=1e3/(e-this.lastFrameTime);return this.lastFrameTime=e,this.fpsHistory.push(t),this.fpsHistory.length>60&&this.fpsHistory.shift(),this.fpsHistory.reduce((e,t)=>e+t,0)/this.fpsHistory.length}getMemoryUsage(){if("memory"in performance&&performance.memory){return performance.memory.usedJSHeapSize/1048576}return 0}getDOMNodeCount(){return document.querySelectorAll("*").length}start(e){this.measurementMap.set(e,performance.now())}end(e){const t=this.measurementMap.get(e);if(!t)return console.warn(`No start time found for label: ${e}`),0;const a=performance.now()-t;return this.measurementMap.delete(e),a}measure(e,t){const a=performance.now(),n=t(),l=performance.now()-a;if(this.recording){this.getCurrentMetrics().renderTime=l}return n}trackComponentRender(e){this.componentRenderCounts[e]=(this.componentRenderCounts[e]||0)+1}getCurrentMetrics(){return{fps:this.calculateFPS(),renderTime:0,updateTime:0,memoryUsage:this.getMemoryUsage(),domNodes:this.getDOMNodeCount(),componentRenders:{...this.componentRenderCounts}}}showOverlay(e){e&&!this.overlayElement?(this.createOverlay(),this.startOverlayUpdate()):!e&&this.overlayElement&&this.destroyOverlay()}createOverlay(){this.overlayElement=document.createElement("div"),this.overlayElement.id="performance-overlay",this.overlayElement.style.cssText="\n      position: fixed;\n      top: 10px;\n      right: 10px;\n      background: rgba(0, 0, 0, 0.8);\n      color: #0f0;\n      font-family: monospace;\n      font-size: 12px;\n      padding: 10px;\n      border-radius: 5px;\n      z-index: 999999;\n      pointer-events: none;\n      min-width: 200px;\n    ",document.body.appendChild(this.overlayElement)}destroyOverlay(){this.overlayElement&&(document.body.removeChild(this.overlayElement),this.overlayElement=null),null!==this.rafId&&(cancelAnimationFrame(this.rafId),this.rafId=null)}updateOverlay(){if(!this.overlayElement)return;const e=this.getCurrentMetrics(),t=e.memoryUsage>100?"#f00":e.memoryUsage>50?"#ff0":"#0f0",a=e.fps<30?"#f00":e.fps<55?"#ff0":"#0f0",n=e.domNodes>5e3?"#f00":e.domNodes>2e3?"#ff0":"#0f0";this.overlayElement.innerHTML=`\n      <div style="margin-bottom: 5px; font-weight: bold;">Performance Monitor</div>\n      <div>FPS: <span style="color: ${a}">${e.fps.toFixed(1)}</span></div>\n      <div>Memory: <span style="color: ${t}">${e.memoryUsage.toFixed(1)} MB</span></div>\n      <div>DOM Nodes: <span style="color: ${n}">${e.domNodes}</span></div>\n      ${e.renderTime>0?`<div>Render: ${e.renderTime.toFixed(1)}ms</div>`:""}\n      ${e.updateTime>0?`<div>Update: ${e.updateTime.toFixed(1)}ms</div>`:""}\n    `}startOverlayUpdate(){const e=()=>{this.updateOverlay(),this.rafId=requestAnimationFrame(e)};e()}startRecording(){this.recording=!0,this.recordingStartTime=new Date,this.metrics=[],this.componentRenderCounts={};const e=setInterval(()=>{this.recording?this.metrics.push(this.getCurrentMetrics()):clearInterval(e)},100)}stopRecording(){if(!this.recording||!this.recordingStartTime)throw new Error("No recording in progress");this.recording=!1;const e=new Date,t={avgFps:this.metrics.reduce((e,t)=>e+t.fps,0)/this.metrics.length||0,avgRenderTime:this.metrics.reduce((e,t)=>e+t.renderTime,0)/this.metrics.length||0,avgUpdateTime:this.metrics.reduce((e,t)=>e+t.updateTime,0)/this.metrics.length||0,peakMemoryUsage:Math.max(...this.metrics.map(e=>e.memoryUsage)),totalRenders:Object.values(this.componentRenderCounts).reduce((e,t)=>e+t,0)},a={startTime:this.recordingStartTime,endTime:e,duration:e.getTime()-this.recordingStartTime.getTime(),metrics:this.metrics,summary:t};return this.recordingStartTime=null,this.metrics=[],a}exportReport(e){const t=new Blob([JSON.stringify(e,null,2)],{type:"application/json"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a,n.download=`performance-report-${e.startTime.toISOString()}.json`,n.click(),URL.revokeObjectURL(a)}logWarning(e,t){console.warn(`[Performance Warning] ${e}`,t)}checkPerformance(){const e=this.getCurrentMetrics();e.fps<30&&this.logWarning(`Low FPS detected: ${e.fps.toFixed(1)}`,{fps:e.fps}),e.memoryUsage>100&&this.logWarning(`High memory usage: ${e.memoryUsage.toFixed(1)} MB`,{memoryUsage:e.memoryUsage}),e.domNodes>5e3&&this.logWarning(`Excessive DOM nodes: ${e.domNodes}`,{domNodes:e.domNodes})}},sa=Q(i({__name:"VirtualDataTable",props:{columns:{},dataSource:{},loading:{type:Boolean,default:!1},rowKey:{},rowHeight:{type:[Number,Function],default:60},overscan:{default:10},pagination:{type:[Boolean,Object],default:!1},scroll:{},size:{default:"small"},customRow:{},onRow:{},rowClassName:{},className:{},style:{},forceVirtual:{type:Boolean,default:!1}},emits:["row-click","cell-click"],setup(e,{emit:t}){const a=e,n=t,l=r(()=>!!a.forceVirtual||a.dataSource.length>100&&(ra.trackComponentRender("VirtualDataTable"),!0)),s=r(()=>a.columns.map(e=>({key:e.key||("string"==typeof e.dataIndex?e.dataIndex:e.dataIndex?.[0])||"",title:e.title,width:e.width,align:e.align,className:e.className}))),o=r(()=>{if("function"==typeof a.rowHeight)return a.rowHeight;return{small:48,middle:60,large:72}[a.size||"small"]||a.rowHeight});function i(e){if(n("row-click",e),a.customRow){const t=a.customRow(e);t&&"object"==typeof t&&"onClick"in t&&t.onClick()}}function c(e){if("function"==typeof a.rowClassName){const t=a.dataSource.indexOf(e);return a.rowClassName(e,t)}return a.rowClassName||""}const u=r(()=>{const e={};return a.customRow&&(e.customRow=a.customRow),a.onRow&&(e.onRow=a.onRow),a.rowClassName&&(e.rowClassName=a.rowClassName),e});return(e,t)=>(w(),p("div",{class:x(["virtual-data-table",{"virtual-enabled":l.value}])},[l.value?(w(),v(la,{key:0,columns:s.value,"data-source":e.dataSource,"row-height":"function"==typeof o.value?void 0:o.value,"row-key":e.rowKey,overscan:e.overscan,"show-header":!0,"get-row-class":c,"min-height":e.scroll?.y?`${e.scroll.y}px`:"400px","max-height":e.scroll?.y?`${e.scroll.y}px`:"calc(100vh - 300px)",onRowClick:i},{cell:y(({column:t,record:a,value:n})=>[T(e.$slots,"bodyCell",{column:e.columns.find(e=>e.key===t.key||e.dataIndex===t.key),record:a,text:n,value:n,index:e.dataSource.indexOf(a)},()=>[k(C(n),1)],!0)]),_:3},8,["columns","data-source","row-height","row-key","overscan","min-height","max-height"])):(w(),v(g(ee),P({key:1},u.value,{columns:e.columns,"data-source":e.dataSource,loading:e.loading,pagination:e.pagination,scroll:e.scroll,size:e.size,"row-key":e.rowKey,"custom-row":e.customRow,"row-class-name":e.rowClassName,class:e.className,style:e.style}),{bodyCell:y(({column:t,record:a,text:n,value:l,index:r})=>[T(e.$slots,"bodyCell",{column:t,record:a,text:n,value:l,index:r},void 0,!0)]),_:3},16,["columns","data-source","loading","pagination","scroll","size","row-key","custom-row","row-class-name","class","style"]))],2))}}),[["__scopeId","data-v-2264c400"]]),oa={class:"api-call-modal"},ia={class:"modal-header"},ca={class:"modal-content"},ua={class:"section"},da={class:"info-grid"},pa={class:"info-item"},ma={class:"call-id"},fa={class:"info-item"},va={class:"info-item"},ga={class:"info-item"},ha={key:0,class:"info-item"},ya={key:1,class:"info-item"},ba={key:2,class:"info-item"},_a={class:"section"},wa={class:"variables-detail"},ka={class:"variable-value"},xa={key:0,class:"attributes-section"},Ca={class:"attribute-items"},Sa={class:"section"},Oa={class:"prompt-display"},Ia={key:0,class:"section"},Ta={key:0,class:"response-info"},Ea={class:"info-grid"},Pa={class:"info-item"},Aa={class:"info-item"},Ma={key:1,class:"result-content"},Ra={key:0,class:"error-result"},Na={class:"error-message"},$a={key:0,class:"error-raw"},Fa={class:"error-response"},ja={key:1,class:"content-result"},Da={class:"content-display"},La={class:"section"},Ua={class:"raw-data"},za={key:1,class:"section"},qa={class:"raw-data"},Va={class:"modal-footer"},Ba=Q(i({__name:"APICallDetailModal",props:{apiCall:{},trial:{}},emits:["close"],setup(e){const t=e,n=r(()=>{if(!t.apiCall.request)return"No request data";const e=JSON.parse(JSON.stringify(t.apiCall.request));return e.headers&&Object.keys(e.headers).forEach(t=>{const a=t.toLowerCase();(a.includes("authorization")||a.includes("api-key")||a.includes("x-api-key")||a.includes("bearer"))&&(e.headers[t]="[REDACTED]")}),JSON.stringify(e,null,2)});function l(){return t.trial&&t.trial.configurationSnapshots[t.apiCall.configurationIndex]&&t.trial.configurationSnapshots[t.apiCall.configurationIndex].name||`Configuration ${t.apiCall.configurationIndex+1}`}function s(e){const t="string"==typeof e?new Date(e):e;return isNaN(t.getTime())?"Invalid date":t.toLocaleString()}async function o(){const e={id:t.apiCall.id,status:t.apiCall.status,configuration:l(),variables:t.apiCall.variables,variableAttributes:t.apiCall.variableAttributes,prompt:t.apiCall.prompt,request:JSON.parse(n.value),response:t.apiCall.response,result:t.apiCall.result,created:t.apiCall.created,completed:t.apiCall.completed},a=JSON.stringify(e,null,2);try{if(navigator.clipboard&&navigator.clipboard.writeText)return await navigator.clipboard.writeText(a),void te.success("Details copied to clipboard!");const e=document.createElement("textarea");e.value=a,e.style.position="fixed",e.style.left="-999999px",e.style.top="-999999px",document.body.appendChild(e),e.focus(),e.select();const t=document.execCommand("copy");if(document.body.removeChild(e),!t)throw new Error("execCommand failed");te.success("Details copied to clipboard!")}catch(r){W.error("Failed to copy to clipboard",r),prompt("Copy this text manually:",a)}}return(e,t)=>{const r=h("a-button");return w(),p("div",{class:"modal-overlay",onClick:t[2]||(t[2]=A(t=>e.$emit("close"),["self"]))},[m("div",oa,[m("div",ia,[t[3]||(t[3]=m("h2",null,"API Call Details",-1)),m("button",{class:"close-btn",onClick:t[0]||(t[0]=t=>e.$emit("close")),"data-testid":"btn-close-api-call-modal","aria-label":"Close API call details"},"×")]),m("div",ca,[m("div",ua,[t[11]||(t[11]=m("h3",null,"Overview",-1)),m("div",da,[m("div",pa,[t[4]||(t[4]=m("label",null,"Call ID:",-1)),m("span",ma,C(e.apiCall.id),1)]),m("div",fa,[t[5]||(t[5]=m("label",null,"Status:",-1)),m("span",{class:x(["status-badge",e.apiCall.status])},C(e.apiCall.status),3)]),m("div",va,[t[6]||(t[6]=m("label",null,"Configuration:",-1)),m("span",null,C(l()),1)]),m("div",ga,[t[7]||(t[7]=m("label",null,"Created:",-1)),m("span",null,C(s(e.apiCall.created)),1)]),e.apiCall.completed?(w(),p("div",ha,[t[8]||(t[8]=m("label",null,"Completed:",-1)),m("span",null,C(s(e.apiCall.completed)),1)])):f("",!0),e.apiCall.completed?(w(),p("div",ya,[t[9]||(t[9]=m("label",null,"Duration:",-1)),m("span",null,C((i=e.apiCall.completed.getTime()-e.apiCall.created.getTime(),i<1e3?`${i}ms`:`${(i/1e3).toFixed(1)}s`)),1)])):f("",!0),e.apiCall.response?.latencyMs?(w(),p("div",ba,[t[10]||(t[10]=m("label",null,"API Latency:",-1)),m("span",null,C(e.apiCall.response.latencyMs)+"ms",1)])):f("",!0)])]),m("div",_a,[t[13]||(t[13]=m("h3",null,"Variables",-1)),m("div",wa,[(w(!0),p(b,null,_(Object.entries(e.apiCall.variables),([e,t])=>(w(),p("div",{key:e,class:"variable-item"},[m("label",null,C(e)+":",1),m("span",ka,C(t),1)]))),128))]),e.apiCall.variableAttributes&&Object.keys(e.apiCall.variableAttributes).length>0?(w(),p("div",xa,[t[12]||(t[12]=m("h4",null,"Variable Attributes",-1)),(w(!0),p(b,null,_(Object.entries(e.apiCall.variableAttributes),([e,t])=>(w(),p("div",{key:e,class:"attribute-group"},[m("h5",null,C(e),1),m("div",Ca,[(w(!0),p(b,null,_(Object.entries(t),([e,t])=>(w(),p("div",{key:e,class:"attribute-item"},[m("label",null,C(e)+":",1),m("span",null,C(t),1)]))),128))])]))),128))])):f("",!0)]),m("div",Sa,[t[14]||(t[14]=m("h3",null,"Resolved Prompt",-1)),m("div",Oa,C(e.apiCall.prompt),1)]),e.apiCall.response||e.apiCall.result?(w(),p("div",Ia,[t[20]||(t[20]=m("h3",null,"Response",-1)),e.apiCall.response?(w(),p("div",Ta,[m("div",Ea,[m("div",Pa,[t[15]||(t[15]=m("label",null,"HTTP Status:",-1)),m("span",null,C(e.apiCall.response.status),1)]),m("div",Aa,[t[16]||(t[16]=m("label",null,"Latency:",-1)),m("span",null,C(e.apiCall.response.latencyMs)+"ms",1)])])])):f("",!0),e.apiCall.result?(w(),p("div",Ma,[!1===e.apiCall.result.success?(w(),p("div",Ra,[t[18]||(t[18]=m("h4",null,"Error",-1)),m("div",Na,C(e.apiCall.result.error),1),e.apiCall.response?(w(),p("div",$a,[t[17]||(t[17]=m("h5",null,"Raw Response:",-1)),m("pre",Fa,C(JSON.stringify(e.apiCall.response,null,2)),1)])):f("",!0)])):f("",!0),e.apiCall.result.content?(w(),p("div",ja,[t[19]||(t[19]=m("h4",null,"Content",-1)),m("div",Da,C(e.apiCall.result.content),1)])):f("",!0)])):f("",!0)])):f("",!0),m("div",La,[t[21]||(t[21]=m("h3",null,"Raw Request",-1)),m("pre",Ua,C(n.value),1)]),e.apiCall.response?(w(),p("div",za,[t[22]||(t[22]=m("h3",null,"Raw Response",-1)),m("pre",qa,C(JSON.stringify(e.apiCall.response,null,2)),1)])):f("",!0)]),m("div",Va,[a(r,{onClick:t[1]||(t[1]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-close-modal-footer","aria-label":"Close modal"},{default:y(()=>t[23]||(t[23]=[k(" Close ")])),_:1,__:[23]}),a(r,{type:"primary",onClick:o,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-copy-api-call-details","aria-label":"Copy API call details to clipboard"},{default:y(()=>t[24]||(t[24]=[k(" Copy Details ")])),_:1,__:[24]})])])]);var i}}}),[["__scopeId","data-v-d79e18d5"]]),Ha={VIRTUAL_SCROLLING:{key:"VIRTUAL_SCROLLING",name:"Virtual Scrolling",description:"Enable virtual scrolling for large data tables",defaultValue:!1,experimental:!0},WEB_WORKERS:{key:"WEB_WORKERS",name:"Web Workers",description:"Offload expensive calculations to web workers",defaultValue:!1,experimental:!0},OPTIMIZED_SORTING:{key:"OPTIMIZED_SORTING",name:"Optimized Sorting",description:"Use optimized sorting algorithms with memoization",defaultValue:!1},SHALLOW_REACTIVITY:{key:"SHALLOW_REACTIVITY",name:"Shallow Reactivity",description:"Use shallowRef for large arrays to reduce reactivity overhead",defaultValue:!1},DEBOUNCED_UPDATES:{key:"DEBOUNCED_UPDATES",name:"Debounced Updates",description:"Batch and debounce rapid data updates",defaultValue:!1},DIFFERENTIAL_UPDATES:{key:"DIFFERENTIAL_UPDATES",name:"Differential Updates",description:"Only update changed data instead of full replacement",defaultValue:!1,experimental:!0,dependencies:["DEBOUNCED_UPDATES"]},DATA_WINDOWING:{key:"DATA_WINDOWING",name:"Data Windowing",description:"Keep only visible data in memory with progressive loading",defaultValue:!1,experimental:!0,dependencies:["VIRTUAL_SCROLLING"]},PERFORMANCE_MONITORING:{key:"PERFORMANCE_MONITORING",name:"Performance Monitoring",description:"Enable performance monitoring overlay and metrics",defaultValue:!1}};const Ka=new class{constructor(){t(this,"flags"),t(this,"overrides",{});const e={};Object.values(Ha).forEach(t=>{e[t.key]=t.defaultValue}),this.flags=l(e),this.loadOverrides(),this.applyURLParams()}isEnabled(e){if(e in this.overrides)return this.overrides[e];if(!(e in Ha))return W.warn(`Unknown feature flag: ${e}`),!1;const t=Ha[e];if(t.dependencies)for(const a of t.dependencies)if(!this.isEnabled(a))return!1;return this.flags.value[e]??!1}useFlag(e){return r(()=>this.isEnabled(e))}enable(e,t=!0){e in Ha?(this.flags.value[e]=!0,this.overrides[e]=!0,t&&this.saveOverrides(),W.info(`Feature enabled: ${e}`)):W.warn(`Unknown feature flag: ${e}`)}disable(e,t=!0){e in Ha?(this.flags.value[e]=!1,this.overrides[e]=!1,t&&this.saveOverrides(),W.info(`Feature disabled: ${e}`)):W.warn(`Unknown feature flag: ${e}`)}toggle(e,t=!0){this.isEnabled(e)?this.disable(e,t):this.enable(e,t)}resetToDefaults(){Object.values(Ha).forEach(e=>{this.flags.value[e.key]=e.defaultValue}),this.overrides={},this.saveOverrides(),W.info("Feature flags reset to defaults")}enableExperimental(){Object.values(Ha).forEach(e=>{e.experimental&&this.enable(e.key,!1)}),this.saveOverrides(),W.info("All experimental features enabled")}getState(){const e={};return Object.keys(Ha).forEach(t=>{e[t]=this.isEnabled(t)}),e}getFlagInfo(e){return Ha[e]}getAllFlags(){return Object.values(Ha)}loadOverrides(){try{const e=localStorage.getItem("auditomatic_feature_flags");e&&(this.overrides=JSON.parse(e),Object.entries(this.overrides).forEach(([e,t])=>{e in this.flags.value&&(this.flags.value[e]=t)}),W.info("Loaded feature flag overrides",this.overrides))}catch(e){W.error("Failed to load feature flag overrides",e)}}saveOverrides(){try{localStorage.setItem("auditomatic_feature_flags",JSON.stringify(this.overrides))}catch(e){W.error("Failed to save feature flag overrides",e)}}applyURLParams(){new URLSearchParams(window.location.search).forEach((e,t)=>{if(t.startsWith("feature_")){const a=t.substring(8).toUpperCase(),n="true"===e||"1"===e;a in Ha&&(this.overrides[a]=n,this.flags.value[a]=n,W.info(`Feature flag set from URL: ${a} = ${n}`))}})}enablePerformanceOptimizations(e="basic"){const t=["VIRTUAL_SCROLLING","WEB_WORKERS","DIFFERENTIAL_UPDATES"],a=["DATA_WINDOWING"];"basic"!==e&&"advanced"!==e&&"all"!==e||["OPTIMIZED_SORTING","SHALLOW_REACTIVITY","DEBOUNCED_UPDATES","PERFORMANCE_MONITORING"].forEach(e=>this.enable(e,!1)),"advanced"!==e&&"all"!==e||t.forEach(e=>this.enable(e,!1)),"all"===e&&a.forEach(e=>this.enable(e,!1)),this.saveOverrides(),W.info(`Performance optimizations enabled: ${e}`)}},Ga=new Map;function Wa(e,t={}){const a=l(0),n=Ka.isEnabled("OPTIMIZED_SORTING"),s=r(()=>{a.value;const l=e.value;if(!l||0===l.length)return[];const r=t.compareFunction||((e,t)=>e<t?-1:e>t?1:0);t.trackPerformance&&ra.start("optimizedSort");try{const e=t.cacheKey||(n?function(e,t){const a=e[0],n=e[e.length-1],l=e[Math.floor(e.length/2)];return`${e.length}-${JSON.stringify(a)?.slice(0,20)}-${JSON.stringify(l)?.slice(0,20)}-${JSON.stringify(n)?.slice(0,20)}-${t?.toString().slice(0,50)}`}(l,r):null);if(n&&e&&Ga.has(e)){if(t.trackPerformance){ra.end("optimizedSort")}return Ga.get(e)}const a=n?function(e,t,a){return e.length<32?function(e,t,a){const n=a?e:[...e];for(let l=1;l<n.length;l++){const e=n[l];let a=l-1;for(;a>=0&&t(n[a],e)>0;)n[a+1]=n[a],a--;n[a+1]=e}return n}(e,t,a):function(e,t){for(let a=1;a<e.length;a++)if(t(e[a-1],e[a])>0)return!1;return!0}(e,t)?a?e:[...e]:(a?e:[...e]).sort(t)}(l,r,!1):[...l].sort(r);if(n&&e&&(Ga.set(e,a),function(){if(Ga.size>100){const e=Math.floor(Ga.size/2),t=Array.from(Ga.keys());for(let a=0;a<e;a++)Ga.delete(t[a])}}()),t.trackPerformance){const e=ra.end("optimizedSort");e>16&&ra.logWarning(`Slow sort: ${e}ms for ${l.length} items`)}return a}catch(s){return t.trackPerformance&&ra.end("optimizedSort"),console.error("Sort error:",s),[...l]}});return{sorted:s,resort:function(){a.value++},clearCache:function(){if(t.cacheKey)Ga.delete(t.cacheKey);else if(e.value){const t=`${e.value.length}-`;Array.from(Ga.keys()).filter(e=>e.startsWith(t)).forEach(e=>Ga.delete(e))}a.value++}}}const Ja={class:"results-table-container"},Ya={class:"filters-bar"},Xa={key:1},Za={key:0,class:"repeat-index"},Qa={key:1,class:"text-secondary"},en={key:3,class:"variables-compact"},tn={key:0,class:"text-secondary"},an={key:1,class:"text-secondary"},nn={key:2,class:"text-error"},ln={key:3,class:"response-content"},rn={key:4,class:"text-secondary"},sn={key:0,class:"length-value"},on={key:1,class:"text-secondary"},cn={key:0},un={key:1,class:"text-secondary"},dn=Q(i({__name:"TrialResultsTable",props:{trial:{},apiCalls:{},loading:{type:Boolean}},setup(e){const t=e,n=l(""),s=l(""),o=l(""),i=function(e,t=300){const a=l(e.value);let n;const r=c(e,e=>{clearTimeout(n),n=window.setTimeout(()=>{a.value=e},t)});return M()&&d(()=>{clearTimeout(n),r()}),a}(o,300),u=l(!1),x=l(null),S=r(()=>{const e=t.trial.repeatConfig?.callsPerPrompt?96:80;return Ka.isEnabled("SHALLOW_REACTIVITY")?e:e+16}),O=r(()=>{const e=[{title:"Status",key:"status",dataIndex:"status",width:120,fixed:"left"},{title:"Configuration",key:"config",dataIndex:"configurationIndex",width:200}];return ae(t.trial)&&e.push({title:"Repeat",key:"repeat",dataIndex:"repeatIndex",width:100}),[...e,{title:"Variables",key:"variables",dataIndex:"variables",width:500},{title:"Response",key:"response",dataIndex:"result",ellipsis:!0,minWidth:400},{title:"Length",key:"length",dataIndex:"result",width:120,align:"right"},{title:"Latency",key:"latency",dataIndex:"response",width:120,align:"right"}]}),I=R([]),T=R([]);N(()=>{T.value=t.apiCalls||[]});const{sorted:E}=function(e,t={}){const a=e=>{switch(e){case"pending":return 1;case"running":return 2;case"completed":case"failed":return 3;default:return 4}};return Wa(e,{...t,compareFunction:(e,t)=>{const n=a(e.status),l=a(t.status);if(n!==l)return n-l;const r=e.created instanceof Date?e.created.getTime():new Date(e.created).getTime(),s=t.created instanceof Date?t.created.getTime():new Date(t.created).getTime();return"pending"===e.status?r-s:s-r},cacheKey:`apiCall-${e.value.length}`})}(T,{trackPerformance:Ka.isEnabled("PERFORMANCE_MONITORING")}),P=r(()=>Ka.isEnabled("OPTIMIZED_SORTING")?E.value:T.value);N(()=>{Ka.isEnabled("PERFORMANCE_MONITORING")&&ra.start("filterApiCalls");let e=P.value;if(n.value&&(e=e.filter(e=>e.status===n.value)),""!==s.value&&(e=e.filter(e=>e.configurationIndex===Number(s.value))),i.value){const t=i.value.toLowerCase();e=e.filter(e=>{if(JSON.stringify(e.variables).toLowerCase().includes(t))return!0;if(e.result?.content){if(String(e.result.content).toLowerCase().includes(t))return!0}return!1})}if(I.value=e,Ka.isEnabled("PERFORMANCE_MONITORING")){const e=ra.end("filterApiCalls");e>16&&ra.logWarning(`Slow filter operation: ${e}ms for ${t.apiCalls.length} items`)}});const A=r(()=>I.value);function F(e){const a=t.trial.configurationSnapshots[e];return a?.name||`Config ${e+1}`}return(e,t)=>{const l=h("a-select-option"),r=h("a-select"),i=h("a-input-search"),c=h("a-space"),d=h("a-button"),I=h("a-tag"),T=h("a-tooltip");return w(),p("div",Ja,[m("div",Ya,[a(c,{size:"large",style:{flex:"1"}},{default:y(()=>[a(r,{value:n.value,"onUpdate:value":t[0]||(t[0]=e=>n.value=e),placeholder:"All Statuses",style:{width:"200px"},size:"large","allow-clear":"","data-testid":"select-status-filter","aria-label":"Filter results by status"},{default:y(()=>[a(l,{value:""},{default:y(()=>t[6]||(t[6]=[k("All Statuses")])),_:1,__:[6]}),a(l,{value:"completed"},{default:y(()=>t[7]||(t[7]=[k("Completed")])),_:1,__:[7]}),a(l,{value:"failed"},{default:y(()=>t[8]||(t[8]=[k("Failed")])),_:1,__:[8]}),a(l,{value:"running"},{default:y(()=>t[9]||(t[9]=[k("Running")])),_:1,__:[9]}),a(l,{value:"pending"},{default:y(()=>t[10]||(t[10]=[k("Pending")])),_:1,__:[10]})]),_:1},8,["value"]),a(r,{value:s.value,"onUpdate:value":t[1]||(t[1]=e=>s.value=e),placeholder:"All Configurations",style:{width:"250px"},size:"large","allow-clear":"","data-testid":"select-config-filter","aria-label":"Filter results by configuration"},{default:y(()=>[a(l,{value:""},{default:y(()=>t[11]||(t[11]=[k("All Configurations")])),_:1,__:[11]}),(w(!0),p(b,null,_(e.trial.configurationSnapshots,(e,t)=>(w(),v(l,{key:t,value:t},{default:y(()=>[k(C(e.name||`Config ${t+1}`),1)]),_:2},1032,["value"]))),128))]),_:1},8,["value"]),a(i,{value:o.value,"onUpdate:value":t[2]||(t[2]=e=>o.value=e),placeholder:"Search variables or response...",style:{width:"400px",flex:"1"},size:"large","allow-clear":"","data-testid":"input-search-results","aria-label":"Search in variables or response content"},null,8,["value"])]),_:1}),a(d,{size:"large",type:"primary",onClick:t[3]||(t[3]=e=>u.value=!0),"data-testid":"btn-export-results-data","aria-label":"Export trial results data"},{icon:y(()=>[a(g(Le))]),default:y(()=>[t[12]||(t[12]=k(" Export Data "))]),_:1,__:[12]})]),a(sa,{columns:O.value,"data-source":A.value,loading:e.loading,pagination:!1,scroll:{x:1600,y:800},size:"middle","row-key":"id",class:"results-table","custom-row":e=>({onClick:()=>{return t=e,void(x.value=t);var t},class:"clickable-row"}),"row-height":S.value,overscan:10,"force-virtual":!0},{bodyCell:y(({column:e,record:n})=>{return["status"===e.key?(w(),v(I,{key:0,color:(l=n.status,{completed:"success",failed:"error",running:"processing",pending:"default"}[l]||"default")},{default:y(()=>[k(C(n.status.toUpperCase()),1)]),_:2},1032,["color"])):f("",!0),"config"===e.key?(w(),p("code",Xa,C(F(n.configurationIndex)),1)):f("",!0),"repeat"===e.key?(w(),p(b,{key:2},[void 0!==n.repeatIndex?(w(),p("span",Za," #"+C(n.repeatIndex+1),1)):(w(),p("span",Qa,"-"))],64)):f("",!0),"variables"===e.key?(w(),p("div",en,[(w(!0),p(b,null,_(n.variables,(e,t)=>(w(),v(T,{key:t},{title:y(()=>[k(C(t)+": "+C(e),1)]),default:y(()=>[a(I,null,{default:y(()=>{return[k(C(t)+": "+C((a=String(e),n=20,a.length<=n?a:a.substring(0,n)+"...")),1)];var a,n}),_:2},1024)]),_:2},1024))),128))])):f("",!0),"response"===e.key?(w(),p(b,{key:4},["pending"===n.status?(w(),p("div",tn," Waiting... ")):"running"===n.status?(w(),p("div",an,[a(g(ne)),t[13]||(t[13]=k(" Processing... "))])):"failed"===n.status?(w(),p("div",nn,C(n.result?.error||"API call failed"),1)):n.result?.content?(w(),p("div",ln,[m("span",null,C(String(n.result.content)),1)])):(w(),p("div",rn," No content "))],64)):f("",!0),"length"===e.key?(w(),p(b,{key:5},[n.result?.content?(w(),p("span",sn,C(String(n.result.content).length),1)):(w(),p("span",on,"-"))],64)):f("",!0),"latency"===e.key?(w(),p(b,{key:6},[n.response?.latencyMs?(w(),p("span",cn,C(n.response.latencyMs)+"ms ",1)):(w(),p("span",un,"-"))],64)):f("",!0)];var l}),_:1},8,["columns","data-source","loading","custom-row","row-height"]),u.value?(w(),v($(()=>le(()=>Promise.resolve().then(()=>Ir),void 0,import.meta.url)),{key:0,trial:e.trial,"api-calls":A.value,onClose:t[4]||(t[4]=e=>u.value=!1)},null,40,["trial","api-calls"])):f("",!0),x.value?(w(),v(Ba,{key:1,"api-call":x.value,trial:e.trial,onClose:t[5]||(t[5]=e=>x.value=null)},null,8,["api-call","trial"])):f("",!0)])}}}),[["__scopeId","data-v-e092fd1c"]]);function pn(e,t){const a=new Set,n=new Set,l=new Set;e.forEach(e=>{e.variables&&Object.keys(e.variables).forEach(e=>a.add(e)),e.variableAttributes&&Object.values(e.variableAttributes).forEach(e=>{e&&Object.keys(e).forEach(e=>n.add(e))})});const r=Array.from(a).sort(),s=Array.from(n).sort(),o=Array.from(l).sort(),i=[];t?.designSnapshot?.extractPattern&&i.push("extracted_value");const c=["success","refused",...i,...o];return{categorical:[...r,...s,"model","status","error_type"],numeric:["response_time","total_tokens","prompt_tokens","completion_tokens","extracted_value",...i].sort(),extracted:c}}function mn(e,t,a){switch(t){case"model":if(a&&e.configurationIndex<a.configurationSnapshots.length){return a.configurationSnapshots[e.configurationIndex].modelId||"Unknown"}return"Unknown";case"status":return e.status;case"response_time":return e.response?.latencyMs||0;case"total_tokens":if(e.response?.body?.usage){const t=e.response.body.usage;return t.total_tokens||t.prompt_tokens+t.completion_tokens||0}return 0;case"prompt_tokens":return e.response?.body?.usage?.prompt_tokens||e.response?.body?.usage?.input_tokens||0;case"completion_tokens":return e.response?.body?.usage?.completion_tokens||e.response?.body?.usage?.output_tokens||0;case"error_type":return e.result?.errorType||(!1===e.result?.success?"api_error":"success");case"success":return e.result?.success?1:0;case"refused":return e.result?.refused?1:0;case"extracted_value":if(e.result?.success&&void 0!==e.result?.content){const t=String(e.result.content),a=parseFloat(t);return isNaN(a)||t.trim()!==String(a)?t:a}return null}if(void 0!==e.variables?.[t])return e.variables[t];if(e.variableAttributes)for(const n of Object.keys(e.variableAttributes)){const a=e.variableAttributes[n];if(a&&void 0!==a[t])return a[t]}return null}const fn={count:{label:"Count",calculate:e=>e.length,format:e=>e.toString(),needsNumeric:!1},sum:{label:"Sum",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mean:{label:"Mean",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?t.reduce((e,t)=>e+t,0)/t.length:null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},median:{label:"Median",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(0===t.length)return null;const a=[...t].sort((e,t)=>e-t),n=Math.floor(a.length/2);return a.length%2==0?(a[n-1]+a[n])/2:a[n]},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},mode:{label:"Mode",calculate:e=>{if(0===e.length)return null;const t=new Map;e.forEach(e=>t.set(e,(t.get(e)||0)+1));let a=0,n=null;return t.forEach((e,t)=>{e>a&&(a=e,n=t)}),{value:n,count:a,total:e.length}},format:e=>e?`${e.value} (${e.count}/${e.total})`:"-",needsNumeric:!1},variance:{label:"Variance",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);if(t.length<=1)return null;const a=t.reduce((e,t)=>e+t,0)/t.length;return t.reduce((e,t)=>e+Math.pow(t-a,2),0)/(t.length-1)},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},std_dev:{label:"Std Dev",calculate:e=>{const t=fn.variance.calculate(e);return null!==t?Math.sqrt(t):null},format:e=>e?.toFixed(3)||"-",needsNumeric:!0},min:{label:"Min",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.min(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},max:{label:"Max",calculate:e=>{const t=e.map(e=>"number"==typeof e?e:null).filter(e=>null!==e);return t.length>0?Math.max(...t):null},format:e=>e?.toFixed(2)||"-",needsNumeric:!0},success_rate:{label:"Success Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.success).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},refusal_rate:{label:"Refusal Rate",calculate:(e,t)=>{const a=t.filter(e=>e.result?.refused).length;return t.length>0?a/t.length:0},format:e=>`${Math.round(100*e)}%`,needsNumeric:!1,usesApiCalls:!0},avg_time:{label:"Avg Time (ms)",calculate:(e,t)=>{const a=t.filter(e=>e.response?.latencyMs).map(e=>e.response.latencyMs);return a.length>0?a.reduce((e,t)=>e+t,0)/a.length:null},format:e=>e?`${Math.round(e)}ms`:"-",needsNumeric:!1,usesApiCalls:!0}};function vn(e,t){if(!e||null===e.value)return"-";return fn[t].format(e.value)}const gn={"blue-subtle":{name:"Blue (Subtle)",colors:["rgba(59, 130, 246, 0.1)","rgba(59, 130, 246, 0.3)","rgba(59, 130, 246, 0.7)"]},"green-red":{name:"Green-Red",colors:["#dc2626","#fbbf24","#10b981"]},"blue-yellow":{name:"Blue-Yellow",colors:["#1e40af","#3b82f6","#fbbf24"]},"purple-orange":{name:"Purple-Orange",colors:["#7c3aed","#a855f7","#ff9500"]},grayscale:{name:"Grayscale",colors:["#f3f4f6","#9ca3af","#374151"]},viridis:{name:"Viridis",colors:["#440154","#482878","#3e4989","#31688e","#26828e","#1f9e89","#35b779","#6ece58","#b5de2b","#fde725"]},inferno:{name:"Inferno",colors:["#000004","#1b0c41","#4a0c6b","#781c6d","#a52c60","#cf4446","#ed6925","#fb9b06","#f7d13d","#fcffa4"]},magma:{name:"Magma",colors:["#000004","#180f3d","#440f76","#721f81","#9e2f7f","#cd4071","#f1605d","#fd9668","#feca8d","#fcfdbf"]},plasma:{name:"Plasma",colors:["#0d0887","#46039f","#7201a8","#9c179e","#bd3786","#d8576b","#ed7953","#fb9f3a","#fdca26","#f0f921"]}};function hn(e,t){if(0===t.length)return"transparent";if(1===t.length)return t[0];e=Math.max(0,Math.min(1,e));const a=1/(t.length-1),n=Math.floor(e/a),l=e%a/a;return yn(t[Math.min(n,t.length-1)],t[Math.min(n+1,t.length-1)],l)}function yn(e,t,a){if(e.startsWith("rgba")&&t.startsWith("rgba")){const n=e=>{const t=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);return t?{r:parseInt(t[1]),g:parseInt(t[2]),b:parseInt(t[3]),a:t[4]?parseFloat(t[4]):1}:null},l=n(e),r=n(t);if(l&&r){return`rgba(${Math.round(l.r+(r.r-l.r)*a)}, ${Math.round(l.g+(r.g-l.g)*a)}, ${Math.round(l.b+(r.b-l.b)*a)}, ${(l.a+(r.a-l.a)*a).toFixed(2)})`}}if(e.startsWith("rgba")||t.startsWith("rgba"))return a<.5?e:t;const n=e.replace("#",""),l=t.replace("#",""),r=parseInt(n.substr(0,2),16),s=parseInt(n.substr(2,2),16),o=parseInt(n.substr(4,2),16),i=parseInt(l.substr(0,2),16),c=parseInt(l.substr(2,2),16),u=parseInt(l.substr(4,2),16),d=Math.round(r+(i-r)*a),p=Math.round(s+(c-s)*a),m=Math.round(o+(u-o)*a);return`#${d.toString(16).padStart(2,"0")}${p.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}`}function bn(e){let t,a,n;if(e.startsWith("rgba")){const l=e.match(/rgba?\((\d+),\s*(\d+),\s*(\d+),?\s*([\d.]*)\)/);if(!l)return!1;t=parseInt(l[1]),a=parseInt(l[2]),n=parseInt(l[3])}else{const l="#"===e.charAt(0)?e.substring(1,7):e;t=parseInt(l.substring(0,2),16),a=parseInt(l.substring(2,4),16),n=parseInt(l.substring(4,6),16)}const l=[t/255,a/255,n/255].map(e=>e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4));return.2126*l[0]+.7152*l[1]+.0722*l[2]<=.179}function _n(e){return bn(e)?"#FFFFFF":"#000000"}function wn(e,t,a){const{colorScales:n,interpolateColor:l,getContrastColor:s}={colorScales:gn,interpolateColor:hn,interpolateBetweenColors:yn,colorIsDarkAdvanced:bn,getContrastColor:_n};function o(e){if("number"==typeof e)return e;if("string"==typeof e){const t=parseFloat(e);return isNaN(t)?null:t}return null}return{getCellStyle:function(r,i,c){if(!r||null===r.value||"number"!=typeof r.value)return{};const u=n[t.value];if(!u)return{};const d=function(t,n,l){const r=o(t.value);if(null===r)return.5;if("global"===a.value){const t=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>o(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(r-e)/(a-e)}}else if("column"===a.value){const t=e.value.rows.map(e=>e.cells[l]).filter(e=>null!==e).map(e=>o(e.value)).filter(e=>null!==e);if(t.length>0){const e=Math.min(...t),a=Math.max(...t);if(a!==e)return(r-e)/(a-e)}}else if("row"===a.value){const t=e.value.rows.find(e=>e.label===n);if(t){const e=t.cells.filter(e=>null!==e).map(e=>o(e.value)).filter(e=>null!==e);if(e.length>0){const t=Math.min(...e),a=Math.max(...e);if(a!==t)return(r-t)/(a-t)}}}return.5}(r,i,c),p=l(d,u.colors);return{backgroundColor:`${p} !important`,color:`${s(p)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},getSummaryStyle:function(a){if(!a||null===a.value||"number"!=typeof a.value)return{};const r=n[t.value];if(!r)return{};let i=.5;const c=e.value.rows.flatMap(e=>e.cells).filter(e=>null!==e).map(e=>o(e.value)).filter(e=>null!==e);if(c.length>0){const e=Math.min(...c),t=Math.max(...c),n=o(a.value);null!==n&&(i=t!==e?(n-e)/(t-e):.5)}const u=l(i,r.colors);return{backgroundColor:`${u} !important`,color:`${s(u)} !important`,fontSize:"15px !important",fontWeight:"600 !important"}},styleKey:r(()=>`${t.value}-${a.value}`)}}const kn={class:"pivot-config"},xn={class:"config-row"},Cn={class:"config-group"},Sn=["value","aria-label"],On={label:"Categorical"},In=["value"],Tn={class:"config-group"},En=["value","aria-label"],Pn={label:"Categorical"},An=["value"],Mn={class:"config-group"},Rn=["value","aria-label"],Nn={label:"Extracted Values"},$n=["value"],Fn={label:"Numeric Fields"},jn=["value"],Dn={class:"config-group"},Ln=["value","aria-label"],Un=Q(i({__name:"PivotConfiguration",props:{config:{},availableFields:{}},emits:["update-config"],setup(e,{emit:t}){const a=t;function n(e,t){a("update-config",e,t)}function l(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}return(e,t)=>(w(),p("div",kn,[m("div",xn,[m("div",Cn,[t[4]||(t[4]=m("label",{for:"pivot-row-field"},"Rows (Group by):",-1)),m("select",{id:"pivot-row-field",value:e.config.rowField,"aria-label":"Group rows by "+l(e.config.rowField),onChange:t[0]||(t[0]=e=>n("rowField",e.target.value))},[m("optgroup",On,[(w(!0),p(b,null,_(e.availableFields.categorical,e=>(w(),p("option",{key:e,value:e},C(l(e)),9,In))),128))])],40,Sn)]),m("div",Tn,[t[5]||(t[5]=m("label",{for:"pivot-column-field"},"Columns (Group by):",-1)),m("select",{id:"pivot-column-field",value:e.config.columnField,"aria-label":"Group columns by "+l(e.config.columnField),onChange:t[1]||(t[1]=e=>n("columnField",e.target.value))},[m("optgroup",Pn,[(w(!0),p(b,null,_(e.availableFields.categorical,e=>(w(),p("option",{key:e,value:e},C(l(e)),9,An))),128))])],40,En)]),m("div",Mn,[t[6]||(t[6]=m("label",{for:"pivot-value-field"},"Values (Aggregate):",-1)),m("select",{id:"pivot-value-field",value:e.config.valueField,"aria-label":"Aggregate "+e.config.valueField+" values",onChange:t[2]||(t[2]=e=>n("valueField",e.target.value))},[m("optgroup",Nn,[(w(!0),p(b,null,_(e.availableFields.extracted,e=>(w(),p("option",{key:e,value:e},C(e),9,$n))),128))]),m("optgroup",Fn,[(w(!0),p(b,null,_(e.availableFields.numeric,e=>(w(),p("option",{key:e,value:e},C(l(e)),9,jn))),128))])],40,Rn)]),m("div",Dn,[t[8]||(t[8]=m("label",{for:"pivot-aggregation"},"Aggregation:",-1)),m("select",{id:"pivot-aggregation",value:e.config.aggregation,"aria-label":"Aggregation method: "+e.config.aggregation,onChange:t[3]||(t[3]=e=>n("aggregation",e.target.value))},t[7]||(t[7]=[F('<optgroup label="Statistical" data-v-efb8a7c2><option value="mean" data-v-efb8a7c2>Mean</option><option value="median" data-v-efb8a7c2>Median</option><option value="variance" data-v-efb8a7c2>Variance</option><option value="std_dev" data-v-efb8a7c2>Std Dev</option><option value="min" data-v-efb8a7c2>Min</option><option value="max" data-v-efb8a7c2>Max</option></optgroup><optgroup label="Frequency" data-v-efb8a7c2><option value="count" data-v-efb8a7c2>Count</option><option value="mode" data-v-efb8a7c2>Mode</option></optgroup><optgroup label="Performance" data-v-efb8a7c2><option value="success_rate" data-v-efb8a7c2>Success Rate</option><option value="refusal_rate" data-v-efb8a7c2>Refusal Rate</option><option value="avg_time" data-v-efb8a7c2>Avg Time</option></optgroup>',3)]),40,Ln)])])]))}}),[["__scopeId","data-v-efb8a7c2"]]),zn={class:"heatmap-controls"},qn={class:"color-scale-selector"},Vn=["value","aria-label"],Bn={class:"gradient-mode-selector"},Hn={class:"gradient-toggle",role:"group","aria-label":"Gradient mode selector"},Kn=["aria-pressed"],Gn=["aria-pressed"],Wn=["aria-pressed"],Jn=["title","aria-label"],Yn=Q(i({__name:"PivotHeatmapControls",props:{selectedColorScale:{},gradientMode:{},isFullscreen:{type:Boolean}},emits:["update-color-scale","update-gradient-mode","toggle-fullscreen"],setup(e,{emit:t}){const a=t;function n(e){const t=e.target.value;a("update-color-scale",t)}function l(e){a("update-gradient-mode",e)}return(e,t)=>(w(),p("div",zn,[m("div",qn,[t[5]||(t[5]=m("label",{for:"heatmap-color-scale"},"Color Scale:",-1)),m("select",{id:"heatmap-color-scale",value:e.selectedColorScale,"aria-label":"Color scale: "+e.selectedColorScale,onChange:n},t[4]||(t[4]=[F('<option value="blue-subtle" data-v-4b4f9d62>Blue (Subtle)</option><option value="green-red" data-v-4b4f9d62>Green-Red (Success)</option><option value="blue-yellow" data-v-4b4f9d62>Blue-Yellow (Performance)</option><option value="purple-orange" data-v-4b4f9d62>Purple-Orange (General)</option><option value="viridis" data-v-4b4f9d62>Viridis</option><option value="inferno" data-v-4b4f9d62>Inferno</option><option value="magma" data-v-4b4f9d62>Magma</option><option value="plasma" data-v-4b4f9d62>Plasma</option><option value="grayscale" data-v-4b4f9d62>Grayscale</option>',9)]),40,Vn)]),m("div",Bn,[t[6]||(t[6]=m("label",null,"Gradient Mode:",-1)),m("div",Hn,[m("button",{type:"button",class:x(["toggle-btn",{active:"global"===e.gradientMode}]),"aria-pressed":"global"===e.gradientMode,onClick:t[0]||(t[0]=e=>l("global"))}," Global ",10,Kn),m("button",{type:"button",class:x(["toggle-btn",{active:"column"===e.gradientMode}]),"aria-pressed":"column"===e.gradientMode,onClick:t[1]||(t[1]=e=>l("column"))}," Per Column ",10,Gn),m("button",{type:"button",class:x(["toggle-btn",{active:"row"===e.gradientMode}]),"aria-pressed":"row"===e.gradientMode,onClick:t[2]||(t[2]=e=>l("row"))}," Per Row ",10,Wn)])]),m("button",{type:"button",class:"fullscreen-btn",title:e.isFullscreen?"Exit Fullscreen":"Enter Fullscreen","aria-label":e.isFullscreen?"Exit fullscreen mode":"Enter fullscreen mode",onClick:t[3]||(t[3]=t=>e.$emit("toggle-fullscreen"))},C(e.isFullscreen?"⊟":"⊞"),9,Jn)]))}}),[["__scopeId","data-v-4b4f9d62"]]),Xn={class:"filters-row"},Zn={key:0,class:"filter-group"},Qn=["value"],el=["for"],tl=["id","onUpdate:modelValue","aria-label"],al={value:""},nl=["value"],ll={key:1,class:"filter-group"},rl=["value"],sl={class:"table-view"},ol={key:0,class:"empty-state","data-testid":"empty-data-message"},il={key:1,class:"error-state","data-testid":"invalid-aggregation-error"},cl={key:2,class:"pivot-table-container"},ul={class:"pivot-table-grid responsive-table",role:"table"},dl={role:"row"},pl={class:"corner-cell",role:"columnheader"},ml={key:0,class:"total-header",role:"columnheader"},fl={class:"row-header",role:"rowheader"},vl=["data-testid","title","aria-label","role","onClick","onKeydown"],gl={key:0,class:"cell-content"},hl=["title"],yl={class:"cell-value"},bl={class:"error-message"},_l={key:1},wl=Q(i({__name:"PivotTableCore",props:{apiCalls:{},trial:{default:null},config:{},maxTableRows:{default:1e4},showTotals:{type:Boolean,default:!0}},emits:["config-change","cell-click"],setup(e,{emit:t}){const n=e,s=t,o=l(!1),i=l("viridis"),u=l("global"),v=l({rowField:n.config?.rowField||"",columnField:n.config?.columnField||"",valueField:n.config?.valueField||"",aggregation:n.config?.aggregation||"mean"});c(()=>n.config,e=>{e&&Object.assign(v.value,e)},{deep:!0});const h=l({}),y=l([]),k=r(()=>Object.values(h.value).some(e=>""!==e)),S=R(pn(n.apiCalls,n.trial));let O=0;c(()=>n.apiCalls,e=>{if(0===e.length||0===O||e.length-O>=10){const t=y.value.length>0||k.value?y.value:e;S.value=pn(t,n.trial),O=e.length}},{immediate:!0});const T=R({});let E=0;c(()=>n.apiCalls.length,e=>{(0===e||0===E||e-E>=5)&&((()=>{if(0===n.apiCalls.length)return void(T.value={});const e={};n.apiCalls.forEach(t=>{if(n.trial&&t.configurationIndex<n.trial.configurationSnapshots.length){const a=n.trial.configurationSnapshots[t.configurationIndex].modelId||"Unknown";e.model||(e.model=new Set),e.model.add(a)}t.status&&(e.status||(e.status=new Set),e.status.add(t.status)),t.variables&&Object.entries(t.variables).forEach(([t,a])=>{a&&String(a).trim()&&(e[t]||(e[t]=new Set),e[t].add(String(a)))})});const t={};Object.entries(e).forEach(([e,a])=>{t[e]=Array.from(a).sort()}),T.value=t})(),E=e)},{immediate:!0});const P=r(()=>{const{model:e,status:t,...a}=T.value;return a});function M(){y.value=n.apiCalls.filter(e=>{if(h.value.model&&""!==h.value.model){if(!n.trial||e.configurationIndex>=n.trial.configurationSnapshots.length)return!1;if((n.trial.configurationSnapshots[e.configurationIndex].modelId||"Unknown")!==h.value.model)return!1}if(h.value.status&&""!==h.value.status&&e.status!==h.value.status)return!1;for(const[t,a]of Object.entries(h.value))if(a&&""!==a&&"model"!==t&&"status"!==t){const n=e.variables?.[t];if(n!==a)return!1}return!0})}function N(){h.value={},M()}c(()=>n.apiCalls,()=>{k.value?M():y.value=n.apiCalls},{immediate:!0});const $=r(()=>{const e=y.value.length>0||k.value?y.value:n.apiCalls;return 0===e.length?{rows:[],columns:[],totals:[],grandTotal:{value:0,count:0,apiCalls:[],rawValues:[]}}:function(e,t,a){const n=new Map,l=new Set,r=new Set;e.forEach(e=>{const s=String(mn(e,t.rowField,a)||"Unknown"),o=String(mn(e,t.columnField,a)||"Unknown");l.add(s),r.add(o),n.has(s)||n.set(s,new Map),n.get(s).has(o)||n.get(s).set(o,[]),n.get(s).get(o).push(e)});const s=e=>e.every(e=>!isNaN(Number(e))&&""!==e.trim())?e.sort((e,t)=>Number(e)-Number(t)):e.sort(),o=s(Array.from(l)),i=s(Array.from(r)),c=fn[t.aggregation];function u(e){const n=e.map(e=>mn(e,t.valueField,a));if(!c||"function"!=typeof c.calculate)return W.error("Invalid aggregation function:",t.aggregation,c),{value:null,count:e.length,apiCalls:e,rawValues:n,error:"Invalid aggregation function"};const l={nonNumeric:0,nullUndefined:0};return c.needsNumeric&&(l.nonNumeric=n.filter(e=>"number"!=typeof e).length),l.nullUndefined=n.filter(e=>null==e).length,{value:c.usesApiCalls?c.calculate(n,e):c.calculate(n),count:e.length,apiCalls:e,rawValues:n,excludedCounts:l}}const d=o.map(e=>{const t=[],a=[];return i.forEach(l=>{const r=n.get(e)?.get(l)||[];t.push(r.length>0?u(r):null),a.push(...r)}),{label:e,cells:t,total:u(a)}}),p=i.map(e=>{const t=[];return o.forEach(a=>{const l=n.get(a)?.get(e)||[];t.push(...l)}),u(t)});return{rows:d,columns:i,totals:p,grandTotal:u(e)}}(e,v.value,n.trial)}),F=r(()=>$.value.rows),{getCellStyle:z,getSummaryStyle:q,styleKey:V}=wn($,i,u);function B(e){return{model:"Model",status:"Status",response_time:"Response Time (ms)",total_tokens:"Total Tokens",prompt_tokens:"Prompt Tokens",completion_tokens:"Completion Tokens",error_type:"Error Type",success:"Success",refused:"Refused",extracted_value:"Extracted Value"}[e]||e.replace(/_/g," ").replace(/\b\w/g,e=>e.toUpperCase())}function H(e,t,a){if(!a)return`${e} × ${t}: No data`;let n=`${e} × ${t}: ${vn(a,v.value.aggregation)} (${a.count} calls)`;if(a.excludedCounts){const e=[];a.excludedCounts.nonNumeric>0&&e.push(`${a.excludedCounts.nonNumeric} non-numeric responses excluded`),a.excludedCounts.nullUndefined>0&&e.push(`${a.excludedCounts.nullUndefined} null/empty responses`),e.length>0&&(n+=` | ${e.join(", ")}`)}return a.error&&(n+=` - ERROR: ${a.error}`),n}function K(e,t,a){if(!a)return`${e} by ${t}: No data`;const n=vn(a,v.value.aggregation);return a.error?`${e} by ${t}: ${n} with data integrity error: ${a.error}`:`${e} by ${t}: ${n} from ${a.count} API calls`}function G(e,t){"rowField"!==e&&"columnField"!==e&&"valueField"!==e&&"aggregation"!==e||(v.value[e]=t),s("config-change",{...v.value})}function J(e,t,a){a&&s("cell-click",{row:e,column:t,cell:a})}function Y(){o.value=!o.value,o.value?document.body.style.overflow="hidden":document.body.style.overflow=""}return d(()=>{o.value&&(document.body.style.overflow="")}),c([S,()=>n.apiCalls.length],([e])=>{if(n.apiCalls.length>0&&(!v.value.rowField||""===v.value.rowField)&&e.categorical.length>0){if(v.value.rowField=e.categorical.find(e=>"model"!==e&&"status"!==e&&"error_type"!==e)||e.categorical[0]||"model",v.value.columnField=v.value.columnField||"model",v.value.valueField=v.value.valueField||"extracted_value",!v.value.aggregation||""===v.value.aggregation){const e=n.apiCalls.slice(0,3).map(e=>mn(e,v.value.valueField,n.trial)).filter(e=>null!=e),t=e.length>0&&e.every(e=>"number"==typeof e);v.value.aggregation=t?"mean":"mode"}s("config-change",{...v.value})}},{immediate:!0}),(e,t)=>(w(),p("div",{class:x(["pivot-table-core",{fullscreen:o.value}])},[j([S.value,v.value],()=>(w(),p("div",null,[a(Un,{config:v.value,"available-fields":S.value,onUpdateConfig:G},null,8,["config","available-fields"])])),t,0),a(Yn,{"selected-color-scale":i.value,"gradient-mode":u.value,"is-fullscreen":o.value,onUpdateColorScale:t[1]||(t[1]=e=>i.value=e),onUpdateGradientMode:t[2]||(t[2]=e=>u.value=e),onToggleFullscreen:Y},null,8,["selected-color-scale","gradient-mode","is-fullscreen"]),Object.keys(T.value).length>0?j([T.value,h.value],()=>(w(),p("div",{key:0,class:"data-filters"},[m("div",Xn,[T.value.model&&T.value.model.length>1?(w(),p("div",Zn,[t[7]||(t[7]=m("label",{for:"filter-model",class:"filter-label"},"Model:",-1)),L(m("select",{id:"filter-model","onUpdate:modelValue":t[3]||(t[3]=e=>h.value.model=e),class:"filter-select","aria-label":"Filter by model",onChange:M},[t[6]||(t[6]=m("option",{value:""},"All Models",-1)),(w(!0),p(b,null,_(T.value.model,e=>(w(),p("option",{key:e,value:e},C(e),9,Qn))),128))],544),[[U,h.value.model]])])):f("",!0),(w(!0),p(b,null,_(P.value,(e,t)=>(w(),p("div",{key:t,class:"filter-group"},[m("label",{for:`filter-${t}`,class:"filter-label"},C(B(String(t)))+": ",9,el),L(m("select",{id:`filter-${t}`,"onUpdate:modelValue":e=>h.value[t]=e,class:"filter-select","aria-label":`Filter by ${B(String(t))}`,onChange:M},[m("option",al,"All "+C(B(String(t))),1),(w(!0),p(b,null,_(e,e=>(w(),p("option",{key:e,value:e},C(e),9,nl))),128))],40,tl),[[U,h.value[t]]])]))),128)),T.value.status&&T.value.status.length>1?(w(),p("div",ll,[t[9]||(t[9]=m("label",{for:"filter-status",class:"filter-label"},"Status:",-1)),L(m("select",{id:"filter-status","onUpdate:modelValue":t[4]||(t[4]=e=>h.value.status=e),class:"filter-select","aria-label":"Filter by status",onChange:M},[t[8]||(t[8]=m("option",{value:""},"All Statuses",-1)),(w(!0),p(b,null,_(T.value.status,e=>(w(),p("option",{key:e,value:e},C(e),9,rl))),128))],544),[[U,h.value.status]])])):f("",!0),k.value?(w(),p("button",{key:2,type:"button",class:"clear-filters-btn",title:"Clear all filters","aria-label":"Clear all filters",onClick:N}," Clear Filters ")):f("",!0)])])),t,5):f("",!0),m("div",sl,[0===n.apiCalls.length?(w(),p("div",ol,t[10]||(t[10]=[m("p",null,"No data available for pivot table analysis.",-1)]))):v.value.aggregation in g(fn)?(w(),p("div",cl,[m("table",ul,[m("thead",null,[m("tr",dl,[m("th",pl,C(B(v.value.rowField)||"Items")+" / "+C(B(v.value.columnField)||"Aggregated"),1),(w(!0),p(b,null,_($.value.columns,e=>(w(),p("th",{key:e,class:"column-header",role:"columnheader"},C(e),1))),128)),v.value.columnField&&e.showTotals?(w(),p("th",ml," Total ")):f("",!0)])]),m("tbody",null,[(w(!0),p(b,null,_(F.value,t=>(w(),p("tr",{key:`${t.label}-${g(V)}`,class:"data-row",role:"row"},[m("td",fl,C(t.label),1),(w(!0),p(b,null,_(t.cells,(e,a)=>(w(),p("td",{key:`${a}-${g(V)}`,class:x(["data-cell",{"error-cell":e?.error}]),"data-testid":e?.error?"pivot-cell-error":"pivot-cell",style:I(g(z)(e,t.label,a)),title:H(t.label,$.value.columns[a],e),"aria-label":K(t.label,$.value.columns[a],e),role:e?.error?"alert":"cell",tabindex:"0",onClick:n=>J(t.label,$.value.columns[a],e),onKeydown:[D(n=>J(t.label,$.value.columns[a],e),["enter"]),D(A(n=>J(t.label,$.value.columns[a],e),["prevent"]),["space"])]},[e?.error?(w(),p("div",gl,[m("span",{class:"error-indicator",title:e.error},"⚠️",8,hl),m("span",yl,C(e?g(vn)(e,v.value.aggregation):"-"),1),m("div",bl,C(e.error),1)])):(w(),p("span",_l,C(e?g(vn)(e,v.value.aggregation):"-"),1))],46,vl))),128)),v.value.columnField&&e.showTotals?(w(),p("td",{key:0,class:"total-cell",style:I(g(q)(t.total)),role:"cell"},C(g(vn)(t.total,v.value.aggregation)),5)):f("",!0)]))),128)),v.value.rowField&&e.showTotals?(w(),p("tr",{key:`totals-${g(V)}`,class:"total-row",role:"row"},[t[12]||(t[12]=m("td",{class:"row-header",role:"rowheader"},"Total",-1)),(w(!0),p(b,null,_($.value.totals,(e,t)=>(w(),p("td",{key:`total-${t}-${g(V)}`,class:"total-cell",style:I(g(q)(e)),role:"cell"},C(g(vn)(e,v.value.aggregation)),5))),128)),v.value.columnField?(w(),p("td",{key:0,class:"grand-total-cell",style:I(g(q)($.value.grandTotal)),role:"cell"},C(g(vn)($.value.grandTotal,v.value.aggregation)),5)):f("",!0)])):f("",!0)])])])):(w(),p("div",il,[m("p",null,"Invalid aggregation function: "+C(v.value.aggregation),1),t[11]||(t[11]=m("p",null,"Please select a valid aggregation method.",-1))]))])],2))}}),[["__scopeId","data-v-6da58b58"]]),kl={class:"trial-analysis"},xl={class:"analysis-section"},Cl={class:"analysis-section"},Sl={class:"pivot-container"},Ol={key:1,class:"empty-state"},Il=Q(i({__name:"TrialAnalysisView",props:{trial:{},apiCalls:{},loading:{type:Boolean,default:!1},embedded:{type:Boolean,default:!1}},emits:["back-to-selection","export-trial"],setup(e){const t=e,n=R([]),s=l(!0);let o=null;const i=r(()=>t.embedded&&!t.apiCalls?n.value:t.apiCalls||[]),f=r(()=>t.loading??s.value);u(()=>{t.embedded&&!t.apiCalls&&t.trial?.id?o=Se(()=>re.apiCalls.where("trialId").equals(t.trial.id).toArray()).subscribe({next:e=>{n.value=e,s.value=!1},error:e=>{console.error("[TrialAnalysisView] Error loading API calls:",e),s.value=!1}}):s.value=!1}),c(()=>t.trial?.id,(e,a)=>{e!==a&&t.embedded&&!t.apiCalls&&e&&(o&&o.unsubscribe(),s.value=!0,o=Se(()=>re.apiCalls.where("trialId").equals(e).toArray()).subscribe({next:e=>{n.value=e,s.value=!1},error:e=>{console.error("[TrialAnalysisView] Error loading API calls:",e),s.value=!1}}))}),d(()=>{o&&o.unsubscribe()});const g=l({rowField:"",columnField:"model",valueField:"success",aggregation:"mean"}),h=e=>{g.value=e},y=e=>{if(!e.cell)return;const t=e.cell.apiCalls||[];0!==t.length&&se.info({title:`${e.row} × ${e.column}`,width:"80%",class:"pivot-cell-details-modal",content:()=>z("div",{class:"pivot-cell-details"},[z("div",{class:"cell-summary"},[z("span",{class:"count"},`${t.length} calls`),z("span",{class:"separator"},"•"),z("span",{class:"aggregate"},`${"average"===g.value.aggregation?"Avg":"Total"}: ${e.cell.value.toFixed(2)}`)]),z("div",{class:"calls-list"},t.map((e,t)=>z("div",{key:e.id,class:"call-row"},[z("span",{class:"call-index"},`${t+1}.`),z("span",{class:"model"},e.model),z("span",{class:`status ${e.status}`},e.status),e.variables&&Object.entries(e.variables).length>0&&z("span",{class:"variables"},Object.entries(e.variables).map(([e,t])=>`${e}: ${t}`).join(", ")),e.extracted&&z("span",{class:"extracted"},`→ ${e.extracted}`),z("span",{class:"metrics"},[e.cost&&`$${e.cost.toFixed(3)}`,e.cost&&e.duration&&" • ",e.duration&&`${e.duration}ms`].filter(Boolean).join(""))])))])})};return(e,t)=>(w(),p("div",kl,[m("div",xl,[t[0]||(t[0]=m("h3",{class:"section-title"},"Results Table",-1)),a(dn,{trial:e.trial,"api-calls":i.value,loading:f.value},null,8,["trial","api-calls","loading"])]),m("div",Cl,[t[2]||(t[2]=m("h3",{class:"section-title"},"Pivot Analysis",-1)),m("div",Sl,[i.value.length>0?(w(),v(wl,{key:0,"api-calls":i.value,trial:e.trial,config:g.value,"show-totals":!0,onConfigChange:h,onCellClick:y},null,8,["api-calls","trial","config"])):(w(),p("div",Ol,t[1]||(t[1]=[m("p",null,"No data available for pivot table analysis.",-1)])))])])]))}}),[["__scopeId","data-v-2f1eb202"]]);const Tl={class:"stats-grid"},El={class:"stat-item"},Pl={class:"stat-value"},Al={class:"stat-item"},Ml={class:"stat-value"},Rl={class:"stat-item"},Nl={class:"stat-value"},$l={class:"stat-item"},Fl={class:"stat-value"},jl={class:"detail-sections"},Dl={class:"detail-row"},Ll={class:"detail-value"},Ul={class:"detail-value"},zl={class:"detail-value"},ql={key:0,class:"detail-row"},Vl={key:0,class:"separator"},Bl={key:1,class:"detail-row"},Hl={class:"detail-value error"},Kl={key:2,class:"detail-row"},Gl={key:0,class:"separator"},Wl={key:3,class:"detail-row"},Jl={key:4,class:"detail-row"},Yl={class:"detail-label"},Xl={class:"detail-value",style:{color:"#faad14"}},Zl={key:5,class:"detail-section"},Ql={class:"template-preview"},er={key:0,class:"action-buttons"},tr=Q(i({__name:"TrialDetailView",props:{trial:{},compact:{type:Boolean}},setup(e){const t=e,n=s(),o=G(),i=l(!1),c=q(t,"trial").value.id,{isLockedByOtherTab:u,lockInfo:d,checkLock:S}=function(e){const t=G(),a=l(null),n=r(()=>!!a.value),s=r(()=>a.value?.tabId===oe()),o=r(()=>a.value&&a.value.tabId!==oe()),i=r(()=>{if(!a.value)return null;const e=Date.now()-a.value.acquiredAt.getTime(),t=Math.floor(e/6e4),n=Math.floor(e%6e4/1e3);let l="";return l=t>0?`${t} minute${1!==t?"s":""} ago`:`${n} second${1!==n?"s":""} ago`,{tabId:a.value.tabId,hostname:a.value.hostname||"unknown",timeAgo:l,isCurrentTab:s.value,expiresIn:Math.max(0,a.value.expiresAt.getTime()-Date.now())}});async function c(){if(e.value)try{a.value=await t.getExecutionLock(e.value)}catch(n){console.error("Failed to check execution lock:",n),a.value=null}else a.value=null}N(()=>{c()});let u=null;return N(t=>{e.value&&(u=window.setInterval(c,5e3),t(()=>{u&&window.clearInterval(u)}))}),{lock:r(()=>a.value),isLocked:n,isLockedByCurrentTab:s,isLockedByOtherTab:o,lockInfo:i,checkLock:c}}(r(()=>c));function O(e,t){const a=t.getTime()-e.getTime(),n=Math.floor(a/36e5),l=Math.floor(a%36e5/6e4);return n>0?`${n}h ${l}m`:`${l}m`}async function I(){if(i.value)W.warn("Trial start already in progress",{trialId:t.trial.id});else{i.value=!0;try{if(await S(),u.value)return void se.warning({title:"Trial Already Running",content:`This trial is already being executed in another tab (started ${d.value?.timeAgo}). You can view the progress there or wait for it to complete.`});await o.executeTrial(t.trial.id),W.info("Trial started",{trialId:t.trial.id})}catch(e){W.error("Failed to start trial",e),se.error({title:"Failed to start trial",content:e instanceof Error?e.message:"Unknown error"})}finally{i.value=!1}}}function T(){n.push({name:"trials",query:{tab:"create",duplicate:t.trial.id,edit:"true"}})}return(e,n)=>{const l=h("a-tooltip"),r=h("a-button");return w(),p("div",{class:x(["trial-detail-view",{compact:e.compact}])},[m("div",Tl,[m("div",El,[a(g(ie),{class:"stat-icon-inline"}),n[0]||(n[0]=m("span",{class:"stat-label"},"Duration:",-1)),m("span",Pl,C(O(e.trial.created,e.trial.completed||new Date)),1)]),m("div",Al,[a(g($e),{class:"stat-icon-inline"}),n[1]||(n[1]=m("span",{class:"stat-label"},"Cost:",-1)),m("span",Ml,"$"+C((e.trial.estimatedCost||0).toFixed(2)),1)]),m("div",Rl,[a(g(rt),{class:"stat-icon-inline"}),n[2]||(n[2]=m("span",{class:"stat-label"},"Models:",-1)),m("span",Nl,C(e.trial.configurationSnapshots?.length||0),1)]),m("div",$l,[a(g(ce),{class:"stat-icon-inline"}),n[3]||(n[3]=m("span",{class:"stat-label"},"Design:",-1)),m("span",Fl,C(e.trial.designSnapshot?.originalName||"Unknown"),1)])]),m("div",jl,[m("div",Dl,[n[4]||(n[4]=m("span",{class:"detail-label"},"Created:",-1)),m("span",Ll,C(new Date(e.trial.created).toLocaleString()),1),n[5]||(n[5]=m("span",{class:"detail-label"},"Repeats:",-1)),m("span",Ul,C(e.trial.repeatConfig?.callsPerPrompt||1)+"x",1),n[6]||(n[6]=m("span",{class:"detail-label"},"Variables:",-1)),m("span",zl,C((t.trial.variableSnapshots&&t.trial.variableSnapshots.length>0?t.trial.variableSnapshots[0].originalListName:null)||"None"),1)]),e.trial.configurationSnapshots?.length>0?(w(),p("div",ql,[n[7]||(n[7]=m("span",{class:"detail-label"},"Models:",-1)),(w(!0),p(b,null,_(e.trial.configurationSnapshots,(t,n)=>(w(),p("span",{key:n,class:"model-inline"},[a(g(rt)),k(" "+C(t.name)+" ("+C(t.provider)+", temp: "+C(t.parameters?.temperature||.7)+") ",1),n<e.trial.configurationSnapshots.length-1?(w(),p("span",Vl,"•")):f("",!0)]))),128))])):f("",!0),e.trial.progress.networkErrors>0?(w(),p("div",Bl,[n[8]||(n[8]=m("span",{class:"detail-label"},"Issues:",-1)),m("span",Hl,C(e.trial.progress.networkErrors)+" network errors occurred",1)])):f("",!0),e.trial.variableSnapshots&&e.trial.variableSnapshots.length>0?(w(),p("div",Kl,[n[9]||(n[9]=m("span",{class:"detail-label"},"Variables Used:",-1)),(w(!0),p(b,null,_(e.trial.variableSnapshots,(t,a)=>(w(),p("span",{key:t.variableName,class:"detail-value"},[m("strong",null,C(t.variableName),1),k(" from "+C(t.originalListName)+" ("+C(t.data.itemCount)+" values) ",1),a<e.trial.variableSnapshots.length-1?(w(),p("span",Gl,"•")):f("",!0)]))),128))])):f("",!0),"failed"===e.trial.status?(w(),p("div",Wl,n[10]||(n[10]=[m("span",{class:"detail-label"},"Status:",-1),m("span",{class:"detail-value error"},"Trial failed - check task details for more information",-1)]))):f("",!0),g(u)&&g(d)?(w(),p("div",Jl,[m("span",Yl,[a(l,{title:"This trial is being executed in another tab"},{default:y(()=>[a(g(Xe),{style:{color:"#faad14"}})]),_:1}),n[11]||(n[11]=k(" Locked: "))]),m("span",Xl," Running in another tab (started "+C(g(d).timeAgo)+") ",1)])):f("",!0),e.trial.designSnapshot?.promptTemplate?(w(),p("div",Zl,[m("h4",null,[a(g(ce)),n[12]||(n[12]=k(" Prompt Template"))]),m("div",Ql,[m("pre",null,C(e.trial.designSnapshot.promptTemplate),1)])])):f("",!0)]),"draft"===e.trial.status?(w(),p("div",er,[g(u)?(w(),v(l,{key:0,title:`This trial is running in another tab (started ${g(d)?.timeAgo})`},{default:y(()=>[a(r,{type:"primary",onClick:I,disabled:!0},{icon:y(()=>[a(g(Xe))]),default:y(()=>[n[13]||(n[13]=k(" Running in Another Tab "))]),_:1,__:[13]})]),_:1},8,["title"])):i.value?(w(),v(r,{key:1,type:"primary",disabled:!0},{icon:y(()=>[a(g(ne),{spin:""})]),default:y(()=>[n[14]||(n[14]=k(" Starting... "))]),_:1,__:[14]})):(w(),v(r,{key:2,type:"primary",onClick:I,disabled:i.value},{icon:y(()=>[a(g(ue))]),default:y(()=>[n[15]||(n[15]=k(" Start Trial "))]),_:1,__:[15]},8,["disabled"])),a(r,{onClick:T},{icon:y(()=>[a(g(de))]),default:y(()=>[n[16]||(n[16]=k(" Edit Configuration "))]),_:1,__:[16]})])):f("",!0)],2)}}}),[["__scopeId","data-v-daf04874"]]),ar={class:"modal-content"},nr={class:"modal-header"},lr={class:"modal-body"},rr={class:"section"},sr={class:"format-options"},or=["data-testid","aria-label"],ir=["value","data-testid","aria-label"],cr={class:"format-label"},ur={class:"format-name"},dr={class:"section"},pr={class:"field-groups"},mr=["data-testid"],fr={class:"field-list"},vr=["data-testid","aria-label"],gr=["value","data-testid","aria-label"],hr={class:"field-label"},yr={class:"field-name"},br={class:"field-desc"},_r={class:"section"},wr={class:"preview-info"},kr={class:"preview-count"},xr={class:"preview-fields"},Cr={class:"preview-size"},Sr={class:"modal-footer"},Or=Q(i({__name:"ExportDataModal",props:{trial:{},apiCalls:{}},emits:["close"],setup(e){const t=e,n=[{id:"csv",name:"CSV",description:"Comma-separated values (Excel compatible)"},{id:"tsv",name:"TSV",description:"Tab-separated values"},{id:"excel",name:"Excel",description:"Microsoft Excel (.xlsx)"},{id:"json",name:"JSON",description:"JavaScript Object Notation"},{id:"jsonl",name:"JSONL",description:"JSON Lines (one object per line)"}],s=[{name:"Basic Info",fields:[{id:"id",name:"ID",description:"API call identifier",default:!0},{id:"trial_id",name:"Trial ID",description:"Parent trial identifier",default:!0},{id:"trial_name",name:"Trial Name",description:"Human-readable trial name",default:!0},{id:"status",name:"Status",description:"Call status (completed, failed, etc.)",default:!0},{id:"created",name:"Created",description:"When the call was initiated",default:!0},{id:"completed",name:"Completed",description:"When the call finished",default:!0}]},{name:"Configuration",fields:[{id:"configuration_index",name:"Config Index",description:"Configuration array index",default:!1},{id:"configuration_name",name:"Config Name",description:"Human-readable config name",default:!1},{id:"provider",name:"Provider",description:"LLM service provider",default:!0},{id:"model",name:"Model",description:"Model identifier",default:!0},{id:"parameters",name:"Parameters",description:"Model parameters as separate columns (temperature, max_tokens, etc.)",default:!1}]},{name:"Content",fields:[{id:"prompt",name:"Prompt",description:"Input prompt text",default:!0},{id:"variables",name:"Variables",description:"Variable substitutions (flattened as separate columns)",default:!0},{id:"result_content",name:"Result Content",description:"LLM response content",default:!0},{id:"result_error",name:"Result Error",description:"Error message if failed",default:!0}]},{name:"Performance",fields:[{id:"response_latency_ms",name:"Latency (ms)",description:"Response time",default:!0},{id:"duration_ms",name:"Duration (ms)",description:"Total processing time",default:!1},{id:"result_success",name:"Success",description:"Whether call succeeded",default:!0}]},{name:"Technical Details",fields:[{id:"request_url",name:"Request URL",description:"API endpoint URL",default:!0},{id:"request_method",name:"Request Method",description:"HTTP method",default:!1},{id:"request_headers",name:"Request Headers",description:"HTTP request headers",default:!1},{id:"request_body",name:"Request Body",description:"Full request payload",default:!1},{id:"response_status",name:"Response Status",description:"HTTP status code",default:!0},{id:"response_headers",name:"Response Headers",description:"HTTP response headers",default:!1},{id:"response_body",name:"Response Body",description:"Full response payload",default:!1}]},{name:"Error Handling",fields:[{id:"network_error_count",name:"Network Errors",description:"Number of network failures",default:!1},{id:"retry_count",name:"Retry Count",description:"Number of retry attempts",default:!1}]}],o=l("csv"),i=l([]),c=s.flatMap(e=>e.fields);i.value=c.filter(e=>e.default).map(e=>e.id);const u=r(()=>{const e=50*i.value.length,a=t.apiCalls.length*e;return a<1024?`${a}B`:a<1048576?`${(a/1024).toFixed(1)}KB`:`${(a/1048576).toFixed(1)}MB`});function d(){i.value=c.map(e=>e.id)}function f(){i.value=c.filter(e=>e.default).map(e=>e.id)}function v(){i.value=[]}function g(e,t=""){const a={};for(const[n,l]of Object.entries(e)){const e=t?`${t}.${n}`:n;null===l||"object"!=typeof l||Array.isArray(l)?a[e]=Array.isArray(l)?JSON.stringify(l):l:Object.assign(a,g(l,e))}return a}function x(){const e=new Set,a=[];if("aligned"===t.trial.executionContext?.mode){const n=t.trial.variableSnapshots?.find(e=>"tabular"===e.category);n?.data.tabularData?.columns&&(a.push(...n.data.tabularData.columns),n.data.tabularData.columns.forEach(t=>e.add(t)))}i.value.includes("variables")&&t.apiCalls.forEach(t=>{t.variables&&"object"==typeof t.variables&&Object.keys(t.variables).forEach(t=>{e.has(t)||(e.add(t),a.push(t))})});const n=new Set,l=[];return i.value.includes("parameters")&&t.trial.configurationSnapshots&&t.trial.configurationSnapshots.forEach(e=>{if(e.parameters){const t=g(e.parameters);Object.keys(t).forEach(e=>{n.has(e)||(n.add(e),l.push(e))})}}),t.apiCalls.map((e,n)=>{const r={};var s,o;if("aligned"===t.trial.executionContext?.mode&&(r.Row=n+1),i.value.includes("id")&&(r.ID=e.id),i.value.includes("trial_id")&&(r["Trial ID"]=e.trialId),i.value.includes("trial_name")&&(r["Trial Name"]=t.trial.name),i.value.includes("status")&&(r.Status=e.status),i.value.includes("created")&&(r.Created=e.created?new Date(e.created).toISOString():""),i.value.includes("completed")&&(r.Completed=e.completed?new Date(e.completed).toISOString():""),i.value.includes("configuration_index")&&(r["Configuration Index"]=e.configurationIndex),i.value.includes("configuration_name")&&(r["Configuration Name"]=(s=e.configurationIndex,t.trial.configurationSnapshots[s]&&t.trial.configurationSnapshots[s].name||`Config ${s+1}`)),i.value.includes("provider")&&(r.Provider=t.trial.configurationSnapshots?.[e.configurationIndex]?.provider||(o=e,o.request?.url?.includes("openai.com")?"OpenAI":o.request?.url?.includes("anthropic.com")?"Anthropic":o.request?.url?.includes("openrouter.ai")?"OpenRouter":o.request?.url?.includes("localhost:11434")?"Ollama":"Unknown")),i.value.includes("model")&&(r.Model=t.trial.configurationSnapshots?.[e.configurationIndex]?.modelId||function(e){return e.request?.body?.model?e.request.body.model:"Unknown"}(e)),i.value.includes("prompt")&&(r.Prompt=e.prompt),i.value.includes("variables"))for(const t of a)r[t]=e.variables?.[t]||"";if(i.value.includes("result_content")&&(r["Result Content"]=e.result?.content||""),i.value.includes("result_error")&&(r["Result Error"]=e.result?.error||""),i.value.includes("response_latency_ms")&&(r["Response Latency (ms)"]=e.response?.latencyMs||""),i.value.includes("duration_ms")){const t=e.created?new Date(e.created).getTime():0,a=e.completed?new Date(e.completed).getTime():0;r["Duration (ms)"]=t&&a?a-t:""}if(i.value.includes("result_success")&&(r["Result Success"]=e.result?.success||!1),i.value.includes("request_url")&&(r["Request URL"]=e.request?.url||""),i.value.includes("request_method")&&(r["Request Method"]=e.request?.method||""),i.value.includes("request_headers")&&(r["Request Headers"]=JSON.stringify(e.request?.headers||{})),i.value.includes("request_body")&&(r["Request Body"]=JSON.stringify(e.request?.body||{})),i.value.includes("response_status")&&(r["Response Status"]=e.response?.status||""),i.value.includes("response_headers")&&(r["Response Headers"]=JSON.stringify(e.response?.headers||{})),i.value.includes("response_body")&&(r["Response Body"]=JSON.stringify(e.response?.body||{})),i.value.includes("network_error_count")&&(r["Network Error Count"]=0),i.value.includes("retry_count")&&(r["Retry Count"]=0),i.value.includes("parameters")){const a=t.trial.configurationSnapshots?.[e.configurationIndex];if(a?.parameters){const e=g(a.parameters);for(const t of l){r[`param.${t}`]=e[t]??""}}else for(const e of l){r[`param.${e}`]=""}}return void 0!==e.repeatIndex&&(r.Repeat=e.repeatIndex+1,r["Repeat Group"]=e.repeatGroupId),r})}async function S(){const e=x(),a=(new Date).toISOString().split("T")[0],n=`${t.trial.name}_${o.value}_${a}`;try{switch(o.value){case"csv":!function(e,t){if(0===e.length)return;const a=Object.keys(e[0]||{}),n=[a.join(","),...e.map(e=>a.map(t=>`"${String(e[t]||"").replace(/"/g,'""')}"`).join(","))].join("\n");O(n,`${t}.csv`,"text/csv")}(e,n);break;case"tsv":!function(e,t){if(0===e.length)return;const a=Object.keys(e[0]||{}),n=[a.join("\t"),...e.map(e=>a.map(t=>String(e[t]||"").replace(/\t/g," ")).join("\t"))].join("\n");O(n,`${t}.tsv`,"text/tab-separated-values")}(e,n);break;case"excel":await async function(e,t){const a=await le(()=>import("./xlsx-C4WhbwXR.js"),[],import.meta.url),n=a.utils.book_new(),l=a.utils.json_to_sheet(e),r=Object.keys(e[0]||{}),s=r.map(e=>({wch:Math.min(Math.max(e.length,10),50)}));l["!cols"]=s,a.utils.book_append_sheet(n,l,"Trial Results"),a.writeFile(n,`${t}.xlsx`)}(e,n);break;case"json":!function(e,t){const a=JSON.stringify(e,null,2);O(a,`${t}.json`,"application/json")}(e,n);break;case"jsonl":!function(e,t){const a=e.map(e=>JSON.stringify(e)).join("\n");O(a,`${t}.jsonl`,"application/jsonl")}(e,n)}}catch(l){W.error("Export failed",l),te.error("Export failed: "+(l instanceof Error?l.message:"Unknown error"))}}function O(e,t,a){let n=e;"text/csv"!==a&&"text/tab-separated-values"!==a||(n="\ufeff"+e);const l=new Blob([n],{type:`${a};charset=utf-8`}),r=URL.createObjectURL(l),s=document.createElement("a");s.href=r,s.download=t,document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(r)}return(e,t)=>{const l=h("a-button");return w(),p("div",{class:"modal-overlay",onClick:t[4]||(t[4]=A(t=>e.$emit("close"),["self"]))},[m("div",ar,[m("div",nr,[t[5]||(t[5]=m("h3",null,"Export Trial Data",-1)),m("button",{onClick:t[0]||(t[0]=t=>e.$emit("close")),class:"close-btn","data-testid":"btn-close-export-modal","aria-label":"Close export modal"},"×")]),m("div",lr,[m("div",rr,[t[6]||(t[6]=m("h4",null,"Export Format",-1)),m("div",sr,[(w(),p(b,null,_(n,e=>m("label",{key:e.id,class:"format-option","data-testid":`label-format-${e.id}`,"aria-label":`Export as ${e.name} format`},[L(m("input",{type:"radio",value:e.id,"onUpdate:modelValue":t[1]||(t[1]=e=>o.value=e),class:"format-radio","data-testid":`radio-format-${e.id}`,"aria-label":`Select ${e.name} format`},null,8,ir),[[V,o.value]]),m("span",cr,[m("span",ur,C(e.name),1)])],8,or)),64))])]),m("div",dr,[m("h4",null,[t[7]||(t[7]=k(" Fields to Export ")),m("div",{class:"field-controls"},[m("button",{onClick:d,class:"control-btn","data-testid":"btn-select-all-fields","aria-label":"Select all export fields"},"Select All"),m("button",{onClick:f,class:"control-btn","data-testid":"btn-select-default-fields","aria-label":"Select default export fields"},"Defaults"),m("button",{onClick:v,class:"control-btn","data-testid":"btn-select-no-fields","aria-label":"Deselect all export fields"},"Select None")])]),m("div",pr,[(w(),p(b,null,_(s,e=>m("div",{key:e.name,class:"field-group","data-testid":`field-group-${e.name.toLowerCase().replace(/\s+/g,"-")}`},[m("h5",null,C(e.name),1),m("div",fr,[(w(!0),p(b,null,_(e.fields,e=>(w(),p("label",{key:e.id,class:"field-option","data-testid":`label-field-${e.id}`,"aria-label":`Include ${e.name} in export`},[L(m("input",{type:"checkbox",value:e.id,"onUpdate:modelValue":t[2]||(t[2]=e=>i.value=e),class:"field-checkbox","data-testid":`checkbox-field-${e.id}`,"aria-label":`Select ${e.name} field for export`},null,8,gr),[[B,i.value]]),m("span",hr,[m("span",yr,C(e.name),1),m("span",br,C(e.description),1)])],8,vr))),128))])],8,mr)),64))])]),m("div",_r,[t[8]||(t[8]=m("h4",null,"Export Preview",-1)),m("div",wr,[m("span",kr,C(e.apiCalls.length)+" records",1),m("span",xr,C(i.value.length)+" fields",1),m("span",Cr,"~"+C(u.value),1)])])]),m("div",Sr,[a(l,{onClick:t[3]||(t[3]=t=>e.$emit("close")),size:"large",class:"footer-button","data-testid":"btn-cancel-export","aria-label":"Cancel export"},{default:y(()=>t[9]||(t[9]=[k(" Cancel ")])),_:1,__:[9]}),a(l,{type:"primary",onClick:S,disabled:0===i.value.length,size:"large",class:"footer-button footer-button-primary","data-testid":"btn-confirm-export","data-format":o.value,"aria-label":`Export data as ${o.value.toUpperCase()}`},{default:y(()=>[k(" Export "+C(o.value.toUpperCase()),1)]),_:1},8,["disabled","data-format","aria-label"])])])])}}}),[["__scopeId","data-v-c5a34692"]]),Ir=Object.freeze(Object.defineProperty({__proto__:null,default:Or},Symbol.toStringTag,{value:"Module"})),Tr={class:"trial-details-panel"},Er={key:0,class:"empty-details"},Pr={class:"empty-illustration"},Ar={key:1,class:"trial-details"},Mr={class:"details-header-fixed"},Rr={class:"header-top-row"},Nr={class:"header-left"},$r={class:"trial-title"},Fr={class:"trial-meta"},jr={class:"progress-inline"},Dr={class:"progress-bar-small"},Lr={class:"progress-text-inline"},Ur={class:"header-right"},zr={class:"header-metrics-row"},qr={class:"metric-item"},Vr={class:"metric-value"},Br={class:"metric-item"},Hr={class:"metric-value"},Kr={class:"metric-item"},Gr={class:"metric-value"},Wr={key:0,class:"metric-item"},Jr={class:"metric-value"},Yr={class:"details-content-scrollable"},Xr={class:"analysis-view-wrapper"},Zr=Q(i({__name:"TrialDetailsPanel",emits:["create-trial"],setup(e){const t=vt(),n=G(),o=s(),i=l(!1),c=l(null),u=l([]),d=l([]),_=l(!1),x=r(()=>t.selectedTrial);function S(){if(!x.value||0===x.value.progress.total)return 0;const e=x.value.progress.completed-(x.value.progress.networkErrors||0);return Math.round(e/x.value.progress.total*100)}function O(){if(!x.value||!x.value.created)return"N/A";const e=new Date(x.value.started||x.value.created).getTime(),t=(x.value.completed?new Date(x.value.completed).getTime():Date.now())-e,a=Math.floor(t/36e5),n=Math.floor(t%36e5/6e4);return a>0?`${a}h ${n}m`:`${n}m`}function T(){if(!x.value||!x.value.started)return"calculating...";const e=Date.now()-new Date(x.value.started).getTime(),t=x.value.progress.completed;if(0===t)return"calculating...";const a=e/t*(x.value.progress.total-t),n=Math.floor(a/6e4),l=Math.floor(a%6e4/1e3);if(n>60){return`${Math.floor(n/60)}h ${n%60}m`}return`${n}m ${l}s`}async function E(){if(x.value)try{await n.pauseTrial(x.value.id),W.info("Trial paused",{trialId:x.value.id})}catch(e){W.error("Failed to pause trial",e),se.error({title:"Failed to pause trial",content:e instanceof Error?e.message:"Unknown error"})}}async function P(){if(x.value&&!_.value){_.value=!0;try{await n.executeTrial(x.value.id),W.info("Trial resumed",{trialId:x.value.id})}catch(e){W.error("Failed to resume trial",e),se.error({title:"Failed to resume trial",content:e instanceof Error?e.message:"Unknown error"})}finally{_.value=!1}}}async function A(){x.value&&se.confirm({title:"Cancel Trial?",content:"Are you sure you want to cancel this trial? This action cannot be undone.",okText:"Cancel Trial",okType:"danger",cancelText:"Keep Running",onOk:async()=>{try{await n.cancelTrial(x.value.id),W.info("Trial cancelled",{trialId:x.value.id})}catch(e){W.error("Failed to cancel trial",e),se.error({title:"Failed to cancel trial",content:e instanceof Error?e.message:"Unknown error"})}}})}async function M(){await async function(){if(!x.value)return;try{const{PythonExportService:e}=await le(async()=>{const{PythonExportService:e}=await Promise.resolve().then(()=>ns);return{PythonExportService:e}},void 0,import.meta.url),t=e.validateTrialForExport(x.value);if(!t.valid)return void se.error({title:"Cannot export trial",content:t.errors.join("\n")});const a=await e.generatePythonScript(x.value,{mode:"simple"}),n=new Blob([a],{type:"text/x-python"}),l=URL.createObjectURL(n),r=document.createElement("a");r.href=l,r.download=`auditomatic_${x.value.name.replace(/[^a-zA-Z0-9]/g,"_")}_${(new Date).toISOString().split("T")[0]}.py`,r.click(),URL.revokeObjectURL(l),W.info("Trial exported",{trialId:x.value.id})}catch(e){W.error("Failed to export trial",e),se.error({title:"Failed to export trial",content:e instanceof Error?e.message:"Unknown error"})}}()}async function R(){if(!x.value)return;const e=await re.apiCalls.where("trialId").equals(x.value.id).toArray();i.value=!0,c.value=x.value,u.value=e}function N(){x.value&&o.push({name:"trials",query:{tab:"create",duplicate:x.value.id}})}function $(){x.value&&o.push({name:"trials",query:{tab:"create",duplicate:x.value.id,edit:"true"}})}async function F(){x.value&&se.confirm({title:"Delete Trial?",content:`Are you sure you want to delete "${x.value.name}"? This action cannot be undone.`,okText:"Delete",okType:"danger",cancelText:"Cancel",onOk:async()=>{try{await n.deleteTrial(x.value.id),t.selectTrial(null),W.info("Trial deleted",{trialId:x.value.id})}catch(e){W.error("Failed to delete trial",e),se.error({title:"Failed to delete trial",content:e instanceof Error?e.message:"Unknown error"})}}})}return(e,t)=>{const n=h("a-button"),l=h("a-tag"),r=h("LoadingOutlined"),s=h("a-menu-item"),o=h("a-menu-divider"),j=h("a-menu"),D=h("a-dropdown"),L=h("a-collapse-panel"),U=h("a-collapse");return w(),p(b,null,[m("div",Tr,[x.value?(w(),p("div",Ar,[m("div",Mr,[m("div",Rr,[m("div",Nr,[m("h2",$r,C(x.value?x.value.name.replace(/\s*-\s*\d{1,2}\/\d{1,2}\/\d{4}/g,"").replace(/\s*\(Copy\)(\s*\(Copy\))*$/g,"").trim():""),1),m("div",Fr,[a(l,{color:(z=x.value.status,{running:"blue",completed:"green",failed:"red",paused:"orange",draft:"default"}[z]||"default"),class:"status-tag"},{default:y(()=>[k(C(x.value.status.toUpperCase()),1)]),_:1},8,["color"]),m("div",jr,[m("div",Dr,[m("div",{class:"progress-fill",style:I({width:(x.value&&0!==x.value.progress.total?Math.round(x.value.progress.completed/x.value.progress.total*100):0)+"%"})},null,4)]),m("span",Lr,C(x.value.progress.completed)+"/"+C(x.value.progress.total)+" ("+C(S())+"%) ",1)])])]),m("div",Ur,["running"===x.value.status?(w(),p(b,{key:0},[a(n,{onClick:E},{icon:y(()=>[a(g(tt))]),default:y(()=>[t[6]||(t[6]=k(" Pause "))]),_:1,__:[6]}),a(n,{onClick:A,danger:""},{icon:y(()=>[a(g(ct))]),default:y(()=>[t[7]||(t[7]=k(" Cancel "))]),_:1,__:[7]})],64)):"paused"===x.value.status?(w(),p(b,{key:1},[a(n,{type:"primary",onClick:P,disabled:_.value},{icon:y(()=>[_.value?(w(),v(r,{key:0,spin:""})):(w(),v(g(ue),{key:1}))]),default:y(()=>[k(" "+C(_.value?"Resuming...":"Resume"),1)]),_:1},8,["disabled"]),a(n,{onClick:A,danger:""},{icon:y(()=>[a(g(ct))]),default:y(()=>[t[8]||(t[8]=k(" Cancel "))]),_:1,__:[8]})],64)):f("",!0),a(n,{onClick:R},{icon:y(()=>[a(g(me))]),default:y(()=>[t[9]||(t[9]=k(" Export "))]),_:1,__:[9]}),a(D,null,{overlay:y(()=>[a(j,null,{default:y(()=>[a(s,{onClick:M},{default:y(()=>[a(g(Ae)),t[10]||(t[10]=k(" Export to Python "))]),_:1,__:[10]}),a(s,{onClick:N},{default:y(()=>[a(g(ve)),t[11]||(t[11]=k(" Duplicate Configuration "))]),_:1,__:[11]}),a(o),"draft"===x.value.status?(w(),v(s,{key:0,onClick:$},{default:y(()=>[a(g(de)),t[12]||(t[12]=k(" Edit "))]),_:1,__:[12]})):f("",!0),a(s,{danger:"",onClick:F},{default:y(()=>[a(g(ge)),t[13]||(t[13]=k(" Delete "))]),_:1,__:[13]})]),_:1})]),default:y(()=>[a(n,null,{default:y(()=>[a(g(fe))]),_:1})]),_:1})])]),m("div",zr,[m("div",qr,[a(g(ie),{class:"metric-icon"}),t[14]||(t[14]=m("span",{class:"metric-label"},"Duration:",-1)),m("span",Vr,C(O()),1)]),m("div",Br,[a(g(mt),{class:"metric-icon"}),t[15]||(t[15]=m("span",{class:"metric-label"},"Latency:",-1)),m("span",Hr,C("3.6s"),1)]),m("div",Kr,[a(g($e),{class:"metric-icon"}),t[16]||(t[16]=m("span",{class:"metric-label"},"Cost:",-1)),m("span",Gr,"$"+C((x.value.estimatedCost||0).toFixed(2)),1)]),"running"===x.value.status||"paused"===x.value.status?(w(),p("div",Wr,[a(g(Ve),{class:"metric-icon"}),t[17]||(t[17]=m("span",{class:"metric-label"},"Remaining:",-1)),m("span",Jr,"~"+C(T()),1)])):f("",!0)])]),m("div",Yr,[a(U,{activeKey:d.value,"onUpdate:activeKey":t[1]||(t[1]=e=>d.value=e),class:"trial-info-collapse",bordered:!1},{default:y(()=>[a(L,{key:"info"},{header:y(()=>t[18]||(t[18]=[m("span",{class:"collapse-header-text"},"Trial Information",-1)])),default:y(()=>[a(tr,{trial:x.value,compact:!0},null,8,["trial"])]),_:1})]),_:1},8,["activeKey"]),m("div",Xr,[a(Il,{trial:x.value,embedded:""},null,8,["trial"])])])])):(w(),p("div",Er,[m("div",Pr,[a(g(pe),{style:{"font-size":"64px",color:"var(--color-primary-alpha)"}})]),t[4]||(t[4]=m("h3",null,"Select a trial to view details",-1)),t[5]||(t[5]=m("p",null,"Choose from the list or create a new one",-1)),a(n,{type:"primary",size:"large",class:"create-trial-button-large",onClick:t[0]||(t[0]=t=>e.$emit("create-trial"))},{icon:y(()=>[a(g(Y))]),default:y(()=>[t[3]||(t[3]=k(" Create New Trial "))]),_:1,__:[3]})]))]),i.value?(w(),v(Or,{key:0,trial:c.value,"api-calls":u.value,onClose:t[2]||(t[2]=e=>i.value=!1)},null,8,["trial","api-calls"])):f("",!0)],64);var z}}}),[["__scopeId","data-v-196cc903"]]);class Qr{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){let t={};if("aligned"===e.executionContext?.mode){const a=e.variableSnapshots.find(e=>"tabular"===e.category);if(a?.data.tabularData){const{columns:e,rows:n}=a.data.tabularData;t.__tabular__=["true"],t.__columns__=e,t.__rows__=n.map(e=>JSON.stringify(e)),e.forEach(e=>{const a=[...new Set(n.map(t=>String(t[e]||"")))];t[e]=a.sort()})}}else{const a=new he({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e);t=this.extractUniqueVariables(a)}const a=e.configurationSnapshots.map(e=>({provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:e.parameters})),n=new Set(a.map(e=>e.provider)),l={};for(const r of n){const e=ye.getProvider(r);e&&(l[r]=this.buildProviderConfig(r,e))}return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:t},models:a,providerConfigs:l}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static buildProviderConfig(e,t){const a=t.requestTransform||{},n=t.auth||{type:"none"};let l="direct";"messages"===a.promptKey&&a.wrapPrompt?l="messages":"input"===a.promptKey&&(l="input");let r,s,o="root";"ollama-chat"===e?(o="options",r={max_tokens:"num_predict",max_completion_tokens:"num_predict"}):"ollama-generate"===e&&(o="mixed",s={root:["model","prompt","stream","format","raw"],options:["temperature","num_predict","top_k","top_p"]},r={max_tokens:"num_predict",max_completion_tokens:"num_predict"});const i=Object.values(t.responseModes||{})[0],c=this.parseResponsePath(i?.responseTransform?.contentPath),u=i?.responseTransform?.fallbackPaths?.map(e=>this.parseResponsePath(e)),d=t.api.baseUrl+(t.api.endpoints.chat||t.api.endpoints.generate||"");return{name:t.name,endpoint:d,auth:{type:n.type,header:n.header,prefix:"bearer"===n.type?"Bearer":void 0},headers:t.headers,request:{modelPrefixStrip:!0,promptFormat:l,messageRole:a.messageRole,paramLocation:o,paramRenames:r,mixedParams:s},response:{successPath:c,fallbackPaths:u,errorPath:["error","message"]}}}static parseResponsePath(e){return e?e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t}):["content"]}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),r=JSON.stringify(e.providerConfigs,null,4);return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Simple Mode\n=====================================\nGenerated by Auditomatic Lite v${be.short} on ${a}\n\nThis script reproduces your experiment by generating API calls from variables.\nPerfect for understanding, modifying, and extending your experiments.\n\nOriginal trial: ${t}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${Object.keys(e.providerConfigs).map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${e}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Provider configurations (how to talk to each API)\nPROVIDER_CONFIGS = ${r}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef make_api_call(provider_id: str, model: str, prompt: str, params: dict) -> dict:\n    """\n    Universal API caller that handles all provider quirks.\n    \n    Returns dict with 'success', 'content', 'error', and timing info.\n    """\n    config = PROVIDER_CONFIGS[provider_id]\n    \n    # Build headers\n    headers = {"Content-Type": "application/json"}\n    \n    # Add authentication\n    auth = config["auth"]\n    if auth["type"] == "bearer":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = f"{auth['prefix']} {api_key}"\n    elif auth["type"] == "header":\n        api_key = API_KEYS.get(provider_id, "")\n        if not api_key:\n            return {"success": False, "error": f"No API key for {provider_id}"}\n        headers[auth["header"]] = api_key\n    \n    # Add provider-specific headers\n    if config.get("headers"):\n        headers.update(config["headers"])\n    \n    # Build request body\n    request = config["request"]\n    \n    # Strip provider prefix from model\n    if request.get("modelPrefixStrip"):\n        model = model.split(":", 1)[-1]\n    \n    body = {"model": model}\n    \n    # Format prompt\n    if request["promptFormat"] == "messages":\n        body["messages"] = [{"role": request.get("messageRole", "user"), "content": prompt}]\n    elif request["promptFormat"] == "direct":\n        body["prompt"] = prompt\n    elif request["promptFormat"] == "input":\n        body["input"] = prompt\n    \n    # Handle parameters\n    processed_params = params.copy()\n    \n    # Apply renames\n    if request.get("paramRenames"):\n        for old_key, new_key in request["paramRenames"].items():\n            if old_key in processed_params:\n                processed_params[new_key] = processed_params.pop(old_key)\n    \n    # Place parameters\n    if request["paramLocation"] == "root":\n        body.update(processed_params)\n    elif request["paramLocation"] == "options":\n        body["options"] = processed_params\n    elif request.get("mixedParams"):\n        mixed = request["mixedParams"]\n        for key, value in processed_params.items():\n            if key in mixed.get("root", []):\n                body[key] = value\n            else:\n                if "options" not in body:\n                    body["options"] = {}\n                body["options"][key] = value\n    \n    # Make request\n    start_time = time.time()\n    try:\n        response = requests.post(\n            config["endpoint"],\n            headers=headers,\n            json=body,\n            timeout=30\n        )\n        latency_ms = (time.time() - start_time) * 1000\n        \n        if response.ok:\n            data = response.json()\n            content = extract_from_path(data, config["response"]["successPath"])\n            \n            # Try fallback paths\n            if content is None and config["response"].get("fallbackPaths"):\n                for path in config["response"]["fallbackPaths"]:\n                    content = extract_from_path(data, path)\n                    if content is not None:\n                        break\n            \n            return {\n                "success": True,\n                "content": content or "",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n        else:\n            return {\n                "success": False,\n                "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                "latency_ms": latency_ms,\n                "status_code": response.status_code\n            }\n            \n    except Exception as e:\n        return {\n            "success": False,\n            "error": str(e),\n            "latency_ms": (time.time() - start_time) * 1000\n        }\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Check if this is tabular/spreadsheet data (row-by-row execution)\n    if "__tabular__" in variables and variables["__tabular__"] == ["true"]:\n        # Row-by-row execution for spreadsheet imports\n        rows = [json.loads(row) for row in variables["__rows__"]]\n        \n        for row in rows:\n            # Replace variables in template with values from this row\n            prompt = template\n            var_dict = {}\n            \n            for col, value in row.items():\n                var_dict[col] = str(value) if value is not None else ""\n                prompt = prompt.replace(f"{{{{{col}}}}}", var_dict[col])\n            \n            yield prompt, var_dict\n    else:\n        # Standard cartesian product execution\n        # Get variable names from template\n        import re\n        var_names = re.findall(r'{{(\\w+)}}', template)\n        \n        # Filter out special variables\n        var_names = [v for v in var_names if not v.startswith("__")]\n        \n        # Generate all combinations\n        from itertools import product\n        \n        var_lists = [variables[var] for var in var_names if var in variables]\n        if not var_lists:\n            yield template, {}\n            return\n            \n        for values in product(*var_lists):\n            var_dict = dict(zip(var_names, values))\n            \n            # Replace variables in template\n            prompt = template\n            for var, val in var_dict.items():\n                prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n            \n            yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(\n                model_config["provider"],\n                model_config["modelId"],\n                prompt,\n                model_config["parameters"]\n            )\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": result.get("content", ""),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                "status_code": result.get("status_code", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {result['content'][:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_results_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider not in API_KEYS or not API_KEYS[provider]:\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(set(missing_keys)))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns:\n            print(f"Avg latency: {df['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class es{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=[],a=new ke,n=new he({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),l=_e(e);let r=0;for(const o of e.configurationSnapshots){const i=ye.getProvider(o.provider);if(i)for(const c of n){const n=l>1?we():void 0;let u=e.designSnapshot.promptTemplate;for(const[e,t]of Object.entries(c.variables))u=u.replace(new RegExp(`{{${e}}}`,"g"),t);for(let e=0;e<l;e++){r++;try{const s={id:"export-config",name:o.name,provider:o.provider,model:o.modelId,params:o.parameters,created_at:new Date},d=a.buildAPIRequest(s,u),p={};for(const[e,t]of Object.entries(d.headers))"Authorization"===e&&t.startsWith("Bearer ")?p[e]=`Bearer $${o.provider.split("-")[0].toUpperCase()}_API_KEY`:e===i.auth.header&&"header"===i.auth.type?p[e]=`$${o.provider.split("-")[0].toUpperCase()}_API_KEY`:p[e]=t;const m=this.parseResponsePath(this.getDefaultResponsePath(o.provider));t.push({id:`call_${String(r).padStart(3,"0")}`,provider:o.provider,endpoint:d.url,headers:p,body:d.body,responsePath:m,metadata:{variables:c.variables,modelName:o.modelId,configName:o.name,...l>1&&{repeatIndex:e,repeatGroupId:n}}})}catch(s){W.warn("Failed to build API call for config",{configName:o.name,error:s})}}}}return{apiCalls:t,...e.repeatConfig&&{repeatConfig:{callsPerPrompt:e.repeatConfig.callsPerPrompt,delayBetweenRepeats:e.repeatConfig.delayBetweenRepeats}}}}static parseResponsePath(e){return e.split(/[\.\[\]]/).filter(Boolean).map(e=>{const t=parseInt(e);return isNaN(t)?e:t})}static getDefaultResponsePath(e){switch(e){case"openai-chat":case"openrouter":return"choices[0].message.content";case"openai-responses":return"output[0].content[0].text";case"anthropic":return"content[0].text";case"ollama-chat":return"message.content";case"ollama-generate":return"response";default:return"content"}}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.apiCalls,null,4),l=[...new Set(e.apiCalls.map(e=>e.provider))],r=e.repeatConfig?`\nRepeat configuration: ${e.repeatConfig.callsPerPrompt} calls per prompt${e.repeatConfig.delayBetweenRepeats?`, ${e.repeatConfig.delayBetweenRepeats}ms delay`:""}`:"";return`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Literal Mode\n======================================\nGenerated by Auditomatic Lite v${be.short} on ${a}\n\nThis script contains the EXACT API calls from your experiment.\nPerfect for bit-for-bit reproduction, debugging, and comparing results.\n\nOriginal trial: ${t}\nTotal API calls: ${e.apiCalls.length}${r}\n"""\n\nimport os\nimport json\nimport time\nimport requests\nimport pandas as pd\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\nAPI_KEYS = {\n${l.map(e=>{const t=e.split("-")[0].toUpperCase();return`    "${t}": os.environ.get("${t}_API_KEY", ""),`}).join("\n")}\n}\n\n# Pre-computed API calls from your experiment\nAPI_CALLS = ${n}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\ndef execute_literal_calls():\n    """Execute pre-serialized API calls exactly as specified"""\n    results = []\n    total = len(API_CALLS)\n    \n    print(f"Executing {total} pre-computed API calls...")\n    print("=" * 60)\n    \n    for i, call in enumerate(API_CALLS):\n        print(f"[{i+1}/{total}] {call['metadata']['configName']} - ", end="")\n        \n        # Replace API key placeholders in headers\n        headers = {}\n        for key, value in call["headers"].items():\n            if "\\$" in str(value):\n                # Extract provider name from placeholder\n                for provider_key, api_key in API_KEYS.items():\n                    placeholder = f"\\\${provider_key}_API_KEY"\n                    if placeholder in value:\n                        headers[key] = value.replace(placeholder, api_key)\n                        break\n                else:\n                    headers[key] = value\n            else:\n                headers[key] = value\n        \n        # Check if we have required API key\n        provider_base = call["provider"].split("-")[0].upper()\n        if provider_base in ["OPENAI", "ANTHROPIC", "OPENROUTER"] and not API_KEYS.get(provider_base):\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": f"No API key for {provider_base}",\n                "latency_ms": 0,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ No API key")\n            continue\n        \n        # Make the exact API call\n        start_time = time.time()\n        try:\n            response = requests.post(\n                call["endpoint"],\n                headers=headers,\n                json=call["body"],\n                timeout=30\n            )\n            latency_ms = (time.time() - start_time) * 1000\n            \n            if response.ok:\n                data = response.json()\n                content = extract_from_path(data, call["responsePath"])\n                \n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": content or "",\n                    "success": True,\n                    "error": "",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    "full_response": json.dumps(data)[:500],  # First 500 chars\n                    **call["metadata"]["variables"]\n                })\n                print(f"✓ {(content or '')[:30]}")\n            else:\n                results.append({\n                    "call_id": call["id"],\n                    "timestamp": datetime.now(),\n                    "provider": call["provider"],\n                    "model": call["metadata"]["modelName"],\n                    "config_name": call["metadata"]["configName"],\n                    "prompt": extract_prompt_from_body(call["body"]),\n                    "response": "",\n                    "success": False,\n                    "error": f"HTTP {response.status_code}: {response.text[:200]}",\n                    "latency_ms": latency_ms,\n                    "status_code": response.status_code,\n                    **call["metadata"]["variables"]\n                })\n                print(f"✗ HTTP {response.status_code}")\n                \n        except Exception as e:\n            latency_ms = (time.time() - start_time) * 1000\n            results.append({\n                "call_id": call["id"],\n                "timestamp": datetime.now(),\n                "provider": call["provider"],\n                "model": call["metadata"]["modelName"],\n                "config_name": call["metadata"]["configName"],\n                "prompt": extract_prompt_from_body(call["body"]),\n                "response": "",\n                "success": False,\n                "error": str(e)[:200],\n                "latency_ms": latency_ms,\n                "status_code": 0,\n                **call["metadata"]["variables"]\n            })\n            print(f"✗ {str(e)[:30]}")\n        \n        # Handle repeat delays if configured\n        if "repeatIndex" in call["metadata"] and call["metadata"]["repeatIndex"] > 0:\n            # Check if there's a repeat delay configured\n            delay_ms = ${e.repeatConfig?.delayBetweenRepeats||0}\n            if delay_ms > 0:\n                time.sleep(delay_ms / 1000.0)\n        \n        # Rate limiting\n        time.sleep(0.1)\n    \n    return results\n\ndef extract_prompt_from_body(body: dict) -> str:\n    """Extract the prompt from various request body formats"""\n    # Messages format (OpenAI, Anthropic, etc)\n    if "messages" in body and isinstance(body["messages"], list):\n        for msg in body["messages"]:\n            if msg.get("role") == "user":\n                return msg.get("content", "")\n    \n    # Direct prompt format (Ollama generate)\n    if "prompt" in body:\n        return body["prompt"]\n    \n    # Input format (OpenAI responses)\n    if "input" in body:\n        return body["input"]\n    \n    return ""\n\ndef extract_from_path(data: Any, path: List[Any]) -> Optional[str]:\n    """Extract value from nested data using a path like ['choices', 0, 'message', 'content']"""\n    try:\n        current = data\n        for key in path:\n            if isinstance(current, dict):\n                current = current[key]\n            elif isinstance(current, list):\n                current = current[int(key)]\n            else:\n                return None\n        return str(current) if current is not None else None\n    except (KeyError, IndexError, TypeError):\n        return None\n\ndef save_results(results: List[Dict[str, Any]], format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    # Drop full_response column for cleaner output (except JSON)\n    if format != "json" and "full_response" in df.columns:\n        df = df.drop(columns=["full_response"])\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_literal_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for API keys\n    required_providers = set(call["provider"].split("-")[0].upper() for call in API_CALLS)\n    missing_keys = []\n    for provider in required_providers:\n        if provider not in ["OLLAMA"] and not API_KEYS.get(provider):\n            missing_keys.append(provider)\n    \n    if missing_keys:\n        print("WARNING: Missing API keys for:", ", ".join(missing_keys))\n        print("Set them in the API_KEYS dict or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Execute all calls\n    results = execute_literal_calls()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if df['success'].any():\n            print(f"Avg latency (successful): {df[df['success']]['latency_ms'].mean():.1f}ms")\n        \n        # Group by model\n        print(f"\\nBy Model:")\n        model_summary = df.groupby('config_name')['success'].agg(['count', 'sum', 'mean'])\n        model_summary.columns = ['total', 'successful', 'success_rate']\n        print(model_summary)\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class ts{static generate(e){const t=this.extractData(e);return this.generateScript(t,e.name)}static extractData(e){const t=new he({getApiKey:()=>{},getBaseUrl:()=>{}}).generateVariableCombinations(e),a=this.extractUniqueVariables(t),n=e.configurationSnapshots.map(e=>{let t,a="text";return e.parameters.response_format?(a="json_mode",t={response_format:e.parameters.response_format}):e.parameters.tools&&(a="function_calling",t={tools:e.parameters.tools,tool_choice:e.parameters.tool_choice}),{provider:e.provider,modelId:e.modelId,displayName:e.name,parameters:this.filterCoreParams(e.parameters),responseMode:a,responseModeParams:t}}),l=new Set(n.map(e=>e.provider)),r={"openai-chat":"openai","openai-responses":"openai",anthropic:"anthropic",openrouter:"openai","ollama-chat":"ollama","ollama-generate":"ollama"},s=[...new Set(Array.from(l).map(e=>r[e]).filter(Boolean))],o={"openai-chat":"OPENAI","openai-responses":"OPENAI",anthropic:"ANTHROPIC",openrouter:"OPENROUTER","ollama-chat":"","ollama-generate":""},i=[...new Set(Array.from(l).map(e=>o[e]).filter(Boolean))];return{experiment:{promptTemplate:e.designSnapshot.promptTemplate,variables:a},models:n,providerLibraries:{required:s,apiKeys:i}}}static extractUniqueVariables(e){const t={};for(const n of e)for(const[e,a]of Object.entries(n.variables))t[e]||(t[e]=new Set),t[e].add(a);const a={};for(const[n,l]of Object.entries(t))a[n]=Array.from(l).sort();return a}static filterCoreParams(e){const t={...e};return delete t.response_format,delete t.tools,delete t.tool_choice,t}static generateScript(e,t){const a=(new Date).toISOString(),n=JSON.stringify(e.experiment.variables,null,4),l=JSON.stringify(e.models,null,4),r=["import os","import json","import time","import pandas as pd","from datetime import datetime"];return e.providerLibraries.required.includes("openai")&&r.push("from openai import OpenAI"),e.providerLibraries.required.includes("anthropic")&&r.push("from anthropic import Anthropic"),e.providerLibraries.required.includes("ollama")&&r.push("import ollama"),`#!/usr/bin/env python3\n"""\nAI Model Testing Script - Native Mode\n=====================================\nGenerated by Auditomatic Lite v${be.short} on ${a}\n\nThis script uses native Python libraries for each provider.\nCleanest code, best for production use.\n\nOriginal trial: ${t}\nRequired packages: ${e.providerLibraries.required.join(", ")}\n"""\n\n${r.join("\n")}\n\n# === CONFIGURATION ===\n\n# API Keys - Add your keys here or set as environment variables\n${e.providerLibraries.apiKeys.map(e=>`os.environ.setdefault("${e}_API_KEY", "")  # Set your ${e} API key`).join("\n")}\n\n# Your experiment design\nEXPERIMENT = {\n    "prompt_template": "${e.experiment.promptTemplate.replace(/"/g,'\\"')}",\n    "variables": ${n}\n}\n\n# Models to test\nMODELS = ${l}\n\n# Output settings\nOUTPUT_FORMAT = "csv"  # Options: csv, excel, json, parquet, html, markdown, stata, pickle\n\n# === IMPLEMENTATION ===\n\n# Initialize clients\nclients = {}\n\ndef get_client(provider):\n    """Get or create client for provider"""\n    if provider not in clients:\n        if provider in ["openai-chat", "openai-responses"]:\n            clients[provider] = OpenAI()\n        elif provider == "anthropic":\n            clients[provider] = Anthropic()\n        elif provider == "openrouter":\n            clients[provider] = OpenAI(\n                api_key=os.environ.get("OPENROUTER_API_KEY"),\n                base_url="https://openrouter.ai/api/v1"\n            )\n        # Ollama doesn't need a client\n    return clients.get(provider)\n\ndef make_api_call(model_config: dict, prompt: str) -> dict:\n    """Make API call using native provider library"""\n    provider = model_config["provider"]\n    model = model_config["modelId"]\n    params = model_config["parameters"].copy()\n    \n    try:\n        start_time = time.time()\n        \n        if provider == "openai-chat" or provider == "openrouter":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["response_format"] = {"type": "json_object"}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.chat.completions.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content based on response mode\n            if model_config["responseMode"] == "function_calling" and response.choices[0].message.tool_calls:\n                content = response.choices[0].message.tool_calls[0].function.arguments\n                if isinstance(content, str):\n                    content = json.loads(content)\n            else:\n                content = response.choices[0].message.content\n            \n        elif provider == "openai-responses":\n            client = get_client(provider)\n            \n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["text"] = {"format": {"type": "json_object"}}\n            elif model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.responses.create(\n                model=model,\n                input=prompt,\n                **params\n            )\n            \n            # Extract content\n            output = response.output\n            if isinstance(output, list) and len(output) > 0:\n                if hasattr(output[0], 'content') and isinstance(output[0].content, list):\n                    content = output[0].content[0].text if hasattr(output[0].content[0], 'text') else str(output[0].content[0])\n                else:\n                    content = str(output[0])\n            else:\n                content = str(output)\n            \n        elif provider == "anthropic":\n            client = get_client(provider)\n            \n            # Build messages\n            messages = [{"role": "user", "content": prompt}]\n            \n            # Handle response modes\n            if model_config["responseMode"] == "function_calling":\n                params.update(model_config.get("responseModeParams", {}))\n            \n            # Make call\n            response = client.messages.create(\n                model=model,\n                messages=messages,\n                **params\n            )\n            \n            # Extract content\n            if model_config["responseMode"] == "function_calling" and hasattr(response.content[0], 'input'):\n                content = response.content[0].input\n            else:\n                content = response.content[0].text\n            \n        elif provider == "ollama-chat":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.chat(\n                model=model,\n                messages=[{"role": "user", "content": prompt}],\n                **params\n            )\n            \n            # Extract content\n            content = response["message"]["content"]\n            \n        elif provider == "ollama-generate":\n            # Handle response modes\n            if model_config["responseMode"] == "json_mode":\n                params["format"] = "json"\n            \n            # Make call\n            response = ollama.generate(\n                model=model,\n                prompt=prompt,\n                **params\n            )\n            \n            # Extract content\n            content = response["response"]\n        \n        else:\n            raise ValueError(f"Unknown provider: {provider}")\n        \n        latency_ms = (time.time() - start_time) * 1000\n        \n        return {\n            "success": True,\n            "content": content,\n            "latency_ms": latency_ms\n        }\n        \n    except Exception as e:\n        latency_ms = (time.time() - start_time) * 1000\n        return {\n            "success": False,\n            "content": "",\n            "error": str(e),\n            "latency_ms": latency_ms\n        }\n\ndef generate_prompts():\n    """Generate all prompts from template and variables"""\n    template = EXPERIMENT["prompt_template"]\n    variables = EXPERIMENT["variables"]\n    \n    # Get variable names from template\n    import re\n    var_names = re.findall(r'{{(\\w+)}}', template)\n    \n    # Generate all combinations\n    from itertools import product\n    \n    var_lists = [variables[var] for var in var_names]\n    for values in product(*var_lists):\n        var_dict = dict(zip(var_names, values))\n        \n        # Replace variables in template\n        prompt = template\n        for var, val in var_dict.items():\n            prompt = prompt.replace(f"{{{{{var}}}}}", str(val))\n        \n        yield prompt, var_dict\n\ndef run_experiment():\n    """Run the full experiment"""\n    results = []\n    total_calls = len(MODELS) * len(list(generate_prompts()))\n    current = 0\n    \n    print(f"Running experiment with {len(MODELS)} models and {total_calls} total API calls")\n    print("=" * 60)\n    \n    for model_config in MODELS:\n        print(f"\\nTesting {model_config['displayName']}...")\n        \n        for prompt, variables in generate_prompts():\n            current += 1\n            print(f"[{current}/{total_calls}] {prompt[:50]}...", end=" ")\n            \n            # Make API call\n            result = make_api_call(model_config, prompt)\n            \n            # Collect results\n            results.append({\n                "timestamp": datetime.now(),\n                "provider": model_config["provider"],\n                "model": model_config["modelId"],\n                "model_name": model_config["displayName"],\n                "prompt": prompt,\n                "response": str(result.get("content", "")),\n                "success": result.get("success", False),\n                "error": result.get("error", ""),\n                "latency_ms": result.get("latency_ms", 0),\n                **variables  # Add variables as columns\n            })\n            \n            # Show result\n            if result["success"]:\n                print(f"✓ {str(result['content'])[:30]}")\n            else:\n                print(f"✗ {result['error'][:30]}")\n            \n            # Rate limiting\n            time.sleep(0.1)\n    \n    return results\n\ndef save_results(results: list, format: str = OUTPUT_FORMAT):\n    """Save results using pandas in the specified format"""\n    df = pd.DataFrame(results)\n    \n    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")\n    base_filename = f"experiment_native_{timestamp}"\n    \n    if format == "csv":\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    elif format == "excel":\n        filename = f"{base_filename}.xlsx"\n        df.to_excel(filename, index=False)\n    elif format == "json":\n        filename = f"{base_filename}.json"\n        df.to_json(filename, orient="records", indent=2)\n    elif format == "parquet":\n        filename = f"{base_filename}.parquet"\n        df.to_parquet(filename)\n    elif format == "html":\n        filename = f"{base_filename}.html"\n        df.to_html(filename, index=False)\n    elif format == "markdown":\n        filename = f"{base_filename}.md"\n        with open(filename, "w") as f:\n            f.write(df.to_markdown(index=False))\n    elif format == "stata":\n        filename = f"{base_filename}.dta"\n        df.to_stata(filename)\n    elif format == "pickle":\n        filename = f"{base_filename}.pkl"\n        df.to_pickle(filename)\n    else:\n        filename = f"{base_filename}.csv"\n        df.to_csv(filename, index=False)\n    \n    print(f"\\nResults saved to {filename}")\n    return filename\n\ndef main():\n    """Main entry point"""\n    # Check for required packages\n    required = ${JSON.stringify(e.providerLibraries.required)}\n    missing = []\n    for lib in required:\n        try:\n            __import__(lib)\n        except ImportError:\n            missing.append(lib)\n    \n    if missing:\n        print(f"ERROR: Missing required packages: {', '.join(missing)}")\n        print(f"Install with: pip install {' '.join(missing)}")\n        return\n    \n    # Check for API keys\n    missing_keys = []\n    for model in MODELS:\n        provider = model["provider"]\n        if provider in ["openai-chat", "openai-responses"] and not os.environ.get("OPENAI_API_KEY"):\n            missing_keys.append("OPENAI_API_KEY")\n        elif provider == "anthropic" and not os.environ.get("ANTHROPIC_API_KEY"):\n            missing_keys.append("ANTHROPIC_API_KEY")\n        elif provider == "openrouter" and not os.environ.get("OPENROUTER_API_KEY"):\n            missing_keys.append("OPENROUTER_API_KEY")\n    \n    if missing_keys:\n        print(f"WARNING: Missing API keys: {', '.join(set(missing_keys))}")\n        print("Set them in the script or as environment variables.")\n        response = input("\\nContinue anyway? (y/N): ")\n        if response.lower() != 'y':\n            return\n    \n    # Run experiment\n    results = run_experiment()\n    \n    # Save results\n    if results:\n        save_results(results)\n        \n        # Basic summary\n        df = pd.DataFrame(results)\n        print(f"\\nSummary:")\n        print(f"Total calls: {len(df)}")\n        print(f"Successful: {df['success'].sum()}")\n        print(f"Failed: {(~df['success']).sum()}")\n        if 'latency_ms' in df.columns and df['success'].any():\n            print(f"Avg latency: {df[df['success']]['latency_ms'].mean():.1f}ms")\n    else:\n        print("\\nNo results to save")\n\nif __name__ == "__main__":\n    main()\n`}}class as{static async generatePythonScript(e,t){try{const a=t||this.getDefaultOptions(),n=this.validateTrialForExport(e);if(!n.valid)throw new Error(`Trial validation failed: ${n.errors.join(", ")}`);switch(a.mode){case"simple":return Qr.generate(e);case"literal":return es.generate(e);case"native":return ts.generate(e);default:throw new Error(`Unknown export mode: ${a.mode}`)}}catch(a){throw new Error(`Failed to generate Python export: ${a instanceof Error?a.message:String(a)}`)}}static async downloadPythonScript(e,t){const a=await this.generatePythonScript(e,t),n=t||this.getDefaultOptions(),l=new Blob([a],{type:"text/x-python"}),r=URL.createObjectURL(l),s=document.createElement("a");s.href=r,s.download=this.generateFilename(e,n.mode),document.body.appendChild(s),s.click(),document.body.removeChild(s),URL.revokeObjectURL(r)}static validateTrialForExport(e){const t=[];return e.designSnapshot?e.designSnapshot.promptTemplate||t.push("Design missing prompt template"):t.push("Trial missing design snapshot"),e.configurationSnapshots&&0!==e.configurationSnapshots.length?e.configurationSnapshots.forEach((e,a)=>{e.provider||t.push(`Configuration ${a+1} missing provider`),e.modelId||t.push(`Configuration ${a+1} missing model`),e.parameters||t.push(`Configuration ${a+1} missing parameters`)}):t.push("Trial missing model configurations"),e.variableSnapshots||t.push("Trial missing variable snapshots"),{valid:0===t.length,errors:t}}static getExportSummary(e){const t=new Set(e.configurationSnapshots.map(e=>e.provider)),a=e.totalCombinations||0;return{apiCallCount:e.configurationSnapshots.length*a,providersUsed:Array.from(t),variableCombinations:a,configurations:e.configurationSnapshots.length}}static getDefaultOptions(){return{mode:"simple"}}static generateFilename(e,t){const a=e.name||`trial_${e.id}`,n=(new Date).toISOString().split("T")[0];return`${a.toLowerCase().replace(/[^a-z0-9]/g,"_")}_${t}_${n}.py`}}const ns=Object.freeze(Object.defineProperty({__proto__:null,PythonExportService:as},Symbol.toStringTag,{value:"Module"})),ls={class:"trial-info"},rs={class:"trial-stats"},ss={class:"export-section"},os={class:"mode-content"},is={class:"mode-content"},cs={class:"mode-content"},us={class:"export-section"},ds={class:"preview-content"},ps={class:"preview-info"},ms=i({__name:"PythonExportModal",props:{trial:{}},emits:["close","exported"],setup(e,{emit:t}){const n=e,s=t,o=l("simple"),i=l(!1),c=r(()=>n.trial.progress.total),u=r(()=>n.trial.configurationSnapshots?.length||0),d=r(()=>n.trial.totalCombinations||0),p=r(()=>{const e=.05*d.value+.3*u.value;return Math.round(15+e)}),f=r(()=>{const e=.5*c.value;return Math.round(10+e)}),g=r(()=>{const e=.05*d.value+.2*u.value;return Math.round(12+e)}),b=r(()=>{const e=n.trial.name.toLowerCase().replace(/\s+/g,"_"),t=(new Date).toISOString().split("T")[0];return`${e}_${o.value}_${t}.py`}),_=r(()=>{if("simple"===o.value){return 300+(d.value+10*u.value)}if("native"===o.value){return 250+(d.value+8*u.value)}return 200+15*c.value});async function x(){i.value=!0;try{const e={mode:o.value};await as.downloadPythonScript(n.trial,e),s("exported",b.value),s("close")}catch(e){W.error("Export failed",e),alert("Export failed: "+(e instanceof Error?e.message:"Unknown error"))}finally{i.value=!1}}return(e,t)=>{const n=h("a-button"),l=h("a-tag"),r=h("a-radio"),s=h("a-radio-group"),S=h("a-typography-text");return w(),v(Ie,{"model-value":!0,title:"Export Python Script",size:"full","onUpdate:modelValue":t[2]||(t[2]=t=>e.$emit("close"))},{footer:y(()=>[a(n,{onClick:t[0]||(t[0]=t=>e.$emit("close")),size:"large","data-testid":"btn-cancel-python-export","aria-label":"Cancel Python export"},{default:y(()=>t[3]||(t[3]=[k(" Cancel ")])),_:1,__:[3]}),a(n,{type:"primary",onClick:x,loading:i.value,size:"large","data-testid":"btn-confirm-python-export","data-mode":o.value,"aria-label":`Export Python script in ${o.value} mode`},{default:y(()=>t[4]||(t[4]=[k(" Export Script ")])),_:1,__:[4]},8,["loading","data-mode","aria-label"])]),default:y(()=>[m("div",ls,[m("h3",null,C(e.trial.name),1),m("div",rs,[a(l,null,{default:y(()=>[k(C(c.value)+" API calls",1)]),_:1}),a(l,null,{default:y(()=>[k(C(u.value)+" configurations",1)]),_:1}),a(l,null,{default:y(()=>[k(C(d.value)+" variable combinations",1)]),_:1})])]),m("div",ss,[t[11]||(t[11]=m("h4",null,"Export Mode",-1)),a(s,{value:o.value,"onUpdate:value":t[1]||(t[1]=e=>o.value=e),class:"mode-options","data-testid":"radiogroup-export-mode","aria-label":"Select Python export mode"},{default:y(()=>[a(r,{value:"simple",class:"mode-radio","data-testid":"radio-mode-simple","aria-label":"Simple script mode"},{default:y(()=>[m("div",os,[t[5]||(t[5]=m("div",{class:"mode-title"},"Simple Script",-1)),t[6]||(t[6]=m("div",{class:"mode-description"}," Educational script with variables as lists. Easy to understand, modify, and extend. Perfect for learning how AI APIs work. ",-1)),a(l,{color:"blue",size:"small"},{default:y(()=>[k("~"+C(p.value)+"KB",1)]),_:1})])]),_:1}),a(r,{value:"literal",class:"mode-radio","data-testid":"radio-mode-literal","aria-label":"Literal reproduction mode"},{default:y(()=>[m("div",is,[t[7]||(t[7]=m("div",{class:"mode-title"},"Literal Reproduction",-1)),t[8]||(t[8]=m("div",{class:"mode-description"}," Exact API calls pre-computed. Bit-for-bit reproduction of your experiment. Best for debugging and comparing results. ",-1)),a(l,{color:"blue",size:"small"},{default:y(()=>[k("~"+C(f.value)+"KB",1)]),_:1})])]),_:1}),a(r,{value:"native",class:"mode-radio","data-testid":"radio-mode-native","aria-label":"Native libraries mode"},{default:y(()=>[m("div",cs,[t[9]||(t[9]=m("div",{class:"mode-title"},"Native Libraries",-1)),t[10]||(t[10]=m("div",{class:"mode-description"}," Uses official Python SDKs (openai, anthropic, ollama). Cleanest code, best for production use. Requires: pip install openai anthropic ollama ",-1)),a(l,{color:"green",size:"small"},{default:y(()=>[k("~"+C(g.value)+"KB",1)]),_:1})])]),_:1})]),_:1},8,["value"])]),t[13]||(t[13]=m("div",{class:"export-section"},[m("h4",null,"Output Format"),m("div",{class:"format-info"},[m("p",null,"Both scripts save results using pandas in your choice of format:"),m("ul",null,[m("li",null,[m("strong",null,"CSV"),k(" - Universal format, opens in Excel/Google Sheets")]),m("li",null,[m("strong",null,"Excel"),k(" - Native Excel format")]),m("li",null,[m("strong",null,"JSON"),k(" - For programmatic access")]),m("li",null,[m("strong",null,"Parquet"),k(" - Efficient compressed format")]),m("li",null,[m("strong",null,"HTML"),k(" - For web viewing")]),m("li",null,[m("strong",null,"Markdown"),k(" - For documentation")]),m("li",null,[m("strong",null,"Stata"),k(" - For statistical analysis")]),m("li",null,[m("strong",null,"Pickle"),k(" - Python native format")])])])],-1)),m("div",us,[t[12]||(t[12]=m("h4",null,"Script Preview",-1)),m("div",ds,[a(S,{code:"",class:"preview-filename"},{default:y(()=>[k(C(b.value),1)]),_:1}),m("div",ps,[a(l,{size:"small"},{default:y(()=>[k(C(_.value)+" lines",1)]),_:1}),a(l,{size:"small"},{default:y(()=>[k(C(o.value)+" mode",1)]),_:1})])])])]),_:1,__:[13]})}}}),fs=Q(i({__name:"ResizableDivider",props:{minSize:{default:300},maxSize:{default:600},currentWidth:{default:380},disabled:{type:Boolean,default:!1}},emits:["resize","resizeStart","resizeEnd","reset"],setup(e,{emit:t}){const a=e,n=t,r=l(!1);return(e,t)=>(w(),p("div",{class:x(["resizable-divider",{resizing:r.value,disabled:e.disabled}]),onMousedown:t[0]||(t[0]=t=>!e.disabled&&function(e){e.preventDefault(),r.value=!0;const t=e.clientX,l=a.currentWidth;n("resizeStart");const s=e=>{if(!r.value)return;const s=e.clientX-t,o=l+s,i=Math.max(a.minSize,Math.min(a.maxSize,o));n("resize",i)},o=()=>{r.value=!1,n("resizeEnd"),document.removeEventListener("mousemove",s),document.removeEventListener("mouseup",o),document.body.style.userSelect="",document.body.style.cursor=""};document.body.style.userSelect="none",document.body.style.cursor="col-resize",document.addEventListener("mousemove",s),document.addEventListener("mouseup",o)}(t)),onDblclick:t[1]||(t[1]=t=>!e.disabled&&e.$emit("reset"))},t[2]||(t[2]=[m("div",{class:"divider-handle"},[m("div",{class:"handle-bar"})],-1)]),34))}}),[["__scopeId","data-v-d9082894"]]),vs={class:"trials-view-split","data-testid":"page-trials"},gs={class:"trials-layout"},hs={class:"trials-content"},ys="auditomatic.trial-sider-width",bs=Q(i({__name:"TrialsViewSplitPanel",setup(e){const t=G(),n=xe(),i=vt(),b=o(),_=s(),x=l(!1),C=l(!1),S=l(null),O=l(null),T=l(!1),E=l(),P=l(250),A=localStorage.getItem(ys);A&&(P.value=parseInt(A,10));const M=r(()=>n.hasAnyApiKeys||n.isProviderEnabled("ollama-chat")||n.isProviderEnabled("ollama-generate"));function R(e){P.value=e,localStorage.setItem(ys,e.toString())}function N(){P.value=250,localStorage.setItem(ys,"250")}function $(){x.value=!1,E.value=void 0,O.value=null,T.value=!1}function F(e){W.info("Trial created",{trialId:e}),$(),i.selectTrial(e)}async function j(e){W.info("Trial created and started",{trialId:e}),$(),await new Promise(e=>setTimeout(e,100)),i.selectTrial(e)}function D(e){W.info("Opening export for trial",{trialId:e.id}),S.value=e,C.value=!0}function L(e){W.info("Python script exported",{filename:e})}function U(){const e=b.query;if(e.duplicate&&"string"==typeof e.duplicate){const a=t.trials.find(t=>t.id===e.duplicate);a&&(O.value=a,T.value="true"===e.edit,x.value=!0)}else e.designId&&"string"==typeof e.designId&&(E.value=e.designId,x.value=!0);(e.duplicate||e.designId||e.edit)&&_.replace({query:{}})}const z=e=>{if((e.metaKey||e.ctrlKey)&&"k"===e.key){e.preventDefault();const t=document.querySelector(".trial-list-search input");t?.focus()}};return c(()=>b.query,()=>{U()}),c(()=>b.params.trialId,()=>{i.syncWithRoute()},{immediate:!0}),u(async()=>{if(document.addEventListener("keydown",z),await t.initialize(),await new Promise(e=>setTimeout(e,50)),U(),i.syncWithRoute(),!i.selectedTrialId){const e=t.trials.find(e=>"running"===e.status);e&&i.selectTrial(e.id)}}),d(()=>{document.removeEventListener("keydown",z)}),(e,t)=>{const n=h("a-button"),l=h("a-alert");return w(),p("div",vs,[M.value?f("",!0):(w(),v(l,{key:0,type:"warning",message:"No LLM providers configured",description:"Add keys for external APIs (local Ollama does not need keys) or enable Ollama provider.","show-icon":"",class:"provider-warning"},{action:y(()=>[a(g(H),{to:"/settings"},{default:y(()=>[a(n,{size:"small",type:"primary"},{default:y(()=>t[3]||(t[3]=[k(" Go to Settings ")])),_:1,__:[3]})]),_:1})]),_:1})),m("div",gs,[m("div",{class:"trials-sider",style:I({width:P.value+"px"})},[a(Zt,{collapsed:P.value<100,onCreateTrial:t[0]||(t[0]=e=>x.value=!0)},null,8,["collapsed"])],4),a(fs,{"min-size":50,"max-size":600,"current-width":P.value,onResize:R,onReset:N},null,8,["current-width"]),m("div",hs,[a(Zr,{onCreateTrial:t[1]||(t[1]=e=>x.value=!0)})])]),x.value?(w(),v(Oe,{key:1,initialDesignId:E.value,trialToDuplicate:O.value||void 0,isEditMode:T.value,onClose:$,onCreated:F,onCreatedAndStarted:j,onExportTrial:D},null,8,["initialDesignId","trialToDuplicate","isEditMode"])):f("",!0),C.value&&S.value?(w(),v(ms,{key:2,trial:S.value,onClose:t[2]||(t[2]=e=>{C.value=!1,S.value=null}),onExported:L},null,8,["trial"])):f("",!0)])}}}),[["__scopeId","data-v-b9706c82"]]);export{bs as default};
