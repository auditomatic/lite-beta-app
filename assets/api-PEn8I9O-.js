const e="openrouter",t="OpenRouter",n="/api/v1/chat/completions",s="POST",o={promptKey:"messages",wrapPrompt:!0,messageRole:"user"},r={text:{id:"text",label:"Text",description:"Standard text response",parameters:{},responseTransform:{contentPath:"choices[0].message.content",fallbackPaths:["choices[0].text","message.content"],errorPath:"error.message",emptyContentHandler:{checkPath:"choices[0].finish_reason",handlers:{length:"Response Incomplete - Token limit reached",stop:"Empty response generated"},default:"No content generated"},responseMetadata:{fields:[{name:"finish_reason",path:"choices[0].finish_reason",label:"Finish reason"},{name:"native_finish_reason",path:"choices[0].native_finish_reason",label:"Native finish reason"},{name:"prompt_tokens",path:"usage.prompt_tokens",label:"Prompt tokens"},{name:"completion_tokens",path:"usage.completion_tokens",label:"Completion tokens"},{name:"total_tokens",path:"usage.total_tokens",label:"Total tokens"},{name:"provider",path:"provider",label:"Provider"},{name:"model",path:"model",label:"Model"}]},validationRules:{requireNonEmptyContent:!1}}},json_schema:{id:"json_schema",label:"JSON Schema",description:"Structured JSON output following a specific schema",parameters:{response_format:{type:"json_schema",json_schema:{name:"structured_response",strict:!0,schema:{type:"object",properties:{answer:{type:"string",description:"The answer to the question"}},required:["answer"],additionalProperties:!1}}},provider:{require_parameters:!0}},responseTransform:{contentPath:"choices[0].message.content",fallbackPaths:["choices[0].text","message.content"],errorPath:"error.message",isJSON:!0,emptyContentHandler:{checkPath:"choices[0].finish_reason",handlers:{length:"Response Incomplete - Token limit reached",stop:"Empty response generated"},default:"No content generated"},validationRules:{requireNonEmptyContent:!0,conditions:[{type:"emptyWithReason",path:"choices[0].finish_reason",value:"length",errorMessage:"Response incomplete: max tokens reached (consider increasing max_tokens)"}]}}}},a={logprobsPath:"choices[0].logprobs.content"},i={reasoning:{extractionPaths:["choices[0].message.reasoning"],displayConfig:{position:"before-content",icon:"ðŸ§ ",label:"Model Reasoning",collapsible:!0,defaultCollapsed:!1,styling:"prominent",maxHeight:"400px"},emptyHandler:"No reasoning data in response"}},p=[{pattern:".*",name:"All OpenRouter Models",params:{temperature:{type:"number",description:"Sampling temperature",min:0,default:0,max:2,basic:!0},max_tokens:{type:"integer",description:"Maximum tokens to generate",min:1,default:128,basic:!0,is_output_length:!0},top_p:{type:"number",description:"Nucleus sampling threshold",min:0,max:1,basic:!1},top_k:{type:"integer",description:"Top-k sampling",min:1,basic:!1},frequency_penalty:{type:"number",description:"Frequency penalty",min:-2,max:2,basic:!1},presence_penalty:{type:"number",description:"Presence penalty",min:-2,max:2,basic:!1},repetition_penalty:{type:"number",description:"Repetition penalty",min:0,max:2,basic:!1},seed:{type:"integer",description:"Random seed",basic:!1},stop:{type:"array",description:"Stop sequences",basic:!1},logit_bias:{type:"string",description:"Token ID to bias mapping",basic:!1},logprobs:{type:"boolean",description:"Include log probabilities in response",basic:!1,enables_features:{logprobs:{boolean_value:!0}}},top_logprobs:{type:"integer",description:"Number of top log probabilities",min:0,max:20,basic:!1},min_p:{type:"number",description:"Minimum probability threshold",min:0,max:1,basic:!1},top_a:{type:"number",description:"Alternate top sampling",min:0,max:1,basic:!1},user:{type:"string",description:"User identifier",basic:!1},provider:{type:"object",description:"Provider routing preferences",basic:!1,properties:{require_parameters:{type:"boolean",description:"Only use providers that support all parameters"},order:{type:"array",description:"Preferred provider order"},allow_fallbacks:{type:"boolean",description:"Allow fallback providers if preferred unavailable"}}},models:{type:"array",description:"Alternate models for routing",basic:!1},transforms:{type:"array",description:"Prompt transforms",basic:!1}}}],l={id:e,name:t,endpoint:n,method:s,requestTransform:o,responseModes:r,responseExtraction:a,responseFeatures:i,modelRules:p};export{l as default,n as endpoint,e as id,s as method,p as modelRules,t as name,o as requestTransform,a as responseExtraction,i as responseFeatures,r as responseModes};
